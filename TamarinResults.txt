maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.

theory Netto begin

// Function signature and definition of the equational theory E

functions: fst/1, get/1, look/1, object/1, pair/2, receipt/1, snd/1
equations:
    fst(<x.1, x.2>) = x.1,
    get(object(a)) = a,
    look(receipt(a)) = a,
    snd(<x.1, x.2>) = x.2



rule (modulo E) 1Purchase:
   [ Fr( ~cont_i ) ]
  --[ Type( $Cu, 'customer' ), Purchase( $S, $Cu, ~cont_i ) ]->
   [ !Container( object(~cont_i) ), Out_O( $S, $Cu, object(~cont_i) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) 3Output:
   [
   !Container( object(cont_i) ), Fr( ~barcode_i ),
   In_O( $Cu, $V, object(cont_i) )
   ]
  --[
  SendBarcode( ~barcode_i ), GetCont( $V, $Cu, cont_i ),
  Type( $Cu, 'customer' ), Type( $V, 'vending' )
  ]->
   [ Out_O( $V, $Cu, receipt(~barcode_i) ), Info( ~barcode_i, cont_i ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) 5Cash:
   [ In_O( $Cu, $Ca, receipt(barcode_i) ), Info( barcode_i, cont_i ) ]
  --[
  Cash( $Ca, $Cu, cont_i, barcode_i ), Type( $Cu, 'customer' ),
  Type( $Ca, 'cashier' )
  ]->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) 2Return:
   [ In_O( $S, $Cu, object(cont_i) ) ]
  --[ Type( $Cu, 'customer' ), Type( $V, 'vending' ) ]->
   [ Out_O( $Cu, $V, object(cont_i) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) 4Hand:
   [ In_O( $V, $Cu, receipt(barcode_i) ) ]
  --[
  Type( $Ca, 'cashier' ), Type( $Cu, 'customer' ), Type( $V, 'vending' )
  ]->
   [ Out_O( $Cu, $Ca, receipt(barcode_i) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ChanOut_I:
   [ Out_I( $A, $B, x ) ]
  --[ ChanOut_I( $A, $B, x ), Neq( $A, $B ) ]->
   [ !Sec_I( $A, $B, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ChanIn_I:
   [ !Sec_I( $A, $B, x ) ]
  --[ ChanIn_I( $A, $B, x ), Neq( $A, $B ) ]->
   [ In_I( $A, $B, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ChanIn_O:
   [ Pos( $A, $B, x ) ]
  --[ ChanIn_O( $A, $B, x ), Neq( $A, $B ) ]->
   [ In_O( $A, $B, x ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) ChanOut_OO:
   [ Out_O( $A, $B, object(y) ) ]
  --[ ChanIn_O( $A, $B, object(y) ), Neq( $A, $B ) ]->
   [ Pos( $A, $B, object(y) ), Look( $B, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ChanOut_OP:
   [ Out_O( $A, $B, receipt(y) ) ]
  --[
  ChanIn_O( $A, $B, receipt(y) ), Neq( $A, $B ), NoType( $B, 'vending' )
  ]->
   [ Pos( $A, $B, receipt(y) ), Read( $B, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Receive_HK:
   [ GotInfo( $H, x ) ] --[ Once( $H, x ) ]-> [ !HK( $H, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Look:
   [ Look( $A, x ) ] --[ Human( $A ) ]-> [ GotInfo( $A, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Read:
   [ Read( $A, x ) ] --[ Human( $A ) ]-> [ GotInfo( $A, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Chatty[color=#ff0000]:
   [ !HK( $H, x ) ] --[ Chatty( $H, x ) ]-> [ Out( x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Cocky[color=#ff0000]:
   [ Pos( $A, $B, x ) ]
  --[
  Cocky( $B, x ), Neq( $A, $B ), Neq( $A, $C ), Neq( $B, $C ), Human( $B ),
  Human( $C ), Once( x, x )
  ]->
   [ In_OA( $B, $C, x ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) CockyGet:
   [ Out_OA( $A, $B, x ) ]
  --[ Neq( $A, $B ), Human( $A ) ]->
   [ Out_O( $A, $B, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) GiveA:
   [ PosUA( $Att, x ) ] --[ Human( $Att ) ]-> [ Out_OA( $Att, $B, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) GetA:
   [ In_OA( $A, $Att, x ) ] --[ Human( $Att ) ]-> [ PosDA( $Att, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) LookA:
   [ PosDA( $Att, object(y) ) ]
  --[ LookA( y ), Human( $Att ) ]->
   [ Out( y ), PosUA( $Att, object(y) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ReadA:
   [ PosDA( $Att, receipt(y) ) ]
  --[ ReadA( y ), Human( $Att ) ]->
   [ Out( y ), PosUA( $Att, receipt(y) ) ]

  /* has exactly the trivial AC variant */

restriction inequality:
  "∀ x #i. (Neq( x, x ) @ #i) ⇒ (⊥)"
  // safety formula

restriction type_distinct:
  "∀ x t1 t2 #i #j.
    ((Type( x, t1 ) @ #i) ∧ (Type( x, t2 ) @ #j)) ⇒ (t1 = t2)"
  // safety formula

restriction once:
  "∀ x y #i #j. ((Once( x, y ) @ #i) ∧ (Once( x, y ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction human:
  "∀ x #i.
    (Human( x ) @ #i) ⇒
    ((∃ #j. (Type( x, 'customer' ) @ #j) ∧ (#j < #i)) ∨
     (∃ #j. (Type( x, 'cashier' ) @ #j) ∧ (#j < #i)))"

restriction notype:
  "∀ x y #i. (NoType( x, y ) @ #i) ⇒ (¬(∃ #j. Type( x, y ) @ #j))"
  // safety formula

lemma chatty [sources]:
  all-traces
  "∀ h x #i.
    (Chatty( h, x ) @ #i) ⇒
    (((∃ #j. (!KU( x ) @ #j) ∧ (#j < #i)) ∨
      (∃ s c #j. (Purchase( s, c, x ) @ #j) ∧ (#j < #i))) ∨
     (∃ #j. (SendBarcode( x ) @ #j) ∧ (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ h x #i.
  (Chatty( h, x ) @ #i)
 ∧
  (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ s c #j. (Purchase( s, c, x ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #j. (SendBarcode( x ) @ #j) ⇒ ¬(#j < #i))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∀ h x #i.
           (Chatty( h, x ) @ #i)
          ⇒
           ((last(#i)) ∨
            (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) ∨
            (∃ s c #j. (Purchase( s, c, x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) ∨
            (∃ #j. (SendBarcode( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))))  ∥
         (∃ x #i.
           (Human( x ) @ #i)
          ∧
           (¬(last(#i))) ∧
           (∀ #j.
             (Type( x, 'customer' ) @ #j) ⇒ ((last(#j)) ∨ (#j = #i) ∨ (#i < #j))) ∧
           (∀ #j.
             (Type( x, 'cashier' ) @ #j) ⇒ ((last(#j)) ∨ (#j = #i) ∨ (#i < #j)))) )
    case case_1
    solve( (last(#i))  ∥
           (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ s c #j. (Purchase( s, c, x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ #j. (SendBarcode( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) )
      case case_1
      solve( !HK( $H, x ) ▶₀ #i )
        case Receive_HK_case_1
        by contradiction /* from formulas */
      next
        case Receive_HK_case_2
        solve( Pos( $S, $A, object(x) ) ▶₀ #vr.4 )
          case ChanOut_OO_case_1
          by contradiction /* from formulas */
        next
          case ChanOut_OO_case_2
          solve( Pos( $A.2, $A.1, object(x) ) ▶₀ #vr.10 )
            case ChanOut_OO_case_1
            by contradiction /* from formulas */
          next
            case ChanOut_OO_case_2
            solve( Pos( $S.1, $A.2, object(x) ) ▶₀ #vr.13 )
              case ChanOut_OO_case_1
              by contradiction /* from formulas */
            next
              case ChanOut_OO_case_2
              by contradiction /* cyclic */
            qed
          qed
        qed
      next
        case Receive_HK_case_3
        solve( Pos( $A.2, $A.1, object(x) ) ▶₀ #vr.7 )
          case ChanOut_OO_case_1
          by contradiction /* from formulas */
        next
          case ChanOut_OO_case_2
          solve( Pos( $S, $A.2, object(x) ) ▶₀ #vr.10 )
            case ChanOut_OO_case_1
            by contradiction /* from formulas */
          next
            case ChanOut_OO_case_2
            by contradiction /* cyclic */
          qed
        next
          case ChanOut_OO_case_3
          by contradiction /* cyclic */
        qed
      next
        case Receive_HK_case_4
        by contradiction /* from formulas */
      next
        case Receive_HK_case_5
        solve( Pos( $V, $A, receipt(x) ) ▶₀ #vr.4 )
          case ChanOut_OP_case_1
          by contradiction /* from formulas */
        next
          case ChanOut_OP_case_2
          solve( Pos( $A.2, $A.1, receipt(x) ) ▶₀ #vr.10 )
            case ChanOut_OP_case_1
            by contradiction /* from formulas */
          next
            case ChanOut_OP_case_2
            solve( Pos( $V.1, $A.2, receipt(x) ) ▶₀ #vr.13 )
              case ChanOut_OP_case_1
              by contradiction /* from formulas */
            next
              case ChanOut_OP_case_2
              by contradiction /* cyclic */
            qed
          qed
        qed
      next
        case Receive_HK_case_6
        solve( Pos( $A.2, $A.1, receipt(x) ) ▶₀ #vr.7 )
          case ChanOut_OP_case_1
          by contradiction /* from formulas */
        next
          case ChanOut_OP_case_2
          solve( Pos( $V, $A.2, receipt(x) ) ▶₀ #vr.10 )
            case ChanOut_OP_case_1
            by contradiction /* from formulas */
          next
            case ChanOut_OP_case_2
            by contradiction /* cyclic */
          qed
        next
          case ChanOut_OP_case_3
          by contradiction /* cyclic */
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    next
      case case_4
      by contradiction /* from formulas */
    qed
  next
    case case_2
    solve( (∃ #j. (Type( x.1, 'customer' ) @ #j) ∧ #j < #i.1)  ∥
           (∃ #j. (Type( x.1, 'cashier' ) @ #j) ∧ #j < #i.1) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    qed
  qed
qed

lemma readA [sources]:
  all-traces
  "∀ x #i.
    (ReadA( x ) @ #i) ⇒
    ((∃ #j. (!KU( x ) @ #j) ∧ (#j < #i)) ∨
     (∃ #j. (SendBarcode( x ) @ #j) ∧ (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i.
  (ReadA( x ) @ #i)
 ∧
  (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #j. (SendBarcode( x ) @ #j) ⇒ ¬(#j < #i))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∀ x #i.
           (ReadA( x ) @ #i)
          ⇒
           ((last(#i)) ∨
            (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) ∨
            (∃ #j. (SendBarcode( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))))  ∥
         (∃ x #i.
           (Human( x ) @ #i)
          ∧
           (¬(last(#i))) ∧
           (∀ #j.
             (Type( x, 'customer' ) @ #j) ⇒ ((last(#j)) ∨ (#j = #i) ∨ (#i < #j))) ∧
           (∀ #j.
             (Type( x, 'cashier' ) @ #j) ⇒ ((last(#j)) ∨ (#j = #i) ∨ (#i < #j)))) )
    case case_1
    solve( (last(#i))  ∥
           (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ #j. (SendBarcode( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) )
      case case_1
      solve( (∃ #j. (Type( $Att, 'customer' ) @ #j) ∧ #j < #i)  ∥
             (∃ #j. (Type( $Att, 'cashier' ) @ #j) ∧ #j < #i) )
        case case_1
        solve( PosDA( $Att, receipt(x) ) ▶₀ #i )
          case GetA
          solve( Pos( $A.1, $A, receipt(x) ) ▶₀ #vr.1 )
            case ChanOut_OP_case_1
            by contradiction /* from formulas */
          next
            case ChanOut_OP_case_2
            solve( Pos( $V, $A.1, receipt(x) ) ▶₀ #vr.4 )
              case ChanOut_OP
              by contradiction /* from formulas */
            qed
          next
            case ChanOut_OP_case_3
            by contradiction /* cyclic */
          qed
        qed
      next
        case case_2
        solve( PosDA( $Att, receipt(x) ) ▶₀ #i )
          case GetA
          solve( Pos( $A.1, $A, receipt(x) ) ▶₀ #vr.1 )
            case ChanOut_OP_case_1
            by contradiction /* from formulas */
          next
            case ChanOut_OP_case_2
            solve( Pos( $V, $A.1, receipt(x) ) ▶₀ #vr.4 )
              case ChanOut_OP
              by contradiction /* from formulas */
            qed
          next
            case ChanOut_OP_case_3
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    qed
  next
    case case_2
    solve( (∃ #j. (Type( $Att, 'customer' ) @ #j) ∧ #j < #i)  ∥
           (∃ #j. (Type( $Att, 'cashier' ) @ #j) ∧ #j < #i) )
      case case_1
      solve( (∃ #j. (Type( x.1, 'customer' ) @ #j) ∧ #j < #i.1)  ∥
             (∃ #j. (Type( x.1, 'cashier' ) @ #j) ∧ #j < #i.1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      qed
    next
      case case_2
      solve( (∃ #j. (Type( x.1, 'customer' ) @ #j) ∧ #j < #i.1)  ∥
             (∃ #j. (Type( x.1, 'cashier' ) @ #j) ∧ #j < #i.1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma lookA [sources]:
  all-traces
  "∀ x #i.
    (LookA( x ) @ #i) ⇒
    (((∃ #j. (!KU( x ) @ #j) ∧ (#j < #i)) ∨
      (∃ h c #j. (Purchase( h, c, x ) @ #j) ∧ (#j < #i))) ∨
     (∃ #j. (SendBarcode( x ) @ #j) ∧ (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i.
  (LookA( x ) @ #i)
 ∧
  (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ h c #j. (Purchase( h, c, x ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #j. (SendBarcode( x ) @ #j) ⇒ ¬(#j < #i))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∀ x #i.
           (LookA( x ) @ #i)
          ⇒
           ((last(#i)) ∨
            (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) ∨
            (∃ h c #j. (Purchase( h, c, x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) ∨
            (∃ #j. (SendBarcode( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))))  ∥
         (∃ x #i.
           (Human( x ) @ #i)
          ∧
           (¬(last(#i))) ∧
           (∀ #j.
             (Type( x, 'customer' ) @ #j) ⇒ ((last(#j)) ∨ (#j = #i) ∨ (#i < #j))) ∧
           (∀ #j.
             (Type( x, 'cashier' ) @ #j) ⇒ ((last(#j)) ∨ (#j = #i) ∨ (#i < #j)))) )
    case case_1
    solve( (last(#i))  ∥
           (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ h c #j. (Purchase( h, c, x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ #j. (SendBarcode( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) )
      case case_1
      solve( (∃ #j. (Type( $Att, 'customer' ) @ #j) ∧ #j < #i)  ∥
             (∃ #j. (Type( $Att, 'cashier' ) @ #j) ∧ #j < #i) )
        case case_1
        solve( PosDA( $Att, object(x) ) ▶₀ #i )
          case GetA
          solve( Pos( $A.1, $A, object(x) ) ▶₀ #vr.1 )
            case ChanOut_OO_case_1
            by contradiction /* from formulas */
          next
            case ChanOut_OO_case_2
            solve( Pos( $S, $A.1, object(x) ) ▶₀ #vr.4 )
              case ChanOut_OO_case_1
              by contradiction /* from formulas */
            next
              case ChanOut_OO_case_2
              by contradiction /* cyclic */
            qed
          next
            case ChanOut_OO_case_3
            by contradiction /* cyclic */
          qed
        qed
      next
        case case_2
        solve( PosDA( $Att, object(x) ) ▶₀ #i )
          case GetA
          solve( Pos( $A.1, $A, object(x) ) ▶₀ #vr.1 )
            case ChanOut_OO_case_1
            by contradiction /* from formulas */
          next
            case ChanOut_OO_case_2
            solve( Pos( $S, $A.1, object(x) ) ▶₀ #vr.4 )
              case ChanOut_OO_case_1
              by contradiction /* from formulas */
            next
              case ChanOut_OO_case_2
              by contradiction /* cyclic */
            qed
          next
            case ChanOut_OO_case_3
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    next
      case case_4
      by contradiction /* from formulas */
    qed
  next
    case case_2
    solve( (∃ #j. (Type( $Att, 'customer' ) @ #j) ∧ #j < #i)  ∥
           (∃ #j. (Type( $Att, 'cashier' ) @ #j) ∧ #j < #i) )
      case case_1
      solve( (∃ #j. (Type( x.1, 'customer' ) @ #j) ∧ #j < #i.1)  ∥
             (∃ #j. (Type( x.1, 'cashier' ) @ #j) ∧ #j < #i.1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      qed
    next
      case case_2
      solve( (∃ #j. (Type( x.1, 'customer' ) @ #j) ∧ #j < #i.1)  ∥
             (∃ #j. (Type( x.1, 'cashier' ) @ #j) ∧ #j < #i.1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma sendcashNoAtt:
  exists-trace
  "∃ a b m n #i.
    ((((Cash( a, b, m, n ) @ #i) ∧ (¬(∃ x #k. PrintA( x ) @ #k))) ∧
      (¬(∃ x #k. BuildA( x ) @ #k))) ∧
     (¬(∃ h x #k. Chatty( h, x ) @ #k))) ∧
    (¬(∃ h x #k. Cocky( h, x ) @ #k))"
/*
guarded formula characterizing all satisfying traces:
"∃ a b m n #i.
  (Cash( a, b, m, n ) @ #i)
 ∧
  (∀ x #k. (PrintA( x ) @ #k) ⇒ ⊥) ∧
  (∀ x #k. (BuildA( x ) @ #k) ⇒ ⊥) ∧
  (∀ h x #k. (Chatty( h, x ) @ #k) ⇒ ⊥) ∧
  (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥)"
*/
simplify
solve( Info( n, m ) ▶₁ #i )
  case 3Output
  solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
    case ChanIn_O
    solve( Pos( $Cu.1, $V, object(~cont_i) ) ▶₀ #vr.2 )
      case ChanOut_OO_case_1
      solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.3 )
        case ChanOut_OP_case_1
        solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.6 )
          case ChanOut_OO_case_1
          solve( Pos( $V.1, $Cu, receipt(~barcode_i) ) ▶₀ #vr.9 )
            case ChanOut_OP_case_1
            SOLVED // trace found
          qed
        qed
      qed
    qed
  qed
qed

lemma cashforvoucherNetto:
  all-traces
  "∀ ca cu c bar #i.
    (Cash( ca, cu, c, bar ) @ #i) ⇒
    (∃ #j.
      ((SendBarcode( bar ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ a2 b2 #i2. (Cash( a2, b2, c, bar ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ #j2. (SendBarcode( bar ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  ∀ #j.
   (SendBarcode( bar ) @ #j)
  ⇒
   ((¬(#j < #i)) ∨
    ((∃ a2 b2 #i2. (Cash( a2, b2, c, bar ) @ #i2) ∧ ¬(#i = #i2)) ∧
     (∀ #j2. (SendBarcode( bar ) @ #j2) ⇒ #j = #j2)))"
*/
simplify
solve( Info( bar, c ) ▶₁ #i )
  case 3Output
  solve( Info( ~barcode_i, ~cont_i ) ▶₁ #i2 )
    case 3Output
    by contradiction /* from formulas */
  qed
qed

lemma cashforcontainerNetto:
  all-traces
  "∀ ca cu c bar #i.
    (Cash( ca, cu, c, bar ) @ #i) ⇒
    (∃ v cu1 #j.
      ((GetCont( v, cu1, c ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ ca1 cu2 bar2 #i2.
           (Cash( ca1, cu2, c, bar2 ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ v1 cu3 #j2. (GetCont( v1, cu3, c ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  ∀ v cu1 #j.
   (GetCont( v, cu1, c ) @ #j)
  ⇒
   ((¬(#j < #i)) ∨
    ((∃ ca1 cu2 bar2 #i2. (Cash( ca1, cu2, c, bar2 ) @ #i2) ∧ ¬(#i = #i2)) ∧
     (∀ v1 cu3 #j2. (GetCont( v1, cu3, c ) @ #j2) ⇒ #j = #j2)))"
*/
simplify
solve( Info( bar, c ) ▶₁ #i )
  case 3Output
  solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
    case 3Output
    by contradiction /* from formulas */
  qed
qed

lemma cashforcontainerCustNetto:
  all-traces
  "∀ ca cu c bar #i.
    ((Cash( ca, cu, c, bar ) @ #i) ∧
     (((¬(∃ h x #k. Chatty( h, x ) @ #k)) ∧
       (¬(∃ h x #k. Cocky( h, x ) @ #k))) ∨
      ((¬(∃ x #k. PrintA( x ) @ #k)) ∧ (¬(∃ h x #k. Cocky( h, x ) @ #k))))) ⇒
    (∃ #j v.
      ((GetCont( v, cu, c ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ v1 #j2. (GetCont( v1, cu, c ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  ((((∀ h x #k. (Chatty( h, x ) @ #k) ⇒ ⊥) ∧
     (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥)) ∨
    ((∀ x #k. (PrintA( x ) @ #k) ⇒ ⊥) ∧
     (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥)))) ∧
  (∀ #j v.
    (GetCont( v, cu, c ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     ((∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ ¬(#i = #i2)) ∧
      (∀ v1 #j2. (GetCont( v1, cu, c ) @ #j2) ⇒ #j = #j2))))"
*/
simplify
solve( ((∀ h x #k. (Chatty( h, x ) @ #k) ⇒ ⊥) ∧
        (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥))  ∥
       ((∀ x #k. (PrintA( x ) @ #k) ⇒ ⊥) ∧
        (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥)) )
  case case_1
  solve( Info( bar, c ) ▶₁ #i )
    case 3Output
    solve( Pos( $Cu.1, $V, object(~cont_i) ) ▶₀ #vr.2 )
      case ChanOut_OO_case_1
      solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.5 )
        case ChanOut_OO_case_1
        solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
          case ChanIn_O
          solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.7 )
            case ChanOut_OP_case_1
            solve( Pos( $V.1, $Cu, receipt(~barcode_i) ) ▶₀ #vr.10 )
              case ChanOut_OP_case_1
              solve( (#i < #i2)  ∥ (#i2 < #i) )
                case case_1
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO_case_1
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO_case_1
                      by contradiction /* cyclic */
                    next
                      case ChanOut_OO_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case ChanOut_OO_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case case_2
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO_case_1
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO_case_1
                      by contradiction /* cyclic */
                    next
                      case ChanOut_OO_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case ChanOut_OO_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case ChanOut_OP_case_2
              by contradiction /* from formulas */
            qed
          next
            case ChanOut_OP_case_2
            by contradiction /* from formulas */
          qed
        qed
      next
        case ChanOut_OO_case_2
        by contradiction /* from formulas */
      qed
    next
      case ChanOut_OO_case_2
      by contradiction /* from formulas */
    qed
  qed
next
  case case_2
  solve( Info( bar, c ) ▶₁ #i )
    case 3Output
    solve( Pos( $Cu.1, $V, object(~cont_i) ) ▶₀ #vr.2 )
      case ChanOut_OO_case_1
      solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.5 )
        case ChanOut_OO_case_1
        solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
          case ChanIn_O
          solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.7 )
            case ChanOut_OP_case_1
            solve( Pos( $V.1, $Cu, receipt(~barcode_i) ) ▶₀ #vr.10 )
              case ChanOut_OP_case_1
              solve( (#i < #i2)  ∥ (#i2 < #i) )
                case case_1
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO_case_1
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO_case_1
                      by contradiction /* cyclic */
                    next
                      case ChanOut_OO_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case ChanOut_OO_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case case_2
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO_case_1
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO_case_1
                      by contradiction /* cyclic */
                    next
                      case ChanOut_OO_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case ChanOut_OO_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case ChanOut_OP_case_2
              by contradiction /* from formulas */
            qed
          next
            case ChanOut_OP_case_2
            by contradiction /* from formulas */
          qed
        qed
      next
        case ChanOut_OO_case_2
        by contradiction /* from formulas */
      qed
    next
      case ChanOut_OO_case_2
      by contradiction /* from formulas */
    qed
  qed
qed

lemma cashforpurchaseNetto:
  all-traces
  "∀ ca cu c bar #i.
    ((Cash( ca, cu, c, bar ) @ #i) ∧
     ((¬(∃ x #k. BuildA( x ) @ #k)) ∨
      ((¬(∃ h x #k. Chatty( h, x ) @ #k)) ∧
       (¬(∃ h x #k. Cocky( h, x ) @ #k))))) ⇒
    (∃ cu1 s #j.
      ((Purchase( s, cu1, c ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ ca1 cu2 bar2 #i2.
           (Cash( ca1, cu2, c, bar2 ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ s1 cu3 #j2. (Purchase( s1, cu3, c ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  (((∀ x #k. (BuildA( x ) @ #k) ⇒ ⊥) ∨
    ((∀ h x #k. (Chatty( h, x ) @ #k) ⇒ ⊥) ∧
     (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥)))) ∧
  (∀ cu1 s #j.
    (Purchase( s, cu1, c ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     ((∃ ca1 cu2 bar2 #i2. (Cash( ca1, cu2, c, bar2 ) @ #i2) ∧ ¬(#i = #i2)) ∧
      (∀ s1 cu3 #j2. (Purchase( s1, cu3, c ) @ #j2) ⇒ #j = #j2))))"
*/
simplify
solve( (∀ x #k. (BuildA( x ) @ #k) ⇒ ⊥)  ∥
       ((∀ h x #k. (Chatty( h, x ) @ #k) ⇒ ⊥) ∧
        (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥)) )
  case case_1
  solve( Info( bar, c ) ▶₁ #i )
    case 3Output
    solve( (#i < #i2)  ∥ (#i2 < #i) )
      case case_1
      solve( Pos( $Cu.2, $V, object(~cont_i) ) ▶₀ #vr.2 )
        case ChanOut_OO_case_1
        solve( Pos( $S.1, $Cu.2, object(~cont_i) ) ▶₀ #vr.5 )
          case ChanOut_OO_case_1
          solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
            case 3Output
            solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.8 )
              case ChanOut_OO_case_1
              solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.11 )
                case ChanOut_OO_case_1
                by contradiction /* cyclic */
              next
                case ChanOut_OO_case_2
                solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.13)  ∥
                       (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.13) )
                  case case_1
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                    case case_1
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.15)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.15) )
                      case case_1
                      solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.16)  ∥
                             (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.16) )
                        case case_1
                        solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                               (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                          case case_1
                          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                            case case_1
                            by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                          qed
                        next
                          case case_2
                          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                            case case_1
                            by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                    case case_2
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.15)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.15) )
                      case case_2
                      solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.16)  ∥
                             (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.16) )
                        case case_2
                        solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                               (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                          case case_1
                          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                            case case_2
                            by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                          qed
                        next
                          case case_2
                          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                            case case_2
                            by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case ChanOut_OO_case_2
              solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                     (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.10) )
                case case_1
                solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                       (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                  case case_1
                  solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.12)  ∥
                         (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.12) )
                    case case_1
                    solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.13)  ∥
                           (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.13) )
                      case case_1
                      solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                             (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                        case case_1
                        solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                               (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                          case case_1
                          by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.14 )
                        qed
                      next
                        case case_2
                        solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                               (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                          case case_1
                          by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.14 )
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case ChanOut_OO_case_2
          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.7)  ∥
                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.7) )
            case case_1
            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.8) )
              case case_1
              solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.9)  ∥
                     (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.9) )
                case case_1
                solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                       (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.10) )
                  case case_1
                  solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                         (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                    case case_1
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                      case case_1
                      solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                        case ChanOut_OO
                        solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                          case 3Output
                          solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.14 )
                            case ChanOut_OO
                            solve( Pos( $S.2, $Cu.3, object(~cont_i) ) ▶₀ #vr.17 )
                              case ChanOut_OO
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                      case case_1
                      by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                    qed
                  qed
                qed
              qed
            qed
          next
            case case_2
            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.8) )
              case case_2
              solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.9)  ∥
                     (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.9) )
                case case_2
                solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                       (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.10) )
                  case case_2
                  solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                         (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                    case case_1
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                      case case_2
                      solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                        case ChanOut_OO
                        solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                          case 3Output
                          solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.14 )
                            case ChanOut_OO
                            solve( Pos( $S.2, $Cu.3, object(~cont_i) ) ▶₀ #vr.17 )
                              case ChanOut_OO
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                      case case_2
                      by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case ChanOut_OO_case_2
        solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.4)  ∥
               (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.4) )
          case case_1
          solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.5)  ∥
                 (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.5) )
            case case_1
            solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.6)  ∥
                   (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.6) )
              case case_1
              solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.7)  ∥
                     (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.7) )
                case case_1
                solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                       (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.8) )
                  case case_1
                  solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                         (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.8) )
                    case case_1
                    solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.8 )
                      case ChanOut_OO
                      solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                        case 3Output
                        solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.11 )
                          case ChanOut_OO_case_1
                          by solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.14 )
                        next
                          case ChanOut_OO_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                         (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.8) )
                    case case_1
                    by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.8 )
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case case_2
      solve( Pos( $Cu.2, $V, object(~cont_i) ) ▶₀ #vr.2 )
        case ChanOut_OO_case_1
        solve( Pos( $S.1, $Cu.2, object(~cont_i) ) ▶₀ #vr.5 )
          case ChanOut_OO_case_1
          solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
            case 3Output
            solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.8 )
              case ChanOut_OO_case_1
              solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.11 )
                case ChanOut_OO_case_1
                by contradiction /* cyclic */
              next
                case ChanOut_OO_case_2
                solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.13)  ∥
                       (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.13) )
                  case case_1
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                    case case_1
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.15)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.15) )
                      case case_1
                      solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.16)  ∥
                             (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.16) )
                        case case_1
                        solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                               (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                          case case_1
                          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                            case case_1
                            by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                          qed
                        next
                          case case_2
                          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                            case case_1
                            by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                    case case_2
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.15)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.15) )
                      case case_2
                      solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.16)  ∥
                             (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.16) )
                        case case_2
                        solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                               (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                          case case_1
                          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                            case case_2
                            by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                          qed
                        next
                          case case_2
                          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                            case case_2
                            by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case ChanOut_OO_case_2
              solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                     (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.10) )
                case case_1
                solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                       (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                  case case_1
                  solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.12)  ∥
                         (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.12) )
                    case case_1
                    solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.13)  ∥
                           (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.13) )
                      case case_1
                      solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                             (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                        case case_1
                        solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                               (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                          case case_1
                          by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.14 )
                        qed
                      next
                        case case_2
                        solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                               (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                          case case_1
                          by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.14 )
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case ChanOut_OO_case_2
          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.7)  ∥
                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.7) )
            case case_1
            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.8) )
              case case_1
              solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.9)  ∥
                     (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.9) )
                case case_1
                solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                       (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.10) )
                  case case_1
                  solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                         (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                    case case_1
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                      case case_1
                      solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                        case ChanOut_OO
                        solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                          case 3Output
                          solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.14 )
                            case ChanOut_OO
                            solve( Pos( $S.2, $Cu.3, object(~cont_i) ) ▶₀ #vr.17 )
                              case ChanOut_OO
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                      case case_1
                      by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                    qed
                  qed
                qed
              qed
            qed
          next
            case case_2
            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.8) )
              case case_2
              solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.9)  ∥
                     (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.9) )
                case case_2
                solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                       (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.10) )
                  case case_2
                  solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                         (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                    case case_1
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                      case case_2
                      solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                        case ChanOut_OO
                        solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                          case 3Output
                          solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.14 )
                            case ChanOut_OO
                            solve( Pos( $S.2, $Cu.3, object(~cont_i) ) ▶₀ #vr.17 )
                              case ChanOut_OO
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                      case case_2
                      by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case ChanOut_OO_case_2
        solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.4)  ∥
               (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.4) )
          case case_1
          solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.5)  ∥
                 (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.5) )
            case case_1
            solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.6)  ∥
                   (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.6) )
              case case_1
              solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.7)  ∥
                     (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.7) )
                case case_1
                solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                       (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.8) )
                  case case_1
                  solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                         (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.8) )
                    case case_1
                    solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.8 )
                      case ChanOut_OO
                      solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                        case 3Output
                        solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.11 )
                          case ChanOut_OO_case_1
                          by solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.14 )
                        next
                          case ChanOut_OO_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                         (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.8) )
                    case case_1
                    by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.8 )
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case case_2
  solve( Info( bar, c ) ▶₁ #i )
    case 3Output
    solve( (#i < #i2)  ∥ (#i2 < #i) )
      case case_1
      solve( Pos( $Cu.2, $V, object(~cont_i) ) ▶₀ #vr.2 )
        case ChanOut_OO_case_1
        solve( Pos( $S.1, $Cu.2, object(~cont_i) ) ▶₀ #vr.5 )
          case ChanOut_OO_case_1
          solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
            case 3Output
            solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.8 )
              case ChanOut_OO_case_1
              solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.11 )
                case ChanOut_OO_case_1
                by contradiction /* cyclic */
              next
                case ChanOut_OO_case_2
                by contradiction /* from formulas */
              qed
            next
              case ChanOut_OO_case_2
              by contradiction /* from formulas */
            qed
          qed
        next
          case ChanOut_OO_case_2
          by contradiction /* from formulas */
        qed
      next
        case ChanOut_OO_case_2
        by contradiction /* from formulas */
      qed
    next
      case case_2
      solve( Pos( $Cu.2, $V, object(~cont_i) ) ▶₀ #vr.2 )
        case ChanOut_OO_case_1
        solve( Pos( $S.1, $Cu.2, object(~cont_i) ) ▶₀ #vr.5 )
          case ChanOut_OO_case_1
          solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
            case 3Output
            solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.8 )
              case ChanOut_OO_case_1
              solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.11 )
                case ChanOut_OO_case_1
                by contradiction /* cyclic */
              next
                case ChanOut_OO_case_2
                by contradiction /* from formulas */
              qed
            next
              case ChanOut_OO_case_2
              by contradiction /* from formulas */
            qed
          qed
        next
          case ChanOut_OO_case_2
          by contradiction /* from formulas */
        qed
      next
        case ChanOut_OO_case_2
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma cashforpurchaseCustNetto:
  all-traces
  "∀ ca cu c bar #i.
    ((Cash( ca, cu, c, bar ) @ #i) ∧
     (((¬(∃ h x #k. Chatty( h, x ) @ #k)) ∧
       (¬(∃ h x #k. Cocky( h, x ) @ #k))) ∨
      (((¬(∃ x #k. PrintA( x ) @ #k)) ∧ (¬(∃ h x #k. Cocky( h, x ) @ #k))) ∧
       (¬(∃ x #k. BuildA( x ) @ #k))))) ⇒
    (∃ s #j.
      ((Purchase( s, cu, c ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ s1 #j2. (Purchase( s1, cu, c ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  ((((∀ h x #k. (Chatty( h, x ) @ #k) ⇒ ⊥) ∧
     (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥)) ∨
    ((∀ x #k. (PrintA( x ) @ #k) ⇒ ⊥) ∧
     (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥) ∧
     (∀ x #k. (BuildA( x ) @ #k) ⇒ ⊥)))) ∧
  (∀ s #j.
    (Purchase( s, cu, c ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     ((∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ ¬(#i = #i2)) ∧
      (∀ s1 #j2. (Purchase( s1, cu, c ) @ #j2) ⇒ #j = #j2))))"
*/
simplify
solve( ((∀ h x #k. (Chatty( h, x ) @ #k) ⇒ ⊥) ∧
        (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥))  ∥
       ((∀ x #k. (PrintA( x ) @ #k) ⇒ ⊥) ∧
        (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥) ∧
        (∀ x #k. (BuildA( x ) @ #k) ⇒ ⊥)) )
  case case_1
  solve( Info( bar, c ) ▶₁ #i )
    case 3Output
    solve( Pos( $Cu.1, $V, object(~cont_i) ) ▶₀ #vr.2 )
      case ChanOut_OO_case_1
      solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.5 )
        case ChanOut_OO_case_1
        solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
          case ChanIn_O
          solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.7 )
            case ChanOut_OP_case_1
            solve( Pos( $V.1, $Cu, receipt(~barcode_i) ) ▶₀ #vr.10 )
              case ChanOut_OP_case_1
              solve( (#i < #i2)  ∥ (#i2 < #i) )
                case case_1
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO_case_1
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO_case_1
                      by contradiction /* cyclic */
                    next
                      case ChanOut_OO_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case ChanOut_OO_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case case_2
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO_case_1
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO_case_1
                      by contradiction /* cyclic */
                    next
                      case ChanOut_OO_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case ChanOut_OO_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case ChanOut_OP_case_2
              by contradiction /* from formulas */
            qed
          next
            case ChanOut_OP_case_2
            by contradiction /* from formulas */
          qed
        qed
      next
        case ChanOut_OO_case_2
        by contradiction /* from formulas */
      qed
    next
      case ChanOut_OO_case_2
      by contradiction /* from formulas */
    qed
  qed
next
  case case_2
  solve( Info( bar, c ) ▶₁ #i )
    case 3Output
    solve( Pos( $Cu.1, $V, object(~cont_i) ) ▶₀ #vr.2 )
      case ChanOut_OO_case_1
      solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.5 )
        case ChanOut_OO_case_1
        solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
          case ChanIn_O
          solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.7 )
            case ChanOut_OP_case_1
            solve( Pos( $V.1, $Cu, receipt(~barcode_i) ) ▶₀ #vr.10 )
              case ChanOut_OP_case_1
              solve( (#i < #i2)  ∥ (#i2 < #i) )
                case case_1
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO_case_1
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO_case_1
                      by contradiction /* cyclic */
                    next
                      case ChanOut_OO_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case ChanOut_OO_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case case_2
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO_case_1
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO_case_1
                      by contradiction /* cyclic */
                    next
                      case ChanOut_OO_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case ChanOut_OO_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case ChanOut_OP_case_2
              by contradiction /* from formulas */
            qed
          next
            case ChanOut_OP_case_2
            by contradiction /* from formulas */
          qed
        qed
      next
        case ChanOut_OO_case_2
        by contradiction /* from formulas */
      qed
    next
      case ChanOut_OO_case_2
      by contradiction /* from formulas */
    qed
  qed
qed

lemma cashforpurchaseCustNettoAttack:
  all-traces
  "∀ ca cu c bar #i.
    (Cash( ca, cu, c, bar ) @ #i) ⇒
    (∃ s #j.
      ((Purchase( s, cu, c ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ s1 #j2. (Purchase( s1, cu, c ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  ∀ s #j.
   (Purchase( s, cu, c ) @ #j)
  ⇒
   ((¬(#j < #i)) ∨
    ((∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ ¬(#i = #i2)) ∧
     (∀ s1 #j2. (Purchase( s1, cu, c ) @ #j2) ⇒ #j = #j2)))"
*/
simplify
solve( Info( bar, c ) ▶₁ #i )
  case 3Output
  solve( Pos( $Cu.1, $V, object(~cont_i) ) ▶₀ #vr.2 )
    case ChanOut_OO_case_1
    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.5 )
      case ChanOut_OO_case_1
      solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
        case ChanIn_O
        solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.7 )
          case ChanOut_OP_case_2
          solve( (∃ #j. (Type( $Cu, 'customer' ) @ #j) ∧ #j < #vr.9)  ∥
                 (∃ #j. (Type( $Cu, 'cashier' ) @ #j) ∧ #j < #vr.9) )
            case case_1
            solve( (∃ #j. (Type( $Cu, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                   (∃ #j. (Type( $Cu, 'cashier' ) @ #j) ∧ #j < #vr.10) )
              case case_1
              solve( (∃ #j. (Type( $Cu, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                     (∃ #j. (Type( $Cu, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                case case_1
                solve( (∃ #j. (Type( $Cu, 'customer' ) @ #j) ∧ #j < #vr.12)  ∥
                       (∃ #j. (Type( $Cu, 'cashier' ) @ #j) ∧ #j < #vr.12) )
                  case case_1
                  solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.13)  ∥
                         (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.13) )
                    case case_1
                    solve( (∃ #j. (Type( $Cu, 'customer' ) @ #j) ∧ #j < #vr.13)  ∥
                           (∃ #j. (Type( $Cu, 'cashier' ) @ #j) ∧ #j < #vr.13) )
                      case case_1
                      solve( Pos( $A.1, $A, receipt(~barcode_i) ) ▶₀ #vr.13 )
                        case ChanOut_OP
                        solve( Type( $Cu, 'customer' ) @ #j )
                          case 1Purchase
                          solve( Type( $Cu, 'customer' ) @ #j.1 )
                            case 1Purchase
                            solve( Type( $Cu, 'customer' ) @ #j.2 )
                              case 1Purchase
                              solve( Type( $Cu, 'customer' ) @ #j.3 )
                                case 1Purchase
                                solve( Type( $A, 'customer' ) @ #j.4 )
                                  case 1Purchase
                                  solve( Type( $Cu, 'customer' ) @ #j.5 )
                                    case 1Purchase
                                    SOLVED // trace found
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma cashforpurchaseNettoAttack:
  all-traces
  "∀ ca cu c bar #i.
    (Cash( ca, cu, c, bar ) @ #i) ⇒
    (∃ s cu1 #j.
      ((Purchase( s, cu1, c ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ ca1 cu2 bar2 #i2.
           (Cash( ca1, cu2, c, bar2 ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ s1 cu3 #j2. (Purchase( s1, cu3, c ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  ∀ s cu1 #j.
   (Purchase( s, cu1, c ) @ #j)
  ⇒
   ((¬(#j < #i)) ∨
    ((∃ ca1 cu2 bar2 #i2. (Cash( ca1, cu2, c, bar2 ) @ #i2) ∧ ¬(#i = #i2)) ∧
     (∀ s1 cu3 #j2. (Purchase( s1, cu3, c ) @ #j2) ⇒ #j = #j2)))"
*/
simplify
solve( Info( bar, c ) ▶₁ #i )
  case 3Output
  solve( (#i < #i2)  ∥ (#i2 < #i) )
    case case_1
    solve( Pos( $Cu.2, $V, object(~cont_i) ) ▶₀ #vr.2 )
      case ChanOut_OO_case_1
      solve( Pos( $S.1, $Cu.2, object(~cont_i) ) ▶₀ #vr.5 )
        case ChanOut_OO_case_1
        solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
          case 3Output
          solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.8 )
            case ChanOut_OO_case_1
            solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.11 )
              case ChanOut_OO_case_1
              by contradiction /* cyclic */
            next
              case ChanOut_OO_case_2
              solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.13)  ∥
                     (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.13) )
                case case_1
                solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                       (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                  case case_1
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.15)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.15) )
                    case case_1
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.16)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.16) )
                      case case_1
                      solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                             (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                        case case_1
                        solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                               (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                          case case_1
                          by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                        qed
                      next
                        case case_2
                        solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                               (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                          case case_1
                          by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                       (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                  case case_2
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.15)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.15) )
                    case case_2
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.16)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.16) )
                      case case_2
                      solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                             (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                        case case_1
                        solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                               (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                          case case_2
                          by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                        qed
                      next
                        case case_2
                        solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                               (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                          case case_2
                          by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case ChanOut_OO_case_2
            solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                   (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.10) )
              case case_1
              solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                     (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                case case_1
                solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.12)  ∥
                       (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.12) )
                  case case_1
                  solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.13)  ∥
                         (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.13) )
                    case case_1
                    solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                           (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                      case case_1
                      solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                             (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                        case case_1
                        by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.14 )
                      qed
                    next
                      case case_2
                      solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                             (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                        case case_1
                        by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.14 )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case ChanOut_OO_case_2
        solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.7)  ∥
               (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.7) )
          case case_1
          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.8) )
            case case_1
            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.9)  ∥
                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.9) )
              case case_1
              solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                     (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.10) )
                case case_1
                solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                       (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                  case case_1
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                    case case_1
                    solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                      case ChanOut_OO
                      solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                        case 3Output
                        solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.14 )
                          case ChanOut_OO
                          solve( Pos( $S.2, $Cu.3, object(~cont_i) ) ▶₀ #vr.17 )
                            case ChanOut_OO
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                    case case_1
                    by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                  qed
                qed
              qed
            qed
          qed
        next
          case case_2
          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.8) )
            case case_2
            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.9)  ∥
                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.9) )
              case case_2
              solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                     (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.10) )
                case case_2
                solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                       (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                  case case_1
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                    case case_2
                    solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                      case ChanOut_OO
                      solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                        case 3Output
                        solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.14 )
                          case ChanOut_OO
                          solve( Pos( $S.2, $Cu.3, object(~cont_i) ) ▶₀ #vr.17 )
                            case ChanOut_OO
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                    case case_2
                    by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case ChanOut_OO_case_2
      solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.4)  ∥
             (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.4) )
        case case_1
        solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.5)  ∥
               (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.5) )
          case case_1
          solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.6)  ∥
                 (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.6) )
            case case_1
            solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.7)  ∥
                   (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.7) )
              case case_1
              solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                     (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.8) )
                case case_1
                solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                       (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.8) )
                  case case_1
                  solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.8 )
                    case ChanOut_OO
                    solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                      case 3Output
                      solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.11 )
                        case ChanOut_OO_case_1
                        by solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.14 )
                      next
                        case ChanOut_OO_case_2
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                       (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.8) )
                  case case_1
                  by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.8 )
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case case_2
    solve( Pos( $Cu.2, $V, object(~cont_i) ) ▶₀ #vr.2 )
      case ChanOut_OO_case_1
      solve( Pos( $S.1, $Cu.2, object(~cont_i) ) ▶₀ #vr.5 )
        case ChanOut_OO_case_1
        solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
          case 3Output
          solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.8 )
            case ChanOut_OO_case_1
            solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.11 )
              case ChanOut_OO_case_1
              by contradiction /* cyclic */
            next
              case ChanOut_OO_case_2
              solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.13)  ∥
                     (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.13) )
                case case_1
                solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                       (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                  case case_1
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.15)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.15) )
                    case case_1
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.16)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.16) )
                      case case_1
                      solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                             (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                        case case_1
                        solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                               (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                          case case_1
                          by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                        qed
                      next
                        case case_2
                        solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                               (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                          case case_1
                          by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                       (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                  case case_2
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.15)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.15) )
                    case case_2
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.16)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.16) )
                      case case_2
                      solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                             (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                        case case_1
                        solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                               (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                          case case_2
                          by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                        qed
                      next
                        case case_2
                        solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                               (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                          case case_2
                          by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case ChanOut_OO_case_2
            solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                   (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.10) )
              case case_1
              solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                     (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                case case_1
                solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.12)  ∥
                       (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.12) )
                  case case_1
                  solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.13)  ∥
                         (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.13) )
                    case case_1
                    solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                           (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                      case case_1
                      solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                             (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                        case case_1
                        by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.14 )
                      qed
                    next
                      case case_2
                      solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                             (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                        case case_1
                        by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.14 )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case ChanOut_OO_case_2
        solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.7)  ∥
               (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.7) )
          case case_1
          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.8) )
            case case_1
            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.9)  ∥
                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.9) )
              case case_1
              solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                     (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.10) )
                case case_1
                solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                       (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                  case case_1
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                    case case_1
                    solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                      case ChanOut_OO
                      solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                        case 3Output
                        solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.14 )
                          case ChanOut_OO
                          solve( Pos( $S.2, $Cu.3, object(~cont_i) ) ▶₀ #vr.17 )
                            case ChanOut_OO
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                    case case_1
                    by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                  qed
                qed
              qed
            qed
          qed
        next
          case case_2
          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.8) )
            case case_2
            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.9)  ∥
                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.9) )
              case case_2
              solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                     (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.10) )
                case case_2
                solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                       (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                  case case_1
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                    case case_2
                    solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                      case ChanOut_OO
                      solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                        case 3Output
                        solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.14 )
                          case ChanOut_OO
                          solve( Pos( $S.2, $Cu.3, object(~cont_i) ) ▶₀ #vr.17 )
                            case ChanOut_OO
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                    case case_2
                    by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case ChanOut_OO_case_2
      solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.4)  ∥
             (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.4) )
        case case_1
        solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.5)  ∥
               (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.5) )
          case case_1
          solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.6)  ∥
                 (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.6) )
            case case_1
            solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.7)  ∥
                   (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.7) )
              case case_1
              solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                     (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.8) )
                case case_1
                solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                       (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.8) )
                  case case_1
                  solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.8 )
                    case ChanOut_OO
                    solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                      case 3Output
                      solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.11 )
                        case ChanOut_OO_case_1
                        by solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.14 )
                      next
                        case ChanOut_OO_case_2
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                       (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.8) )
                  case case_1
                  by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.8 )
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma cashforcontainerCustNettoAttack:
  all-traces
  "∀ ca cu c bar #i.
    (Cash( ca, cu, c, bar ) @ #i) ⇒
    (∃ #j v.
      ((GetCont( v, cu, c ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ v1 #j2. (GetCont( v1, cu, c ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  ∀ #j v.
   (GetCont( v, cu, c ) @ #j)
  ⇒
   ((¬(#j < #i)) ∨
    ((∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ ¬(#i = #i2)) ∧
     (∀ v1 #j2. (GetCont( v1, cu, c ) @ #j2) ⇒ #j = #j2)))"
*/
simplify
solve( Info( bar, c ) ▶₁ #i )
  case 3Output
  solve( Pos( $Cu.1, $V, object(~cont_i) ) ▶₀ #vr.2 )
    case ChanOut_OO_case_1
    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.5 )
      case ChanOut_OO_case_1
      solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
        case ChanIn_O
        solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.7 )
          case ChanOut_OP_case_2
          solve( (∃ #j. (Type( $Cu, 'customer' ) @ #j) ∧ #j < #vr.9)  ∥
                 (∃ #j. (Type( $Cu, 'cashier' ) @ #j) ∧ #j < #vr.9) )
            case case_1
            solve( (∃ #j. (Type( $Cu, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                   (∃ #j. (Type( $Cu, 'cashier' ) @ #j) ∧ #j < #vr.10) )
              case case_1
              solve( (∃ #j. (Type( $Cu, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                     (∃ #j. (Type( $Cu, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                case case_1
                solve( (∃ #j. (Type( $Cu, 'customer' ) @ #j) ∧ #j < #vr.12)  ∥
                       (∃ #j. (Type( $Cu, 'cashier' ) @ #j) ∧ #j < #vr.12) )
                  case case_1
                  solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.13)  ∥
                         (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.13) )
                    case case_1
                    solve( (∃ #j. (Type( $Cu, 'customer' ) @ #j) ∧ #j < #vr.13)  ∥
                           (∃ #j. (Type( $Cu, 'cashier' ) @ #j) ∧ #j < #vr.13) )
                      case case_1
                      solve( Pos( $A.1, $A, receipt(~barcode_i) ) ▶₀ #vr.13 )
                        case ChanOut_OP
                        solve( Type( $Cu, 'customer' ) @ #j )
                          case 1Purchase
                          solve( Type( $Cu, 'customer' ) @ #j.1 )
                            case 1Purchase
                            solve( Type( $Cu, 'customer' ) @ #j.2 )
                              case 1Purchase
                              solve( Type( $Cu, 'customer' ) @ #j.3 )
                                case 1Purchase
                                solve( Type( $A, 'customer' ) @ #j.4 )
                                  case 1Purchase
                                  solve( Type( $Cu, 'customer' ) @ #j.5 )
                                    case 1Purchase
                                    SOLVED // trace found
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

/*
WARNING: the following wellformedness checks failed!

Lemma actions:
  lemma `sendcashNoAtt' references action 
    (ProtoFact Linear "BuildA" 1,1,Linear)
  but no rule has such an action.
  
  lemma `sendcashNoAtt' references action 
    (ProtoFact Linear "PrintA" 1,1,Linear)
  but no rule has such an action.
  
  lemma `cashforcontainerCustNetto' references action 
    (ProtoFact Linear "PrintA" 1,1,Linear)
  but no rule has such an action.
  
  lemma `cashforpurchaseNetto' references action 
    (ProtoFact Linear "BuildA" 1,1,Linear)
  but no rule has such an action.
  
  lemma `cashforpurchaseCustNetto' references action 
    (ProtoFact Linear "BuildA" 1,1,Linear)
  but no rule has such an action.
  
  lemma `cashforpurchaseCustNetto' references action 
    (ProtoFact Linear "PrintA" 1,1,Linear)
  but no rule has such an action.
*/

end

==============================================================================
summary of summaries:

analyzed: /Users/finn/Documents/Research_Project_Tamarin/TamarinAutoRunner/exampleFiles/Netto.spthy

  WARNING: 6 wellformedness check failed!
           The analysis results might be wrong!
  
  chatty (all-traces): verified (40 steps)
  readA (all-traces): verified (27 steps)
  lookA (all-traces): verified (30 steps)
  sendcashNoAtt (exists-trace): verified (8 steps)
  cashforvoucherNetto (all-traces): verified (4 steps)
  cashforcontainerNetto (all-traces): verified (4 steps)
  cashforcontainerCustNetto (all-traces): verified (48 steps)
  cashforpurchaseNetto (all-traces): verified (166 steps)
  cashforpurchaseCustNetto (all-traces): verified (48 steps)
  cashforpurchaseCustNettoAttack (all-traces): falsified - found trace (20 steps)
  cashforpurchaseNettoAttack (all-traces): verified (143 steps)
  cashforcontainerCustNettoAttack (all-traces): falsified - found trace (20 steps)

==============================================================================
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.

theory Netto begin

// Function signature and definition of the equational theory E

functions: fst/1, get/1, look/1, object/1, pair/2, receipt/1, snd/1
equations:
    fst(<x.1, x.2>) = x.1,
    get(object(a)) = a,
    look(receipt(a)) = a,
    snd(<x.1, x.2>) = x.2



rule (modulo E) 1Purchase:
   [ Fr( ~cont_i ) ]
  --[ Type( $Cu, 'customer' ), Purchase( $S, $Cu, ~cont_i ) ]->
   [ !Container( object(~cont_i) ), Out_O( $S, $Cu, object(~cont_i) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) 3Output:
   [
   !Container( object(cont_i) ), Fr( ~barcode_i ),
   In_O( $Cu, $V, object(cont_i) )
   ]
  --[
  SendBarcode( ~barcode_i ), GetCont( $V, $Cu, cont_i ),
  Type( $Cu, 'customer' ), Type( $V, 'vending' )
  ]->
   [ Out_O( $V, $Cu, receipt(~barcode_i) ), Info( ~barcode_i, cont_i ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) 5Cash:
   [ In_O( $Cu, $Ca, receipt(barcode_i) ), Info( barcode_i, cont_i ) ]
  --[
  Cash( $Ca, $Cu, cont_i, barcode_i ), Type( $Cu, 'customer' ),
  Type( $Ca, 'cashier' )
  ]->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) 2Return:
   [ In_O( $S, $Cu, object(cont_i) ) ]
  --[ Type( $Cu, 'customer' ), Type( $V, 'vending' ) ]->
   [ Out_O( $Cu, $V, object(cont_i) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) 4Hand:
   [ In_O( $V, $Cu, receipt(barcode_i) ) ]
  --[
  Type( $Ca, 'cashier' ), Type( $Cu, 'customer' ), Type( $V, 'vending' )
  ]->
   [ Out_O( $Cu, $Ca, receipt(barcode_i) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ChanOut_I:
   [ Out_I( $A, $B, x ) ]
  --[ ChanOut_I( $A, $B, x ), Neq( $A, $B ) ]->
   [ !Sec_I( $A, $B, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ChanIn_I:
   [ !Sec_I( $A, $B, x ) ]
  --[ ChanIn_I( $A, $B, x ), Neq( $A, $B ) ]->
   [ In_I( $A, $B, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ChanIn_O:
   [ Pos( $A, $B, x ) ]
  --[ ChanIn_O( $A, $B, x ), Neq( $A, $B ) ]->
   [ In_O( $A, $B, x ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) ChanOut_OO:
   [ Out_O( $A, $B, object(y) ) ]
  --[ ChanIn_O( $A, $B, object(y) ), Neq( $A, $B ) ]->
   [ Pos( $A, $B, object(y) ), Look( $B, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ChanOut_OP:
   [ Out_O( $A, $B, receipt(y) ) ]
  --[
  ChanIn_O( $A, $B, receipt(y) ), Neq( $A, $B ), NoType( $B, 'vending' )
  ]->
   [ Pos( $A, $B, receipt(y) ), Read( $B, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Receive_HK:
   [ GotInfo( $H, x ) ] --[ Once( $H, x ) ]-> [ !HK( $H, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Look:
   [ Look( $A, x ) ] --[ Human( $A ) ]-> [ GotInfo( $A, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Read:
   [ Read( $A, x ) ] --[ Human( $A ) ]-> [ GotInfo( $A, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Print[color=#ff0000]:
   [ In( x ) ]
  --[ PrintA( x ), Human( $Att ) ]->
   [ PosDA( $Att, receipt(x) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Build[color=#ff0000]:
   [ In( x ) ]
  --[ BuildA( x ), Human( $Att ) ]->
   [ PosDA( $Att, object(x) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) GiveA:
   [ PosUA( $Att, x ) ] --[ Human( $Att ) ]-> [ Out_OA( $Att, $B, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) GetA:
   [ In_OA( $A, $Att, x ) ] --[ Human( $Att ) ]-> [ PosDA( $Att, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) LookA:
   [ PosDA( $Att, object(y) ) ]
  --[ LookA( y ), Human( $Att ) ]->
   [ Out( y ), PosUA( $Att, object(y) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ReadA:
   [ PosDA( $Att, receipt(y) ) ]
  --[ ReadA( y ), Human( $Att ) ]->
   [ Out( y ), PosUA( $Att, receipt(y) ) ]

  /* has exactly the trivial AC variant */

restriction inequality:
  "∀ x #i. (Neq( x, x ) @ #i) ⇒ (⊥)"
  // safety formula

restriction type_distinct:
  "∀ x t1 t2 #i #j.
    ((Type( x, t1 ) @ #i) ∧ (Type( x, t2 ) @ #j)) ⇒ (t1 = t2)"
  // safety formula

restriction once:
  "∀ x y #i #j. ((Once( x, y ) @ #i) ∧ (Once( x, y ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction human:
  "∀ x #i.
    (Human( x ) @ #i) ⇒
    ((∃ #j. (Type( x, 'customer' ) @ #j) ∧ (#j < #i)) ∨
     (∃ #j. (Type( x, 'cashier' ) @ #j) ∧ (#j < #i)))"

restriction notype:
  "∀ x y #i. (NoType( x, y ) @ #i) ⇒ (¬(∃ #j. Type( x, y ) @ #j))"
  // safety formula

lemma chatty [sources]:
  all-traces
  "∀ h x #i.
    (Chatty( h, x ) @ #i) ⇒
    (((∃ #j. (!KU( x ) @ #j) ∧ (#j < #i)) ∨
      (∃ s c #j. (Purchase( s, c, x ) @ #j) ∧ (#j < #i))) ∨
     (∃ #j. (SendBarcode( x ) @ #j) ∧ (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ h x #i.
  (Chatty( h, x ) @ #i)
 ∧
  (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ s c #j. (Purchase( s, c, x ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #j. (SendBarcode( x ) @ #j) ⇒ ¬(#j < #i))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∀ h x #i.
           (Chatty( h, x ) @ #i)
          ⇒
           ((last(#i)) ∨
            (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) ∨
            (∃ s c #j. (Purchase( s, c, x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) ∨
            (∃ #j. (SendBarcode( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))))  ∥
         (∃ x #i.
           (Human( x ) @ #i)
          ∧
           (¬(last(#i))) ∧
           (∀ #j.
             (Type( x, 'customer' ) @ #j) ⇒ ((last(#j)) ∨ (#j = #i) ∨ (#i < #j))) ∧
           (∀ #j.
             (Type( x, 'cashier' ) @ #j) ⇒ ((last(#j)) ∨ (#j = #i) ∨ (#i < #j)))) )
    case case_1
    solve( (last(#i))  ∥
           (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ s c #j. (Purchase( s, c, x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ #j. (SendBarcode( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) )
      case case_1
      by solve( Chatty( h, x ) @ #i )
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    next
      case case_4
      by contradiction /* from formulas */
    qed
  next
    case case_2
    solve( (∃ #j. (Type( x, 'customer' ) @ #j) ∧ #j < #i)  ∥
           (∃ #j. (Type( x, 'cashier' ) @ #j) ∧ #j < #i) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    qed
  qed
qed

lemma readA [sources]:
  all-traces
  "∀ x #i.
    (ReadA( x ) @ #i) ⇒
    ((∃ #j. (!KU( x ) @ #j) ∧ (#j < #i)) ∨
     (∃ #j. (SendBarcode( x ) @ #j) ∧ (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i.
  (ReadA( x ) @ #i)
 ∧
  (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #j. (SendBarcode( x ) @ #j) ⇒ ¬(#j < #i))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∀ x #i.
           (ReadA( x ) @ #i)
          ⇒
           ((last(#i)) ∨
            (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) ∨
            (∃ #j. (SendBarcode( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))))  ∥
         (∃ x #i.
           (Human( x ) @ #i)
          ∧
           (¬(last(#i))) ∧
           (∀ #j.
             (Type( x, 'customer' ) @ #j) ⇒ ((last(#j)) ∨ (#j = #i) ∨ (#i < #j))) ∧
           (∀ #j.
             (Type( x, 'cashier' ) @ #j) ⇒ ((last(#j)) ∨ (#j = #i) ∨ (#i < #j)))) )
    case case_1
    solve( (last(#i))  ∥
           (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ #j. (SendBarcode( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) )
      case case_1
      solve( (∃ #j. (Type( $Att, 'customer' ) @ #j) ∧ #j < #i)  ∥
             (∃ #j. (Type( $Att, 'cashier' ) @ #j) ∧ #j < #i) )
        case case_1
        solve( PosDA( $Att, receipt(x) ) ▶₀ #i )
          case Print
          by contradiction /* from formulas */
        qed
      next
        case case_2
        solve( PosDA( $Att, receipt(x) ) ▶₀ #i )
          case Print
          by contradiction /* from formulas */
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    qed
  next
    case case_2
    solve( (∃ #j. (Type( $Att, 'customer' ) @ #j) ∧ #j < #i)  ∥
           (∃ #j. (Type( $Att, 'cashier' ) @ #j) ∧ #j < #i) )
      case case_1
      solve( (∃ #j. (Type( x.1, 'customer' ) @ #j) ∧ #j < #i.1)  ∥
             (∃ #j. (Type( x.1, 'cashier' ) @ #j) ∧ #j < #i.1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      qed
    next
      case case_2
      solve( (∃ #j. (Type( x.1, 'customer' ) @ #j) ∧ #j < #i.1)  ∥
             (∃ #j. (Type( x.1, 'cashier' ) @ #j) ∧ #j < #i.1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma lookA [sources]:
  all-traces
  "∀ x #i.
    (LookA( x ) @ #i) ⇒
    (((∃ #j. (!KU( x ) @ #j) ∧ (#j < #i)) ∨
      (∃ h c #j. (Purchase( h, c, x ) @ #j) ∧ (#j < #i))) ∨
     (∃ #j. (SendBarcode( x ) @ #j) ∧ (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i.
  (LookA( x ) @ #i)
 ∧
  (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ h c #j. (Purchase( h, c, x ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #j. (SendBarcode( x ) @ #j) ⇒ ¬(#j < #i))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∀ x #i.
           (LookA( x ) @ #i)
          ⇒
           ((last(#i)) ∨
            (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) ∨
            (∃ h c #j. (Purchase( h, c, x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) ∨
            (∃ #j. (SendBarcode( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))))  ∥
         (∃ x #i.
           (Human( x ) @ #i)
          ∧
           (¬(last(#i))) ∧
           (∀ #j.
             (Type( x, 'customer' ) @ #j) ⇒ ((last(#j)) ∨ (#j = #i) ∨ (#i < #j))) ∧
           (∀ #j.
             (Type( x, 'cashier' ) @ #j) ⇒ ((last(#j)) ∨ (#j = #i) ∨ (#i < #j)))) )
    case case_1
    solve( (last(#i))  ∥
           (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ h c #j. (Purchase( h, c, x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ #j. (SendBarcode( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) )
      case case_1
      solve( (∃ #j. (Type( $Att, 'customer' ) @ #j) ∧ #j < #i)  ∥
             (∃ #j. (Type( $Att, 'cashier' ) @ #j) ∧ #j < #i) )
        case case_1
        solve( PosDA( $Att, object(x) ) ▶₀ #i )
          case Build
          by contradiction /* from formulas */
        qed
      next
        case case_2
        solve( PosDA( $Att, object(x) ) ▶₀ #i )
          case Build
          by contradiction /* from formulas */
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    next
      case case_4
      by contradiction /* from formulas */
    qed
  next
    case case_2
    solve( (∃ #j. (Type( $Att, 'customer' ) @ #j) ∧ #j < #i)  ∥
           (∃ #j. (Type( $Att, 'cashier' ) @ #j) ∧ #j < #i) )
      case case_1
      solve( (∃ #j. (Type( x.1, 'customer' ) @ #j) ∧ #j < #i.1)  ∥
             (∃ #j. (Type( x.1, 'cashier' ) @ #j) ∧ #j < #i.1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      qed
    next
      case case_2
      solve( (∃ #j. (Type( x.1, 'customer' ) @ #j) ∧ #j < #i.1)  ∥
             (∃ #j. (Type( x.1, 'cashier' ) @ #j) ∧ #j < #i.1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma sendcashNoAtt:
  exists-trace
  "∃ a b m n #i.
    ((((Cash( a, b, m, n ) @ #i) ∧ (¬(∃ x #k. PrintA( x ) @ #k))) ∧
      (¬(∃ x #k. BuildA( x ) @ #k))) ∧
     (¬(∃ h x #k. Chatty( h, x ) @ #k))) ∧
    (¬(∃ h x #k. Cocky( h, x ) @ #k))"
/*
guarded formula characterizing all satisfying traces:
"∃ a b m n #i.
  (Cash( a, b, m, n ) @ #i)
 ∧
  (∀ x #k. (PrintA( x ) @ #k) ⇒ ⊥) ∧
  (∀ x #k. (BuildA( x ) @ #k) ⇒ ⊥) ∧
  (∀ h x #k. (Chatty( h, x ) @ #k) ⇒ ⊥) ∧
  (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥)"
*/
simplify
solve( Info( n, m ) ▶₁ #i )
  case 3Output
  solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
    case ChanIn_O
    solve( Pos( $Cu.1, $V, object(~cont_i) ) ▶₀ #vr.2 )
      case ChanOut_OO
      solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.3 )
        case ChanOut_OP
        solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.6 )
          case ChanOut_OO
          solve( Pos( $V.1, $Cu, receipt(~barcode_i) ) ▶₀ #vr.9 )
            case ChanOut_OP
            SOLVED // trace found
          qed
        qed
      qed
    qed
  qed
qed

lemma cashforvoucherNetto:
  all-traces
  "∀ ca cu c bar #i.
    (Cash( ca, cu, c, bar ) @ #i) ⇒
    (∃ #j.
      ((SendBarcode( bar ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ a2 b2 #i2. (Cash( a2, b2, c, bar ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ #j2. (SendBarcode( bar ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  ∀ #j.
   (SendBarcode( bar ) @ #j)
  ⇒
   ((¬(#j < #i)) ∨
    ((∃ a2 b2 #i2. (Cash( a2, b2, c, bar ) @ #i2) ∧ ¬(#i = #i2)) ∧
     (∀ #j2. (SendBarcode( bar ) @ #j2) ⇒ #j = #j2)))"
*/
simplify
solve( Info( bar, c ) ▶₁ #i )
  case 3Output
  solve( Info( ~barcode_i, ~cont_i ) ▶₁ #i2 )
    case 3Output
    by contradiction /* from formulas */
  qed
qed

lemma cashforcontainerNetto:
  all-traces
  "∀ ca cu c bar #i.
    (Cash( ca, cu, c, bar ) @ #i) ⇒
    (∃ v cu1 #j.
      ((GetCont( v, cu1, c ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ ca1 cu2 bar2 #i2.
           (Cash( ca1, cu2, c, bar2 ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ v1 cu3 #j2. (GetCont( v1, cu3, c ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  ∀ v cu1 #j.
   (GetCont( v, cu1, c ) @ #j)
  ⇒
   ((¬(#j < #i)) ∨
    ((∃ ca1 cu2 bar2 #i2. (Cash( ca1, cu2, c, bar2 ) @ #i2) ∧ ¬(#i = #i2)) ∧
     (∀ v1 cu3 #j2. (GetCont( v1, cu3, c ) @ #j2) ⇒ #j = #j2)))"
*/
simplify
solve( Info( bar, c ) ▶₁ #i )
  case 3Output
  solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
    case 3Output
    by contradiction /* from formulas */
  qed
qed

lemma cashforcontainerCustNetto:
  all-traces
  "∀ ca cu c bar #i.
    ((Cash( ca, cu, c, bar ) @ #i) ∧
     (((¬(∃ h x #k. Chatty( h, x ) @ #k)) ∧
       (¬(∃ h x #k. Cocky( h, x ) @ #k))) ∨
      ((¬(∃ x #k. PrintA( x ) @ #k)) ∧ (¬(∃ h x #k. Cocky( h, x ) @ #k))))) ⇒
    (∃ #j v.
      ((GetCont( v, cu, c ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ v1 #j2. (GetCont( v1, cu, c ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  ((((∀ h x #k. (Chatty( h, x ) @ #k) ⇒ ⊥) ∧
     (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥)) ∨
    ((∀ x #k. (PrintA( x ) @ #k) ⇒ ⊥) ∧
     (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥)))) ∧
  (∀ #j v.
    (GetCont( v, cu, c ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     ((∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ ¬(#i = #i2)) ∧
      (∀ v1 #j2. (GetCont( v1, cu, c ) @ #j2) ⇒ #j = #j2))))"
*/
simplify
solve( ((∀ h x #k. (Chatty( h, x ) @ #k) ⇒ ⊥) ∧
        (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥))  ∥
       ((∀ x #k. (PrintA( x ) @ #k) ⇒ ⊥) ∧
        (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥)) )
  case case_1
  solve( Info( bar, c ) ▶₁ #i )
    case 3Output
    solve( Pos( $Cu.1, $V, object(~cont_i) ) ▶₀ #vr.2 )
      case ChanOut_OO
      solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.5 )
        case ChanOut_OO
        solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
          case ChanIn_O
          solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.7 )
            case ChanOut_OP
            solve( Pos( $V.1, $Cu, receipt(~barcode_i) ) ▶₀ #vr.10 )
              case ChanOut_OP
              solve( (#i < #i2)  ∥ (#i2 < #i) )
                case case_1
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              next
                case case_2
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case case_2
  solve( Info( bar, c ) ▶₁ #i )
    case 3Output
    solve( Pos( $Cu.1, $V, object(~cont_i) ) ▶₀ #vr.2 )
      case ChanOut_OO
      solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.5 )
        case ChanOut_OO
        solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
          case ChanIn_O
          solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.7 )
            case ChanOut_OP
            solve( Pos( $V.1, $Cu, receipt(~barcode_i) ) ▶₀ #vr.10 )
              case ChanOut_OP
              solve( (#i < #i2)  ∥ (#i2 < #i) )
                case case_1
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              next
                case case_2
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma cashforpurchaseNetto:
  all-traces
  "∀ ca cu c bar #i.
    ((Cash( ca, cu, c, bar ) @ #i) ∧
     ((¬(∃ x #k. BuildA( x ) @ #k)) ∨
      ((¬(∃ h x #k. Chatty( h, x ) @ #k)) ∧
       (¬(∃ h x #k. Cocky( h, x ) @ #k))))) ⇒
    (∃ cu1 s #j.
      ((Purchase( s, cu1, c ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ ca1 cu2 bar2 #i2.
           (Cash( ca1, cu2, c, bar2 ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ s1 cu3 #j2. (Purchase( s1, cu3, c ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  (((∀ x #k. (BuildA( x ) @ #k) ⇒ ⊥) ∨
    ((∀ h x #k. (Chatty( h, x ) @ #k) ⇒ ⊥) ∧
     (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥)))) ∧
  (∀ cu1 s #j.
    (Purchase( s, cu1, c ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     ((∃ ca1 cu2 bar2 #i2. (Cash( ca1, cu2, c, bar2 ) @ #i2) ∧ ¬(#i = #i2)) ∧
      (∀ s1 cu3 #j2. (Purchase( s1, cu3, c ) @ #j2) ⇒ #j = #j2))))"
*/
simplify
solve( (∀ x #k. (BuildA( x ) @ #k) ⇒ ⊥)  ∥
       ((∀ h x #k. (Chatty( h, x ) @ #k) ⇒ ⊥) ∧
        (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥)) )
  case case_1
  solve( Info( bar, c ) ▶₁ #i )
    case 3Output
    solve( (#i < #i2)  ∥ (#i2 < #i) )
      case case_1
      solve( Pos( $Cu.2, $V, object(~cont_i) ) ▶₀ #vr.2 )
        case ChanOut_OO
        solve( Pos( $S.1, $Cu.2, object(~cont_i) ) ▶₀ #vr.5 )
          case ChanOut_OO
          solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
            case 3Output
            solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.8 )
              case ChanOut_OO
              solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.11 )
                case ChanOut_OO
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    next
      case case_2
      solve( Pos( $Cu.2, $V, object(~cont_i) ) ▶₀ #vr.2 )
        case ChanOut_OO
        solve( Pos( $S.1, $Cu.2, object(~cont_i) ) ▶₀ #vr.5 )
          case ChanOut_OO
          solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
            case 3Output
            solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.8 )
              case ChanOut_OO
              solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.11 )
                case ChanOut_OO
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case case_2
  solve( Info( bar, c ) ▶₁ #i )
    case 3Output
    solve( (#i < #i2)  ∥ (#i2 < #i) )
      case case_1
      solve( Pos( $Cu.2, $V, object(~cont_i) ) ▶₀ #vr.2 )
        case ChanOut_OO
        solve( Pos( $S.1, $Cu.2, object(~cont_i) ) ▶₀ #vr.5 )
          case ChanOut_OO
          solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
            case 3Output
            solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.8 )
              case ChanOut_OO
              solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.11 )
                case ChanOut_OO
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    next
      case case_2
      solve( Pos( $Cu.2, $V, object(~cont_i) ) ▶₀ #vr.2 )
        case ChanOut_OO
        solve( Pos( $S.1, $Cu.2, object(~cont_i) ) ▶₀ #vr.5 )
          case ChanOut_OO
          solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
            case 3Output
            solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.8 )
              case ChanOut_OO
              solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.11 )
                case ChanOut_OO
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma cashforpurchaseCustNetto:
  all-traces
  "∀ ca cu c bar #i.
    ((Cash( ca, cu, c, bar ) @ #i) ∧
     (((¬(∃ h x #k. Chatty( h, x ) @ #k)) ∧
       (¬(∃ h x #k. Cocky( h, x ) @ #k))) ∨
      (((¬(∃ x #k. PrintA( x ) @ #k)) ∧ (¬(∃ h x #k. Cocky( h, x ) @ #k))) ∧
       (¬(∃ x #k. BuildA( x ) @ #k))))) ⇒
    (∃ s #j.
      ((Purchase( s, cu, c ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ s1 #j2. (Purchase( s1, cu, c ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  ((((∀ h x #k. (Chatty( h, x ) @ #k) ⇒ ⊥) ∧
     (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥)) ∨
    ((∀ x #k. (PrintA( x ) @ #k) ⇒ ⊥) ∧
     (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥) ∧
     (∀ x #k. (BuildA( x ) @ #k) ⇒ ⊥)))) ∧
  (∀ s #j.
    (Purchase( s, cu, c ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     ((∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ ¬(#i = #i2)) ∧
      (∀ s1 #j2. (Purchase( s1, cu, c ) @ #j2) ⇒ #j = #j2))))"
*/
simplify
solve( ((∀ h x #k. (Chatty( h, x ) @ #k) ⇒ ⊥) ∧
        (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥))  ∥
       ((∀ x #k. (PrintA( x ) @ #k) ⇒ ⊥) ∧
        (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥) ∧
        (∀ x #k. (BuildA( x ) @ #k) ⇒ ⊥)) )
  case case_1
  solve( Info( bar, c ) ▶₁ #i )
    case 3Output
    solve( Pos( $Cu.1, $V, object(~cont_i) ) ▶₀ #vr.2 )
      case ChanOut_OO
      solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.5 )
        case ChanOut_OO
        solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
          case ChanIn_O
          solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.7 )
            case ChanOut_OP
            solve( Pos( $V.1, $Cu, receipt(~barcode_i) ) ▶₀ #vr.10 )
              case ChanOut_OP
              solve( (#i < #i2)  ∥ (#i2 < #i) )
                case case_1
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              next
                case case_2
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case case_2
  solve( Info( bar, c ) ▶₁ #i )
    case 3Output
    solve( Pos( $Cu.1, $V, object(~cont_i) ) ▶₀ #vr.2 )
      case ChanOut_OO
      solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.5 )
        case ChanOut_OO
        solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
          case ChanIn_O
          solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.7 )
            case ChanOut_OP
            solve( Pos( $V.1, $Cu, receipt(~barcode_i) ) ▶₀ #vr.10 )
              case ChanOut_OP
              solve( (#i < #i2)  ∥ (#i2 < #i) )
                case case_1
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              next
                case case_2
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma cashforpurchaseCustNettoAttack:
  all-traces
  "∀ ca cu c bar #i.
    (Cash( ca, cu, c, bar ) @ #i) ⇒
    (∃ s #j.
      ((Purchase( s, cu, c ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ s1 #j2. (Purchase( s1, cu, c ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  ∀ s #j.
   (Purchase( s, cu, c ) @ #j)
  ⇒
   ((¬(#j < #i)) ∨
    ((∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ ¬(#i = #i2)) ∧
     (∀ s1 #j2. (Purchase( s1, cu, c ) @ #j2) ⇒ #j = #j2)))"
*/
simplify
solve( Info( bar, c ) ▶₁ #i )
  case 3Output
  solve( Pos( $Cu.1, $V, object(~cont_i) ) ▶₀ #vr.2 )
    case ChanOut_OO
    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.5 )
      case ChanOut_OO
      solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
        case ChanIn_O
        solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.7 )
          case ChanOut_OP
          solve( Pos( $V.1, $Cu, receipt(~barcode_i) ) ▶₀ #vr.10 )
            case ChanOut_OP
            solve( (#i < #i2)  ∥ (#i2 < #i) )
              case case_1
              solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                case 3Output
                solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                  case ChanOut_OO
                  solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                    case ChanOut_OO
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            next
              case case_2
              solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                case 3Output
                solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                  case ChanOut_OO
                  solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                    case ChanOut_OO
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma cashforpurchaseNettoAttack:
  all-traces
  "∀ ca cu c bar #i.
    (Cash( ca, cu, c, bar ) @ #i) ⇒
    (∃ s cu1 #j.
      ((Purchase( s, cu1, c ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ ca1 cu2 bar2 #i2.
           (Cash( ca1, cu2, c, bar2 ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ s1 cu3 #j2. (Purchase( s1, cu3, c ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  ∀ s cu1 #j.
   (Purchase( s, cu1, c ) @ #j)
  ⇒
   ((¬(#j < #i)) ∨
    ((∃ ca1 cu2 bar2 #i2. (Cash( ca1, cu2, c, bar2 ) @ #i2) ∧ ¬(#i = #i2)) ∧
     (∀ s1 cu3 #j2. (Purchase( s1, cu3, c ) @ #j2) ⇒ #j = #j2)))"
*/
simplify
solve( Info( bar, c ) ▶₁ #i )
  case 3Output
  solve( (#i < #i2)  ∥ (#i2 < #i) )
    case case_1
    solve( Pos( $Cu.2, $V, object(~cont_i) ) ▶₀ #vr.2 )
      case ChanOut_OO
      solve( Pos( $S.1, $Cu.2, object(~cont_i) ) ▶₀ #vr.5 )
        case ChanOut_OO
        solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
          case 3Output
          solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.8 )
            case ChanOut_OO
            solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.11 )
              case ChanOut_OO
              by contradiction /* cyclic */
            qed
          qed
        qed
      qed
    qed
  next
    case case_2
    solve( Pos( $Cu.2, $V, object(~cont_i) ) ▶₀ #vr.2 )
      case ChanOut_OO
      solve( Pos( $S.1, $Cu.2, object(~cont_i) ) ▶₀ #vr.5 )
        case ChanOut_OO
        solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
          case 3Output
          solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.8 )
            case ChanOut_OO
            solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.11 )
              case ChanOut_OO
              by contradiction /* cyclic */
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma cashforcontainerCustNettoAttack:
  all-traces
  "∀ ca cu c bar #i.
    (Cash( ca, cu, c, bar ) @ #i) ⇒
    (∃ #j v.
      ((GetCont( v, cu, c ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ v1 #j2. (GetCont( v1, cu, c ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  ∀ #j v.
   (GetCont( v, cu, c ) @ #j)
  ⇒
   ((¬(#j < #i)) ∨
    ((∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ ¬(#i = #i2)) ∧
     (∀ v1 #j2. (GetCont( v1, cu, c ) @ #j2) ⇒ #j = #j2)))"
*/
simplify
solve( Info( bar, c ) ▶₁ #i )
  case 3Output
  solve( Pos( $Cu.1, $V, object(~cont_i) ) ▶₀ #vr.2 )
    case ChanOut_OO
    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.5 )
      case ChanOut_OO
      solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
        case ChanIn_O
        solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.7 )
          case ChanOut_OP
          solve( Pos( $V.1, $Cu, receipt(~barcode_i) ) ▶₀ #vr.10 )
            case ChanOut_OP
            solve( (#i < #i2)  ∥ (#i2 < #i) )
              case case_1
              solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                case 3Output
                solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                  case ChanOut_OO
                  solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                    case ChanOut_OO
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            next
              case case_2
              solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                case 3Output
                solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                  case ChanOut_OO
                  solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                    case ChanOut_OO
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

/*
WARNING: the following wellformedness checks failed!

Lemma actions:
  lemma `chatty' references action 
    (ProtoFact Linear "Chatty" 2,2,Linear)
  but no rule has such an action.
  
  lemma `sendcashNoAtt' references action 
    (ProtoFact Linear "Chatty" 2,2,Linear)
  but no rule has such an action.
  
  lemma `sendcashNoAtt' references action 
    (ProtoFact Linear "Cocky" 2,2,Linear)
  but no rule has such an action.
  
  lemma `cashforcontainerCustNetto' references action 
    (ProtoFact Linear "Chatty" 2,2,Linear)
  but no rule has such an action.
  
  lemma `cashforcontainerCustNetto' references action 
    (ProtoFact Linear "Cocky" 2,2,Linear)
  but no rule has such an action.
  
  lemma `cashforpurchaseNetto' references action 
    (ProtoFact Linear "Chatty" 2,2,Linear)
  but no rule has such an action.
  
  lemma `cashforpurchaseNetto' references action 
    (ProtoFact Linear "Cocky" 2,2,Linear)
  but no rule has such an action.
  
  lemma `cashforpurchaseCustNetto' references action 
    (ProtoFact Linear "Chatty" 2,2,Linear)
  but no rule has such an action.
  
  lemma `cashforpurchaseCustNetto' references action 
    (ProtoFact Linear "Cocky" 2,2,Linear)
  but no rule has such an action.
*/

end

==============================================================================
summary of summaries:

analyzed: /Users/finn/Documents/Research_Project_Tamarin/TamarinAutoRunner/exampleFiles/Netto.spthy

  WARNING: 9 wellformedness check failed!
           The analysis results might be wrong!
  
  chatty (all-traces): verified (12 steps)
  readA (all-traces): verified (19 steps)
  lookA (all-traces): verified (20 steps)
  sendcashNoAtt (exists-trace): verified (8 steps)
  cashforvoucherNetto (all-traces): verified (4 steps)
  cashforcontainerNetto (all-traces): verified (4 steps)
  cashforcontainerCustNetto (all-traces): verified (32 steps)
  cashforpurchaseNetto (all-traces): verified (30 steps)
  cashforpurchaseCustNetto (all-traces): verified (32 steps)
  cashforpurchaseCustNettoAttack (all-traces): verified (16 steps)
  cashforpurchaseNettoAttack (all-traces): verified (15 steps)
  cashforcontainerCustNettoAttack (all-traces): verified (16 steps)

==============================================================================
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.

theory Netto begin

// Function signature and definition of the equational theory E

functions: fst/1, get/1, look/1, object/1, pair/2, receipt/1, snd/1
equations:
    fst(<x.1, x.2>) = x.1,
    get(object(a)) = a,
    look(receipt(a)) = a,
    snd(<x.1, x.2>) = x.2



rule (modulo E) 1Purchase:
   [ Fr( ~cont_i ) ]
  --[ Type( $Cu, 'customer' ), Purchase( $S, $Cu, ~cont_i ) ]->
   [ !Container( object(~cont_i) ), Out_O( $S, $Cu, object(~cont_i) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) 3Output:
   [
   !Container( object(cont_i) ), Fr( ~barcode_i ),
   In_O( $Cu, $V, object(cont_i) )
   ]
  --[
  SendBarcode( ~barcode_i ), GetCont( $V, $Cu, cont_i ),
  Type( $Cu, 'customer' ), Type( $V, 'vending' )
  ]->
   [ Out_O( $V, $Cu, receipt(~barcode_i) ), Info( ~barcode_i, cont_i ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) 5Cash:
   [ In_O( $Cu, $Ca, receipt(barcode_i) ), Info( barcode_i, cont_i ) ]
  --[
  Cash( $Ca, $Cu, cont_i, barcode_i ), Type( $Cu, 'customer' ),
  Type( $Ca, 'cashier' )
  ]->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) 2Return:
   [ In_O( $S, $Cu, object(cont_i) ) ]
  --[ Type( $Cu, 'customer' ), Type( $V, 'vending' ) ]->
   [ Out_O( $Cu, $V, object(cont_i) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) 4Hand:
   [ In_O( $V, $Cu, receipt(barcode_i) ) ]
  --[
  Type( $Ca, 'cashier' ), Type( $Cu, 'customer' ), Type( $V, 'vending' )
  ]->
   [ Out_O( $Cu, $Ca, receipt(barcode_i) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ChanOut_I:
   [ Out_I( $A, $B, x ) ]
  --[ ChanOut_I( $A, $B, x ), Neq( $A, $B ) ]->
   [ !Sec_I( $A, $B, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ChanIn_I:
   [ !Sec_I( $A, $B, x ) ]
  --[ ChanIn_I( $A, $B, x ), Neq( $A, $B ) ]->
   [ In_I( $A, $B, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ChanIn_O:
   [ Pos( $A, $B, x ) ]
  --[ ChanIn_O( $A, $B, x ), Neq( $A, $B ) ]->
   [ In_O( $A, $B, x ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) ChanOut_OO:
   [ Out_O( $A, $B, object(y) ) ]
  --[ ChanIn_O( $A, $B, object(y) ), Neq( $A, $B ) ]->
   [ Pos( $A, $B, object(y) ), Look( $B, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ChanOut_OP:
   [ Out_O( $A, $B, receipt(y) ) ]
  --[
  ChanIn_O( $A, $B, receipt(y) ), Neq( $A, $B ), NoType( $B, 'vending' )
  ]->
   [ Pos( $A, $B, receipt(y) ), Read( $B, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Receive_HK:
   [ GotInfo( $H, x ) ] --[ Once( $H, x ) ]-> [ !HK( $H, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Look:
   [ Look( $A, x ) ] --[ Human( $A ) ]-> [ GotInfo( $A, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Read:
   [ Read( $A, x ) ] --[ Human( $A ) ]-> [ GotInfo( $A, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Cocky[color=#ff0000]:
   [ Pos( $A, $B, x ) ]
  --[
  Cocky( $B, x ), Neq( $A, $B ), Neq( $A, $C ), Neq( $B, $C ), Human( $B ),
  Human( $C ), Once( x, x )
  ]->
   [ In_OA( $B, $C, x ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) CockyGet:
   [ Out_OA( $A, $B, x ) ]
  --[ Neq( $A, $B ), Human( $A ) ]->
   [ Out_O( $A, $B, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Build[color=#ff0000]:
   [ In( x ) ]
  --[ BuildA( x ), Human( $Att ) ]->
   [ PosDA( $Att, object(x) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) GiveA:
   [ PosUA( $Att, x ) ] --[ Human( $Att ) ]-> [ Out_OA( $Att, $B, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) GetA:
   [ In_OA( $A, $Att, x ) ] --[ Human( $Att ) ]-> [ PosDA( $Att, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) LookA:
   [ PosDA( $Att, object(y) ) ]
  --[ LookA( y ), Human( $Att ) ]->
   [ Out( y ), PosUA( $Att, object(y) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ReadA:
   [ PosDA( $Att, receipt(y) ) ]
  --[ ReadA( y ), Human( $Att ) ]->
   [ Out( y ), PosUA( $Att, receipt(y) ) ]

  /* has exactly the trivial AC variant */

restriction inequality:
  "∀ x #i. (Neq( x, x ) @ #i) ⇒ (⊥)"
  // safety formula

restriction type_distinct:
  "∀ x t1 t2 #i #j.
    ((Type( x, t1 ) @ #i) ∧ (Type( x, t2 ) @ #j)) ⇒ (t1 = t2)"
  // safety formula

restriction once:
  "∀ x y #i #j. ((Once( x, y ) @ #i) ∧ (Once( x, y ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction human:
  "∀ x #i.
    (Human( x ) @ #i) ⇒
    ((∃ #j. (Type( x, 'customer' ) @ #j) ∧ (#j < #i)) ∨
     (∃ #j. (Type( x, 'cashier' ) @ #j) ∧ (#j < #i)))"

restriction notype:
  "∀ x y #i. (NoType( x, y ) @ #i) ⇒ (¬(∃ #j. Type( x, y ) @ #j))"
  // safety formula

lemma chatty [sources]:
  all-traces
  "∀ h x #i.
    (Chatty( h, x ) @ #i) ⇒
    (((∃ #j. (!KU( x ) @ #j) ∧ (#j < #i)) ∨
      (∃ s c #j. (Purchase( s, c, x ) @ #j) ∧ (#j < #i))) ∨
     (∃ #j. (SendBarcode( x ) @ #j) ∧ (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ h x #i.
  (Chatty( h, x ) @ #i)
 ∧
  (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ s c #j. (Purchase( s, c, x ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #j. (SendBarcode( x ) @ #j) ⇒ ¬(#j < #i))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∀ h x #i.
           (Chatty( h, x ) @ #i)
          ⇒
           ((last(#i)) ∨
            (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) ∨
            (∃ s c #j. (Purchase( s, c, x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) ∨
            (∃ #j. (SendBarcode( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))))  ∥
         (∃ x #i.
           (Human( x ) @ #i)
          ∧
           (¬(last(#i))) ∧
           (∀ #j.
             (Type( x, 'customer' ) @ #j) ⇒ ((last(#j)) ∨ (#j = #i) ∨ (#i < #j))) ∧
           (∀ #j.
             (Type( x, 'cashier' ) @ #j) ⇒ ((last(#j)) ∨ (#j = #i) ∨ (#i < #j)))) )
    case case_1
    solve( (last(#i))  ∥
           (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ s c #j. (Purchase( s, c, x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ #j. (SendBarcode( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) )
      case case_1
      by solve( Chatty( h, x ) @ #i )
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    next
      case case_4
      by contradiction /* from formulas */
    qed
  next
    case case_2
    solve( (∃ #j. (Type( x, 'customer' ) @ #j) ∧ #j < #i)  ∥
           (∃ #j. (Type( x, 'cashier' ) @ #j) ∧ #j < #i) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    qed
  qed
qed

lemma readA [sources]:
  all-traces
  "∀ x #i.
    (ReadA( x ) @ #i) ⇒
    ((∃ #j. (!KU( x ) @ #j) ∧ (#j < #i)) ∨
     (∃ #j. (SendBarcode( x ) @ #j) ∧ (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i.
  (ReadA( x ) @ #i)
 ∧
  (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #j. (SendBarcode( x ) @ #j) ⇒ ¬(#j < #i))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∀ x #i.
           (ReadA( x ) @ #i)
          ⇒
           ((last(#i)) ∨
            (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) ∨
            (∃ #j. (SendBarcode( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))))  ∥
         (∃ x #i.
           (Human( x ) @ #i)
          ∧
           (¬(last(#i))) ∧
           (∀ #j.
             (Type( x, 'customer' ) @ #j) ⇒ ((last(#j)) ∨ (#j = #i) ∨ (#i < #j))) ∧
           (∀ #j.
             (Type( x, 'cashier' ) @ #j) ⇒ ((last(#j)) ∨ (#j = #i) ∨ (#i < #j)))) )
    case case_1
    solve( (last(#i))  ∥
           (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ #j. (SendBarcode( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) )
      case case_1
      solve( (∃ #j. (Type( $Att, 'customer' ) @ #j) ∧ #j < #i)  ∥
             (∃ #j. (Type( $Att, 'cashier' ) @ #j) ∧ #j < #i) )
        case case_1
        solve( PosDA( $Att, receipt(x) ) ▶₀ #i )
          case GetA
          solve( Pos( $A.1, $A, receipt(x) ) ▶₀ #vr.1 )
            case ChanOut_OP_case_1
            by contradiction /* from formulas */
          next
            case ChanOut_OP_case_2
            solve( Pos( $V, $A.1, receipt(x) ) ▶₀ #vr.4 )
              case ChanOut_OP
              by contradiction /* from formulas */
            qed
          next
            case ChanOut_OP_case_3
            by contradiction /* cyclic */
          qed
        qed
      next
        case case_2
        solve( PosDA( $Att, receipt(x) ) ▶₀ #i )
          case GetA
          solve( Pos( $A.1, $A, receipt(x) ) ▶₀ #vr.1 )
            case ChanOut_OP_case_1
            by contradiction /* from formulas */
          next
            case ChanOut_OP_case_2
            solve( Pos( $V, $A.1, receipt(x) ) ▶₀ #vr.4 )
              case ChanOut_OP
              by contradiction /* from formulas */
            qed
          next
            case ChanOut_OP_case_3
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    qed
  next
    case case_2
    solve( (∃ #j. (Type( $Att, 'customer' ) @ #j) ∧ #j < #i)  ∥
           (∃ #j. (Type( $Att, 'cashier' ) @ #j) ∧ #j < #i) )
      case case_1
      solve( (∃ #j. (Type( x.1, 'customer' ) @ #j) ∧ #j < #i.1)  ∥
             (∃ #j. (Type( x.1, 'cashier' ) @ #j) ∧ #j < #i.1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      qed
    next
      case case_2
      solve( (∃ #j. (Type( x.1, 'customer' ) @ #j) ∧ #j < #i.1)  ∥
             (∃ #j. (Type( x.1, 'cashier' ) @ #j) ∧ #j < #i.1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma lookA [sources]:
  all-traces
  "∀ x #i.
    (LookA( x ) @ #i) ⇒
    (((∃ #j. (!KU( x ) @ #j) ∧ (#j < #i)) ∨
      (∃ h c #j. (Purchase( h, c, x ) @ #j) ∧ (#j < #i))) ∨
     (∃ #j. (SendBarcode( x ) @ #j) ∧ (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i.
  (LookA( x ) @ #i)
 ∧
  (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ h c #j. (Purchase( h, c, x ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #j. (SendBarcode( x ) @ #j) ⇒ ¬(#j < #i))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∀ x #i.
           (LookA( x ) @ #i)
          ⇒
           ((last(#i)) ∨
            (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) ∨
            (∃ h c #j. (Purchase( h, c, x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) ∨
            (∃ #j. (SendBarcode( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))))  ∥
         (∃ x #i.
           (Human( x ) @ #i)
          ∧
           (¬(last(#i))) ∧
           (∀ #j.
             (Type( x, 'customer' ) @ #j) ⇒ ((last(#j)) ∨ (#j = #i) ∨ (#i < #j))) ∧
           (∀ #j.
             (Type( x, 'cashier' ) @ #j) ⇒ ((last(#j)) ∨ (#j = #i) ∨ (#i < #j)))) )
    case case_1
    solve( (last(#i))  ∥
           (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ h c #j. (Purchase( h, c, x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ #j. (SendBarcode( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) )
      case case_1
      solve( (∃ #j. (Type( $Att, 'customer' ) @ #j) ∧ #j < #i)  ∥
             (∃ #j. (Type( $Att, 'cashier' ) @ #j) ∧ #j < #i) )
        case case_1
        solve( PosDA( $Att, object(x) ) ▶₀ #i )
          case Build
          by contradiction /* from formulas */
        next
          case GetA
          solve( Pos( $A.1, $A, object(x) ) ▶₀ #vr.1 )
            case ChanOut_OO_case_1
            by contradiction /* from formulas */
          next
            case ChanOut_OO_case_2
            solve( Pos( $S, $A.1, object(x) ) ▶₀ #vr.4 )
              case ChanOut_OO_case_1
              by contradiction /* from formulas */
            next
              case ChanOut_OO_case_2
              by contradiction /* from formulas */
            next
              case ChanOut_OO_case_3
              by contradiction /* cyclic */
            qed
          next
            case ChanOut_OO_case_3
            by contradiction /* from formulas */
          next
            case ChanOut_OO_case_4
            by contradiction /* cyclic */
          qed
        qed
      next
        case case_2
        solve( PosDA( $Att, object(x) ) ▶₀ #i )
          case Build
          by contradiction /* from formulas */
        next
          case GetA
          solve( Pos( $A.1, $A, object(x) ) ▶₀ #vr.1 )
            case ChanOut_OO_case_1
            by contradiction /* from formulas */
          next
            case ChanOut_OO_case_2
            solve( Pos( $S, $A.1, object(x) ) ▶₀ #vr.4 )
              case ChanOut_OO_case_1
              by contradiction /* from formulas */
            next
              case ChanOut_OO_case_2
              by contradiction /* from formulas */
            next
              case ChanOut_OO_case_3
              by contradiction /* cyclic */
            qed
          next
            case ChanOut_OO_case_3
            by contradiction /* from formulas */
          next
            case ChanOut_OO_case_4
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    next
      case case_4
      by contradiction /* from formulas */
    qed
  next
    case case_2
    solve( (∃ #j. (Type( $Att, 'customer' ) @ #j) ∧ #j < #i)  ∥
           (∃ #j. (Type( $Att, 'cashier' ) @ #j) ∧ #j < #i) )
      case case_1
      solve( (∃ #j. (Type( x.1, 'customer' ) @ #j) ∧ #j < #i.1)  ∥
             (∃ #j. (Type( x.1, 'cashier' ) @ #j) ∧ #j < #i.1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      qed
    next
      case case_2
      solve( (∃ #j. (Type( x.1, 'customer' ) @ #j) ∧ #j < #i.1)  ∥
             (∃ #j. (Type( x.1, 'cashier' ) @ #j) ∧ #j < #i.1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma sendcashNoAtt:
  exists-trace
  "∃ a b m n #i.
    ((((Cash( a, b, m, n ) @ #i) ∧ (¬(∃ x #k. PrintA( x ) @ #k))) ∧
      (¬(∃ x #k. BuildA( x ) @ #k))) ∧
     (¬(∃ h x #k. Chatty( h, x ) @ #k))) ∧
    (¬(∃ h x #k. Cocky( h, x ) @ #k))"
/*
guarded formula characterizing all satisfying traces:
"∃ a b m n #i.
  (Cash( a, b, m, n ) @ #i)
 ∧
  (∀ x #k. (PrintA( x ) @ #k) ⇒ ⊥) ∧
  (∀ x #k. (BuildA( x ) @ #k) ⇒ ⊥) ∧
  (∀ h x #k. (Chatty( h, x ) @ #k) ⇒ ⊥) ∧
  (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥)"
*/
simplify
solve( Info( n, m ) ▶₁ #i )
  case 3Output
  solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
    case ChanIn_O
    solve( Pos( $Cu.1, $V, object(~cont_i) ) ▶₀ #vr.2 )
      case ChanOut_OO_case_1
      solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.3 )
        case ChanOut_OP_case_1
        solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.6 )
          case ChanOut_OO_case_1
          solve( Pos( $V.1, $Cu, receipt(~barcode_i) ) ▶₀ #vr.9 )
            case ChanOut_OP_case_1
            SOLVED // trace found
          qed
        qed
      qed
    qed
  qed
qed

lemma cashforvoucherNetto:
  all-traces
  "∀ ca cu c bar #i.
    (Cash( ca, cu, c, bar ) @ #i) ⇒
    (∃ #j.
      ((SendBarcode( bar ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ a2 b2 #i2. (Cash( a2, b2, c, bar ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ #j2. (SendBarcode( bar ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  ∀ #j.
   (SendBarcode( bar ) @ #j)
  ⇒
   ((¬(#j < #i)) ∨
    ((∃ a2 b2 #i2. (Cash( a2, b2, c, bar ) @ #i2) ∧ ¬(#i = #i2)) ∧
     (∀ #j2. (SendBarcode( bar ) @ #j2) ⇒ #j = #j2)))"
*/
simplify
solve( Info( bar, c ) ▶₁ #i )
  case 3Output
  solve( Info( ~barcode_i, ~cont_i ) ▶₁ #i2 )
    case 3Output
    by contradiction /* from formulas */
  qed
qed

lemma cashforcontainerNetto:
  all-traces
  "∀ ca cu c bar #i.
    (Cash( ca, cu, c, bar ) @ #i) ⇒
    (∃ v cu1 #j.
      ((GetCont( v, cu1, c ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ ca1 cu2 bar2 #i2.
           (Cash( ca1, cu2, c, bar2 ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ v1 cu3 #j2. (GetCont( v1, cu3, c ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  ∀ v cu1 #j.
   (GetCont( v, cu1, c ) @ #j)
  ⇒
   ((¬(#j < #i)) ∨
    ((∃ ca1 cu2 bar2 #i2. (Cash( ca1, cu2, c, bar2 ) @ #i2) ∧ ¬(#i = #i2)) ∧
     (∀ v1 cu3 #j2. (GetCont( v1, cu3, c ) @ #j2) ⇒ #j = #j2)))"
*/
simplify
solve( Info( bar, c ) ▶₁ #i )
  case 3Output
  solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
    case 3Output
    by contradiction /* from formulas */
  qed
qed

lemma cashforcontainerCustNetto:
  all-traces
  "∀ ca cu c bar #i.
    ((Cash( ca, cu, c, bar ) @ #i) ∧
     (((¬(∃ h x #k. Chatty( h, x ) @ #k)) ∧
       (¬(∃ h x #k. Cocky( h, x ) @ #k))) ∨
      ((¬(∃ x #k. PrintA( x ) @ #k)) ∧ (¬(∃ h x #k. Cocky( h, x ) @ #k))))) ⇒
    (∃ #j v.
      ((GetCont( v, cu, c ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ v1 #j2. (GetCont( v1, cu, c ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  ((((∀ h x #k. (Chatty( h, x ) @ #k) ⇒ ⊥) ∧
     (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥)) ∨
    ((∀ x #k. (PrintA( x ) @ #k) ⇒ ⊥) ∧
     (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥)))) ∧
  (∀ #j v.
    (GetCont( v, cu, c ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     ((∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ ¬(#i = #i2)) ∧
      (∀ v1 #j2. (GetCont( v1, cu, c ) @ #j2) ⇒ #j = #j2))))"
*/
simplify
solve( ((∀ h x #k. (Chatty( h, x ) @ #k) ⇒ ⊥) ∧
        (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥))  ∥
       ((∀ x #k. (PrintA( x ) @ #k) ⇒ ⊥) ∧
        (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥)) )
  case case_1
  solve( Info( bar, c ) ▶₁ #i )
    case 3Output
    solve( Pos( $Cu.1, $V, object(~cont_i) ) ▶₀ #vr.2 )
      case ChanOut_OO_case_1
      solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.5 )
        case ChanOut_OO_case_1
        solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
          case ChanIn_O
          solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.7 )
            case ChanOut_OP_case_1
            solve( Pos( $V.1, $Cu, receipt(~barcode_i) ) ▶₀ #vr.10 )
              case ChanOut_OP_case_1
              solve( (#i < #i2)  ∥ (#i2 < #i) )
                case case_1
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO_case_1
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO_case_1
                      by contradiction /* cyclic */
                    next
                      case ChanOut_OO_case_2
                      solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.18)  ∥
                             (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.18) )
                        case case_1
                        solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.19)  ∥
                               (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.19) )
                          case case_1
                          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.20)  ∥
                                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.20) )
                            case case_1
                            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.21)  ∥
                                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.21) )
                              case case_1
                              solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                case ChanIn_O
                                solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.22 )
                                  case ChanOut_OP_case_1
                                  solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.25 )
                                    case ChanOut_OP
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case ChanOut_OP_case_2
                                  by contradiction /* from formulas */
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.19)  ∥
                               (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.19) )
                          case case_2
                          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.20)  ∥
                                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.20) )
                            case case_2
                            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.21)  ∥
                                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.21) )
                              case case_2
                              solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                case ChanIn_O
                                solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.22 )
                                  case ChanOut_OP_case_1
                                  solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.25 )
                                    case ChanOut_OP
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case ChanOut_OP_case_2
                                  by contradiction /* from formulas */
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ChanOut_OO_case_3
                      by contradiction /* from formulas */
                    qed
                  next
                    case ChanOut_OO_case_2
                    solve( (∃ #j. (Type( $Cu.1, 'customer' ) @ #j) ∧ #j < #vr.15)  ∥
                           (∃ #j. (Type( $Cu.1, 'cashier' ) @ #j) ∧ #j < #vr.15) )
                      case case_1
                      solve( (∃ #j. (Type( $Cu.1, 'customer' ) @ #j) ∧ #j < #vr.16)  ∥
                             (∃ #j. (Type( $Cu.1, 'cashier' ) @ #j) ∧ #j < #vr.16) )
                        case case_1
                        solve( (∃ #j. (Type( $Cu.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                               (∃ #j. (Type( $Cu.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                          case case_1
                          solve( (∃ #j. (Type( $Cu.1, 'customer' ) @ #j) ∧ #j < #vr.18)  ∥
                                 (∃ #j. (Type( $Cu.1, 'cashier' ) @ #j) ∧ #j < #vr.18) )
                            case case_1
                            solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                              case ChanIn_O
                              solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.19 )
                                case ChanOut_OP_case_1
                                solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.22 )
                                  case ChanOut_OP
                                  by contradiction /* from formulas */
                                qed
                              next
                                case ChanOut_OP_case_2
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case ChanOut_OO_case_3
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case case_2
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO_case_1
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO_case_1
                      by contradiction /* cyclic */
                    next
                      case ChanOut_OO_case_2
                      solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.18)  ∥
                             (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.18) )
                        case case_1
                        solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.19)  ∥
                               (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.19) )
                          case case_1
                          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.20)  ∥
                                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.20) )
                            case case_1
                            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.21)  ∥
                                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.21) )
                              case case_1
                              solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                case ChanIn_O
                                solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.22 )
                                  case ChanOut_OP_case_1
                                  solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.25 )
                                    case ChanOut_OP
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case ChanOut_OP_case_2
                                  by contradiction /* from formulas */
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.19)  ∥
                               (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.19) )
                          case case_2
                          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.20)  ∥
                                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.20) )
                            case case_2
                            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.21)  ∥
                                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.21) )
                              case case_2
                              solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                case ChanIn_O
                                solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.22 )
                                  case ChanOut_OP_case_1
                                  solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.25 )
                                    case ChanOut_OP
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case ChanOut_OP_case_2
                                  by contradiction /* from formulas */
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ChanOut_OO_case_3
                      by contradiction /* from formulas */
                    qed
                  next
                    case ChanOut_OO_case_2
                    solve( (∃ #j. (Type( $Cu.1, 'customer' ) @ #j) ∧ #j < #vr.15)  ∥
                           (∃ #j. (Type( $Cu.1, 'cashier' ) @ #j) ∧ #j < #vr.15) )
                      case case_1
                      solve( (∃ #j. (Type( $Cu.1, 'customer' ) @ #j) ∧ #j < #vr.16)  ∥
                             (∃ #j. (Type( $Cu.1, 'cashier' ) @ #j) ∧ #j < #vr.16) )
                        case case_1
                        solve( (∃ #j. (Type( $Cu.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                               (∃ #j. (Type( $Cu.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                          case case_1
                          solve( (∃ #j. (Type( $Cu.1, 'customer' ) @ #j) ∧ #j < #vr.18)  ∥
                                 (∃ #j. (Type( $Cu.1, 'cashier' ) @ #j) ∧ #j < #vr.18) )
                            case case_1
                            solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                              case ChanIn_O
                              solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.19 )
                                case ChanOut_OP_case_1
                                solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.22 )
                                  case ChanOut_OP
                                  by contradiction /* from formulas */
                                qed
                              next
                                case ChanOut_OP_case_2
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case ChanOut_OO_case_3
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case ChanOut_OP_case_2
              by contradiction /* from formulas */
            qed
          next
            case ChanOut_OP_case_2
            by contradiction /* from formulas */
          qed
        qed
      next
        case ChanOut_OO_case_2
        solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.7)  ∥
               (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.7) )
          case case_1
          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.8) )
            case case_1
            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.9)  ∥
                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.9) )
              case case_1
              solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                     (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.10) )
                case case_1
                solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
                  case ChanIn_O
                  solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.11 )
                    case ChanOut_OP_case_1
                    solve( Pos( $V.1, $Cu, receipt(~barcode_i) ) ▶₀ #vr.14 )
                      case ChanOut_OP_case_1
                      solve( (#i < #i2)  ∥ (#i2 < #i) )
                        case case_1
                        solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                          case 3Output
                          solve( Pos( $Cu.2, $V.1, object(~cont_i) ) ▶₀ #vr.17 )
                            case ChanOut_OO_case_1
                            solve( Pos( $S.2, $Cu.2, object(~cont_i) ) ▶₀ #vr.20 )
                              case ChanOut_OO_case_1
                              solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                case ChanIn_O
                                solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.22 )
                                  case ChanOut_OP_case_1
                                  solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.25 )
                                    case ChanOut_OP
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case ChanOut_OP_case_2
                                  by contradiction /* from formulas */
                                qed
                              qed
                            next
                              case ChanOut_OO_case_2
                              solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.22)  ∥
                                     (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.22) )
                                case case_1
                                solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.23)  ∥
                                       (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.23) )
                                  case case_1
                                  solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.24)  ∥
                                         (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.24) )
                                    case case_1
                                    solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.25)  ∥
                                           (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.25) )
                                      case case_1
                                      solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                        case ChanIn_O
                                        solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.26 )
                                          case ChanOut_OP_case_1
                                          solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.29 )
                                            case ChanOut_OP_case_1
                                            by contradiction /* cyclic */
                                          next
                                            case ChanOut_OP_case_2
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case ChanOut_OP_case_2
                                          by contradiction /* from formulas */
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case case_2
                                solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.23)  ∥
                                       (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.23) )
                                  case case_2
                                  solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.24)  ∥
                                         (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.24) )
                                    case case_2
                                    solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.25)  ∥
                                           (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.25) )
                                      case case_2
                                      solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                        case ChanIn_O
                                        solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.26 )
                                          case ChanOut_OP_case_1
                                          solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.29 )
                                            case ChanOut_OP
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case ChanOut_OP_case_2
                                          by contradiction /* from formulas */
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case ChanOut_OO_case_3
                              by contradiction /* from formulas */
                            qed
                          next
                            case ChanOut_OO_case_2
                            solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.19)  ∥
                                   (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.19) )
                              case case_1
                              solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.20)  ∥
                                     (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.20) )
                                case case_1
                                solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.21)  ∥
                                       (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.21) )
                                  case case_1
                                  solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.22)  ∥
                                         (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.22) )
                                    case case_1
                                    solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                      case ChanIn_O
                                      solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.23 )
                                        case ChanOut_OP_case_1
                                        solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.26 )
                                          case ChanOut_OP
                                          by contradiction /* from formulas */
                                        qed
                                      next
                                        case ChanOut_OP_case_2
                                        by contradiction /* from formulas */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case ChanOut_OO_case_3
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                          case 3Output
                          solve( Pos( $Cu.2, $V.1, object(~cont_i) ) ▶₀ #vr.17 )
                            case ChanOut_OO_case_1
                            solve( Pos( $S.2, $Cu.2, object(~cont_i) ) ▶₀ #vr.20 )
                              case ChanOut_OO_case_1
                              solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                case ChanIn_O
                                solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.22 )
                                  case ChanOut_OP_case_1
                                  solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.25 )
                                    case ChanOut_OP
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case ChanOut_OP_case_2
                                  by contradiction /* from formulas */
                                qed
                              qed
                            next
                              case ChanOut_OO_case_2
                              solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.22)  ∥
                                     (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.22) )
                                case case_1
                                solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.23)  ∥
                                       (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.23) )
                                  case case_1
                                  solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.24)  ∥
                                         (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.24) )
                                    case case_1
                                    solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.25)  ∥
                                           (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.25) )
                                      case case_1
                                      solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                        case ChanIn_O
                                        solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.26 )
                                          case ChanOut_OP_case_1
                                          solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.29 )
                                            case ChanOut_OP_case_1
                                            by contradiction /* cyclic */
                                          next
                                            case ChanOut_OP_case_2
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case ChanOut_OP_case_2
                                          by contradiction /* from formulas */
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case case_2
                                solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.23)  ∥
                                       (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.23) )
                                  case case_2
                                  solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.24)  ∥
                                         (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.24) )
                                    case case_2
                                    solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.25)  ∥
                                           (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.25) )
                                      case case_2
                                      solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                        case ChanIn_O
                                        solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.26 )
                                          case ChanOut_OP_case_1
                                          solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.29 )
                                            case ChanOut_OP
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case ChanOut_OP_case_2
                                          by contradiction /* from formulas */
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case ChanOut_OO_case_3
                              by contradiction /* from formulas */
                            qed
                          next
                            case ChanOut_OO_case_2
                            solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.19)  ∥
                                   (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.19) )
                              case case_1
                              solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.20)  ∥
                                     (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.20) )
                                case case_1
                                solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.21)  ∥
                                       (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.21) )
                                  case case_1
                                  solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.22)  ∥
                                         (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.22) )
                                    case case_1
                                    solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                      case ChanIn_O
                                      solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.23 )
                                        case ChanOut_OP_case_1
                                        solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.26 )
                                          case ChanOut_OP
                                          by contradiction /* from formulas */
                                        qed
                                      next
                                        case ChanOut_OP_case_2
                                        by contradiction /* from formulas */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case ChanOut_OO_case_3
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case ChanOut_OP_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case ChanOut_OP_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        next
          case case_2
          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.8) )
            case case_2
            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.9)  ∥
                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.9) )
              case case_2
              solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                     (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.10) )
                case case_2
                solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
                  case ChanIn_O
                  solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.11 )
                    case ChanOut_OP_case_1
                    solve( Pos( $V.1, $Cu, receipt(~barcode_i) ) ▶₀ #vr.14 )
                      case ChanOut_OP_case_1
                      solve( (#i < #i2)  ∥ (#i2 < #i) )
                        case case_1
                        solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                          case 3Output
                          solve( Pos( $Cu.2, $V.1, object(~cont_i) ) ▶₀ #vr.17 )
                            case ChanOut_OO_case_1
                            solve( Pos( $S.2, $Cu.2, object(~cont_i) ) ▶₀ #vr.20 )
                              case ChanOut_OO_case_1
                              solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                case ChanIn_O
                                solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.22 )
                                  case ChanOut_OP_case_1
                                  solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.25 )
                                    case ChanOut_OP
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case ChanOut_OP_case_2
                                  by contradiction /* from formulas */
                                qed
                              qed
                            next
                              case ChanOut_OO_case_2
                              solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.22)  ∥
                                     (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.22) )
                                case case_1
                                solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.23)  ∥
                                       (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.23) )
                                  case case_1
                                  solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.24)  ∥
                                         (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.24) )
                                    case case_1
                                    solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.25)  ∥
                                           (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.25) )
                                      case case_1
                                      solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                        case ChanIn_O
                                        solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.26 )
                                          case ChanOut_OP_case_1
                                          solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.29 )
                                            case ChanOut_OP
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case ChanOut_OP_case_2
                                          by contradiction /* from formulas */
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case case_2
                                solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.23)  ∥
                                       (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.23) )
                                  case case_2
                                  solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.24)  ∥
                                         (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.24) )
                                    case case_2
                                    solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.25)  ∥
                                           (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.25) )
                                      case case_2
                                      solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                        case ChanIn_O
                                        solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.26 )
                                          case ChanOut_OP_case_1
                                          solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.29 )
                                            case ChanOut_OP_case_1
                                            by contradiction /* cyclic */
                                          next
                                            case ChanOut_OP_case_2
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case ChanOut_OP_case_2
                                          by contradiction /* from formulas */
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case ChanOut_OO_case_3
                              by contradiction /* from formulas */
                            qed
                          next
                            case ChanOut_OO_case_2
                            solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.19)  ∥
                                   (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.19) )
                              case case_1
                              solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.20)  ∥
                                     (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.20) )
                                case case_1
                                solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.21)  ∥
                                       (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.21) )
                                  case case_1
                                  solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.22)  ∥
                                         (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.22) )
                                    case case_1
                                    solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                      case ChanIn_O
                                      solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.23 )
                                        case ChanOut_OP_case_1
                                        solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.26 )
                                          case ChanOut_OP
                                          by contradiction /* from formulas */
                                        qed
                                      next
                                        case ChanOut_OP_case_2
                                        by contradiction /* from formulas */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case ChanOut_OO_case_3
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                          case 3Output
                          solve( Pos( $Cu.2, $V.1, object(~cont_i) ) ▶₀ #vr.17 )
                            case ChanOut_OO_case_1
                            solve( Pos( $S.2, $Cu.2, object(~cont_i) ) ▶₀ #vr.20 )
                              case ChanOut_OO_case_1
                              solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                case ChanIn_O
                                solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.22 )
                                  case ChanOut_OP_case_1
                                  solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.25 )
                                    case ChanOut_OP
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case ChanOut_OP_case_2
                                  by contradiction /* from formulas */
                                qed
                              qed
                            next
                              case ChanOut_OO_case_2
                              solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.22)  ∥
                                     (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.22) )
                                case case_1
                                solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.23)  ∥
                                       (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.23) )
                                  case case_1
                                  solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.24)  ∥
                                         (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.24) )
                                    case case_1
                                    solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.25)  ∥
                                           (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.25) )
                                      case case_1
                                      solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                        case ChanIn_O
                                        solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.26 )
                                          case ChanOut_OP_case_1
                                          solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.29 )
                                            case ChanOut_OP
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case ChanOut_OP_case_2
                                          by contradiction /* from formulas */
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case case_2
                                solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.23)  ∥
                                       (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.23) )
                                  case case_2
                                  solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.24)  ∥
                                         (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.24) )
                                    case case_2
                                    solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.25)  ∥
                                           (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.25) )
                                      case case_2
                                      solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                        case ChanIn_O
                                        solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.26 )
                                          case ChanOut_OP_case_1
                                          solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.29 )
                                            case ChanOut_OP_case_1
                                            by contradiction /* cyclic */
                                          next
                                            case ChanOut_OP_case_2
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case ChanOut_OP_case_2
                                          by contradiction /* from formulas */
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case ChanOut_OO_case_3
                              by contradiction /* from formulas */
                            qed
                          next
                            case ChanOut_OO_case_2
                            solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.19)  ∥
                                   (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.19) )
                              case case_1
                              solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.20)  ∥
                                     (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.20) )
                                case case_1
                                solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.21)  ∥
                                       (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.21) )
                                  case case_1
                                  solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.22)  ∥
                                         (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.22) )
                                    case case_1
                                    solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                      case ChanIn_O
                                      solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.23 )
                                        case ChanOut_OP_case_1
                                        solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.26 )
                                          case ChanOut_OP
                                          by contradiction /* from formulas */
                                        qed
                                      next
                                        case ChanOut_OP_case_2
                                        by contradiction /* from formulas */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case ChanOut_OO_case_3
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case ChanOut_OP_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case ChanOut_OP_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case ChanOut_OO_case_3
        by contradiction /* from formulas */
      qed
    next
      case ChanOut_OO_case_2
      solve( (∃ #j. (Type( $Cu.1, 'customer' ) @ #j) ∧ #j < #vr.4)  ∥
             (∃ #j. (Type( $Cu.1, 'cashier' ) @ #j) ∧ #j < #vr.4) )
        case case_1
        solve( (∃ #j. (Type( $Cu.1, 'customer' ) @ #j) ∧ #j < #vr.5)  ∥
               (∃ #j. (Type( $Cu.1, 'cashier' ) @ #j) ∧ #j < #vr.5) )
          case case_1
          solve( (∃ #j. (Type( $Cu.1, 'customer' ) @ #j) ∧ #j < #vr.6)  ∥
                 (∃ #j. (Type( $Cu.1, 'cashier' ) @ #j) ∧ #j < #vr.6) )
            case case_1
            solve( (∃ #j. (Type( $Cu.1, 'customer' ) @ #j) ∧ #j < #vr.7)  ∥
                   (∃ #j. (Type( $Cu.1, 'cashier' ) @ #j) ∧ #j < #vr.7) )
              case case_1
              solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
                case ChanIn_O
                solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.8 )
                  case ChanOut_OP_case_1
                  solve( Pos( $V.1, $Cu, receipt(~barcode_i) ) ▶₀ #vr.11 )
                    case ChanOut_OP_case_1
                    solve( (#i < #i2)  ∥ (#i2 < #i) )
                      case case_1
                      solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                        case 3Output
                        solve( Pos( $Cu.2, $V.1, object(~cont_i) ) ▶₀ #vr.14 )
                          case ChanOut_OO_case_1
                          solve( Pos( $S.1, $Cu.2, object(~cont_i) ) ▶₀ #vr.17 )
                            case ChanOut_OO_case_1
                            solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                              case ChanIn_O
                              solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.19 )
                                case ChanOut_OP_case_1
                                solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.22 )
                                  case ChanOut_OP
                                  by contradiction /* from formulas */
                                qed
                              next
                                case ChanOut_OP_case_2
                                by contradiction /* from formulas */
                              qed
                            qed
                          next
                            case ChanOut_OO_case_2
                            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.19)  ∥
                                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.19) )
                              case case_1
                              solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.20)  ∥
                                     (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.20) )
                                case case_1
                                solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.21)  ∥
                                       (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.21) )
                                  case case_1
                                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.22)  ∥
                                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.22) )
                                    case case_1
                                    solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                      case ChanIn_O
                                      solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.23 )
                                        case ChanOut_OP_case_1
                                        solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.26 )
                                          case ChanOut_OP
                                          by contradiction /* from formulas */
                                        qed
                                      next
                                        case ChanOut_OP_case_2
                                        by contradiction /* from formulas */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.20)  ∥
                                     (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.20) )
                                case case_2
                                solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.21)  ∥
                                       (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.21) )
                                  case case_2
                                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.22)  ∥
                                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.22) )
                                    case case_2
                                    solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                      case ChanIn_O
                                      solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.23 )
                                        case ChanOut_OP_case_1
                                        solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.26 )
                                          case ChanOut_OP
                                          by contradiction /* from formulas */
                                        qed
                                      next
                                        case ChanOut_OP_case_2
                                        by contradiction /* from formulas */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case ChanOut_OO_case_3
                            by contradiction /* from formulas */
                          qed
                        next
                          case ChanOut_OO_case_2
                          solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.16)  ∥
                                 (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.16) )
                            case case_1
                            solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                                   (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                              case case_1
                              solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.18)  ∥
                                     (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.18) )
                                case case_1
                                solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.19)  ∥
                                       (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.19) )
                                  case case_1
                                  solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                    case ChanIn_O
                                    solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.20 )
                                      case ChanOut_OP_case_1
                                      solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.23 )
                                        case ChanOut_OP_case_1
                                        by contradiction /* cyclic */
                                      next
                                        case ChanOut_OP_case_2
                                        by contradiction /* from formulas */
                                      qed
                                    next
                                      case ChanOut_OP_case_2
                                      by contradiction /* from formulas */
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case ChanOut_OO_case_3
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2
                      solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                        case 3Output
                        solve( Pos( $Cu.2, $V.1, object(~cont_i) ) ▶₀ #vr.14 )
                          case ChanOut_OO_case_1
                          solve( Pos( $S.1, $Cu.2, object(~cont_i) ) ▶₀ #vr.17 )
                            case ChanOut_OO_case_1
                            solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                              case ChanIn_O
                              solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.19 )
                                case ChanOut_OP_case_1
                                solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.22 )
                                  case ChanOut_OP
                                  by contradiction /* from formulas */
                                qed
                              next
                                case ChanOut_OP_case_2
                                by contradiction /* from formulas */
                              qed
                            qed
                          next
                            case ChanOut_OO_case_2
                            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.19)  ∥
                                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.19) )
                              case case_1
                              solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.20)  ∥
                                     (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.20) )
                                case case_1
                                solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.21)  ∥
                                       (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.21) )
                                  case case_1
                                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.22)  ∥
                                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.22) )
                                    case case_1
                                    solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                      case ChanIn_O
                                      solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.23 )
                                        case ChanOut_OP_case_1
                                        solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.26 )
                                          case ChanOut_OP
                                          by contradiction /* from formulas */
                                        qed
                                      next
                                        case ChanOut_OP_case_2
                                        by contradiction /* from formulas */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.20)  ∥
                                     (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.20) )
                                case case_2
                                solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.21)  ∥
                                       (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.21) )
                                  case case_2
                                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.22)  ∥
                                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.22) )
                                    case case_2
                                    solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                      case ChanIn_O
                                      solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.23 )
                                        case ChanOut_OP_case_1
                                        solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.26 )
                                          case ChanOut_OP
                                          by contradiction /* from formulas */
                                        qed
                                      next
                                        case ChanOut_OP_case_2
                                        by contradiction /* from formulas */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case ChanOut_OO_case_3
                            by contradiction /* from formulas */
                          qed
                        next
                          case ChanOut_OO_case_2
                          solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.16)  ∥
                                 (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.16) )
                            case case_1
                            solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                                   (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                              case case_1
                              solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.18)  ∥
                                     (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.18) )
                                case case_1
                                solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.19)  ∥
                                       (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.19) )
                                  case case_1
                                  solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                    case ChanIn_O
                                    solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.20 )
                                      case ChanOut_OP_case_1
                                      solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.23 )
                                        case ChanOut_OP_case_1
                                        by contradiction /* cyclic */
                                      next
                                        case ChanOut_OP_case_2
                                        by contradiction /* from formulas */
                                      qed
                                    next
                                      case ChanOut_OP_case_2
                                      by contradiction /* from formulas */
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case ChanOut_OO_case_3
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case ChanOut_OP_case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case ChanOut_OP_case_2
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case ChanOut_OO_case_3
      by contradiction /* from formulas */
    qed
  qed
next
  case case_2
  solve( Info( bar, c ) ▶₁ #i )
    case 3Output
    solve( Pos( $Cu.1, $V, object(~cont_i) ) ▶₀ #vr.2 )
      case ChanOut_OO_case_1
      solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.5 )
        case ChanOut_OO_case_1
        solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
          case ChanIn_O
          solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.7 )
            case ChanOut_OP_case_1
            solve( Pos( $V.1, $Cu, receipt(~barcode_i) ) ▶₀ #vr.10 )
              case ChanOut_OP_case_1
              solve( (#i < #i2)  ∥ (#i2 < #i) )
                case case_1
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO_case_1
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO_case_1
                      by contradiction /* cyclic */
                    next
                      case ChanOut_OO_case_2
                      solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.18)  ∥
                             (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.18) )
                        case case_1
                        solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.19)  ∥
                               (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.19) )
                          case case_1
                          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.20)  ∥
                                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.20) )
                            case case_1
                            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.21)  ∥
                                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.21) )
                              case case_1
                              solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                case ChanIn_O
                                solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.22 )
                                  case ChanOut_OP_case_1
                                  solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.25 )
                                    case ChanOut_OP
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case ChanOut_OP_case_2
                                  by contradiction /* from formulas */
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.19)  ∥
                               (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.19) )
                          case case_2
                          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.20)  ∥
                                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.20) )
                            case case_2
                            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.21)  ∥
                                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.21) )
                              case case_2
                              solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                case ChanIn_O
                                solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.22 )
                                  case ChanOut_OP_case_1
                                  solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.25 )
                                    case ChanOut_OP
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case ChanOut_OP_case_2
                                  by contradiction /* from formulas */
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ChanOut_OO_case_3
                      by contradiction /* from formulas */
                    qed
                  next
                    case ChanOut_OO_case_2
                    solve( (∃ #j. (Type( $Cu.1, 'customer' ) @ #j) ∧ #j < #vr.15)  ∥
                           (∃ #j. (Type( $Cu.1, 'cashier' ) @ #j) ∧ #j < #vr.15) )
                      case case_1
                      solve( (∃ #j. (Type( $Cu.1, 'customer' ) @ #j) ∧ #j < #vr.16)  ∥
                             (∃ #j. (Type( $Cu.1, 'cashier' ) @ #j) ∧ #j < #vr.16) )
                        case case_1
                        solve( (∃ #j. (Type( $Cu.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                               (∃ #j. (Type( $Cu.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                          case case_1
                          solve( (∃ #j. (Type( $Cu.1, 'customer' ) @ #j) ∧ #j < #vr.18)  ∥
                                 (∃ #j. (Type( $Cu.1, 'cashier' ) @ #j) ∧ #j < #vr.18) )
                            case case_1
                            solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                              case ChanIn_O
                              solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.19 )
                                case ChanOut_OP_case_1
                                solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.22 )
                                  case ChanOut_OP
                                  by contradiction /* from formulas */
                                qed
                              next
                                case ChanOut_OP_case_2
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case ChanOut_OO_case_3
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case case_2
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO_case_1
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO_case_1
                      by contradiction /* cyclic */
                    next
                      case ChanOut_OO_case_2
                      solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.18)  ∥
                             (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.18) )
                        case case_1
                        solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.19)  ∥
                               (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.19) )
                          case case_1
                          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.20)  ∥
                                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.20) )
                            case case_1
                            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.21)  ∥
                                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.21) )
                              case case_1
                              solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                case ChanIn_O
                                solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.22 )
                                  case ChanOut_OP_case_1
                                  solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.25 )
                                    case ChanOut_OP
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case ChanOut_OP_case_2
                                  by contradiction /* from formulas */
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.19)  ∥
                               (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.19) )
                          case case_2
                          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.20)  ∥
                                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.20) )
                            case case_2
                            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.21)  ∥
                                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.21) )
                              case case_2
                              solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                case ChanIn_O
                                solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.22 )
                                  case ChanOut_OP_case_1
                                  solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.25 )
                                    case ChanOut_OP
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case ChanOut_OP_case_2
                                  by contradiction /* from formulas */
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ChanOut_OO_case_3
                      by contradiction /* from formulas */
                    qed
                  next
                    case ChanOut_OO_case_2
                    solve( (∃ #j. (Type( $Cu.1, 'customer' ) @ #j) ∧ #j < #vr.15)  ∥
                           (∃ #j. (Type( $Cu.1, 'cashier' ) @ #j) ∧ #j < #vr.15) )
                      case case_1
                      solve( (∃ #j. (Type( $Cu.1, 'customer' ) @ #j) ∧ #j < #vr.16)  ∥
                             (∃ #j. (Type( $Cu.1, 'cashier' ) @ #j) ∧ #j < #vr.16) )
                        case case_1
                        solve( (∃ #j. (Type( $Cu.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                               (∃ #j. (Type( $Cu.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                          case case_1
                          solve( (∃ #j. (Type( $Cu.1, 'customer' ) @ #j) ∧ #j < #vr.18)  ∥
                                 (∃ #j. (Type( $Cu.1, 'cashier' ) @ #j) ∧ #j < #vr.18) )
                            case case_1
                            solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                              case ChanIn_O
                              solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.19 )
                                case ChanOut_OP_case_1
                                solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.22 )
                                  case ChanOut_OP
                                  by contradiction /* from formulas */
                                qed
                              next
                                case ChanOut_OP_case_2
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case ChanOut_OO_case_3
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case ChanOut_OP_case_2
              by contradiction /* from formulas */
            qed
          next
            case ChanOut_OP_case_2
            by contradiction /* from formulas */
          qed
        qed
      next
        case ChanOut_OO_case_2
        solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.7)  ∥
               (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.7) )
          case case_1
          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.8) )
            case case_1
            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.9)  ∥
                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.9) )
              case case_1
              solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                     (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.10) )
                case case_1
                solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
                  case ChanIn_O
                  solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.11 )
                    case ChanOut_OP_case_1
                    solve( Pos( $V.1, $Cu, receipt(~barcode_i) ) ▶₀ #vr.14 )
                      case ChanOut_OP_case_1
                      solve( (#i < #i2)  ∥ (#i2 < #i) )
                        case case_1
                        solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                          case 3Output
                          solve( Pos( $Cu.2, $V.1, object(~cont_i) ) ▶₀ #vr.17 )
                            case ChanOut_OO_case_1
                            solve( Pos( $S.2, $Cu.2, object(~cont_i) ) ▶₀ #vr.20 )
                              case ChanOut_OO_case_1
                              solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                case ChanIn_O
                                solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.22 )
                                  case ChanOut_OP_case_1
                                  solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.25 )
                                    case ChanOut_OP
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case ChanOut_OP_case_2
                                  by contradiction /* from formulas */
                                qed
                              qed
                            next
                              case ChanOut_OO_case_2
                              solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.22)  ∥
                                     (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.22) )
                                case case_1
                                solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.23)  ∥
                                       (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.23) )
                                  case case_1
                                  solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.24)  ∥
                                         (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.24) )
                                    case case_1
                                    solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.25)  ∥
                                           (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.25) )
                                      case case_1
                                      solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                        case ChanIn_O
                                        solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.26 )
                                          case ChanOut_OP_case_1
                                          solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.29 )
                                            case ChanOut_OP_case_1
                                            by contradiction /* cyclic */
                                          next
                                            case ChanOut_OP_case_2
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case ChanOut_OP_case_2
                                          by contradiction /* from formulas */
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case case_2
                                solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.23)  ∥
                                       (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.23) )
                                  case case_2
                                  solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.24)  ∥
                                         (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.24) )
                                    case case_2
                                    solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.25)  ∥
                                           (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.25) )
                                      case case_2
                                      solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                        case ChanIn_O
                                        solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.26 )
                                          case ChanOut_OP_case_1
                                          solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.29 )
                                            case ChanOut_OP
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case ChanOut_OP_case_2
                                          by contradiction /* from formulas */
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case ChanOut_OO_case_3
                              by contradiction /* from formulas */
                            qed
                          next
                            case ChanOut_OO_case_2
                            solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.19)  ∥
                                   (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.19) )
                              case case_1
                              solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.20)  ∥
                                     (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.20) )
                                case case_1
                                solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.21)  ∥
                                       (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.21) )
                                  case case_1
                                  solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.22)  ∥
                                         (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.22) )
                                    case case_1
                                    solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                      case ChanIn_O
                                      solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.23 )
                                        case ChanOut_OP_case_1
                                        solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.26 )
                                          case ChanOut_OP
                                          by contradiction /* from formulas */
                                        qed
                                      next
                                        case ChanOut_OP_case_2
                                        by contradiction /* from formulas */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case ChanOut_OO_case_3
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                          case 3Output
                          solve( Pos( $Cu.2, $V.1, object(~cont_i) ) ▶₀ #vr.17 )
                            case ChanOut_OO_case_1
                            solve( Pos( $S.2, $Cu.2, object(~cont_i) ) ▶₀ #vr.20 )
                              case ChanOut_OO_case_1
                              solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                case ChanIn_O
                                solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.22 )
                                  case ChanOut_OP_case_1
                                  solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.25 )
                                    case ChanOut_OP
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case ChanOut_OP_case_2
                                  by contradiction /* from formulas */
                                qed
                              qed
                            next
                              case ChanOut_OO_case_2
                              solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.22)  ∥
                                     (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.22) )
                                case case_1
                                solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.23)  ∥
                                       (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.23) )
                                  case case_1
                                  solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.24)  ∥
                                         (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.24) )
                                    case case_1
                                    solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.25)  ∥
                                           (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.25) )
                                      case case_1
                                      solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                        case ChanIn_O
                                        solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.26 )
                                          case ChanOut_OP_case_1
                                          solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.29 )
                                            case ChanOut_OP_case_1
                                            by contradiction /* cyclic */
                                          next
                                            case ChanOut_OP_case_2
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case ChanOut_OP_case_2
                                          by contradiction /* from formulas */
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case case_2
                                solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.23)  ∥
                                       (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.23) )
                                  case case_2
                                  solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.24)  ∥
                                         (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.24) )
                                    case case_2
                                    solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.25)  ∥
                                           (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.25) )
                                      case case_2
                                      solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                        case ChanIn_O
                                        solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.26 )
                                          case ChanOut_OP_case_1
                                          solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.29 )
                                            case ChanOut_OP
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case ChanOut_OP_case_2
                                          by contradiction /* from formulas */
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case ChanOut_OO_case_3
                              by contradiction /* from formulas */
                            qed
                          next
                            case ChanOut_OO_case_2
                            solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.19)  ∥
                                   (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.19) )
                              case case_1
                              solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.20)  ∥
                                     (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.20) )
                                case case_1
                                solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.21)  ∥
                                       (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.21) )
                                  case case_1
                                  solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.22)  ∥
                                         (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.22) )
                                    case case_1
                                    solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                      case ChanIn_O
                                      solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.23 )
                                        case ChanOut_OP_case_1
                                        solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.26 )
                                          case ChanOut_OP
                                          by contradiction /* from formulas */
                                        qed
                                      next
                                        case ChanOut_OP_case_2
                                        by contradiction /* from formulas */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case ChanOut_OO_case_3
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case ChanOut_OP_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case ChanOut_OP_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        next
          case case_2
          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.8) )
            case case_2
            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.9)  ∥
                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.9) )
              case case_2
              solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                     (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.10) )
                case case_2
                solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
                  case ChanIn_O
                  solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.11 )
                    case ChanOut_OP_case_1
                    solve( Pos( $V.1, $Cu, receipt(~barcode_i) ) ▶₀ #vr.14 )
                      case ChanOut_OP_case_1
                      solve( (#i < #i2)  ∥ (#i2 < #i) )
                        case case_1
                        solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                          case 3Output
                          solve( Pos( $Cu.2, $V.1, object(~cont_i) ) ▶₀ #vr.17 )
                            case ChanOut_OO_case_1
                            solve( Pos( $S.2, $Cu.2, object(~cont_i) ) ▶₀ #vr.20 )
                              case ChanOut_OO_case_1
                              solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                case ChanIn_O
                                solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.22 )
                                  case ChanOut_OP_case_1
                                  solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.25 )
                                    case ChanOut_OP
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case ChanOut_OP_case_2
                                  by contradiction /* from formulas */
                                qed
                              qed
                            next
                              case ChanOut_OO_case_2
                              solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.22)  ∥
                                     (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.22) )
                                case case_1
                                solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.23)  ∥
                                       (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.23) )
                                  case case_1
                                  solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.24)  ∥
                                         (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.24) )
                                    case case_1
                                    solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.25)  ∥
                                           (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.25) )
                                      case case_1
                                      solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                        case ChanIn_O
                                        solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.26 )
                                          case ChanOut_OP_case_1
                                          solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.29 )
                                            case ChanOut_OP
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case ChanOut_OP_case_2
                                          by contradiction /* from formulas */
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case case_2
                                solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.23)  ∥
                                       (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.23) )
                                  case case_2
                                  solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.24)  ∥
                                         (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.24) )
                                    case case_2
                                    solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.25)  ∥
                                           (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.25) )
                                      case case_2
                                      solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                        case ChanIn_O
                                        solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.26 )
                                          case ChanOut_OP_case_1
                                          solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.29 )
                                            case ChanOut_OP_case_1
                                            by contradiction /* cyclic */
                                          next
                                            case ChanOut_OP_case_2
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case ChanOut_OP_case_2
                                          by contradiction /* from formulas */
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case ChanOut_OO_case_3
                              by contradiction /* from formulas */
                            qed
                          next
                            case ChanOut_OO_case_2
                            solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.19)  ∥
                                   (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.19) )
                              case case_1
                              solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.20)  ∥
                                     (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.20) )
                                case case_1
                                solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.21)  ∥
                                       (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.21) )
                                  case case_1
                                  solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.22)  ∥
                                         (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.22) )
                                    case case_1
                                    solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                      case ChanIn_O
                                      solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.23 )
                                        case ChanOut_OP_case_1
                                        solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.26 )
                                          case ChanOut_OP
                                          by contradiction /* from formulas */
                                        qed
                                      next
                                        case ChanOut_OP_case_2
                                        by contradiction /* from formulas */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case ChanOut_OO_case_3
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                          case 3Output
                          solve( Pos( $Cu.2, $V.1, object(~cont_i) ) ▶₀ #vr.17 )
                            case ChanOut_OO_case_1
                            solve( Pos( $S.2, $Cu.2, object(~cont_i) ) ▶₀ #vr.20 )
                              case ChanOut_OO_case_1
                              solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                case ChanIn_O
                                solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.22 )
                                  case ChanOut_OP_case_1
                                  solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.25 )
                                    case ChanOut_OP
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case ChanOut_OP_case_2
                                  by contradiction /* from formulas */
                                qed
                              qed
                            next
                              case ChanOut_OO_case_2
                              solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.22)  ∥
                                     (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.22) )
                                case case_1
                                solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.23)  ∥
                                       (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.23) )
                                  case case_1
                                  solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.24)  ∥
                                         (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.24) )
                                    case case_1
                                    solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.25)  ∥
                                           (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.25) )
                                      case case_1
                                      solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                        case ChanIn_O
                                        solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.26 )
                                          case ChanOut_OP_case_1
                                          solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.29 )
                                            case ChanOut_OP
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case ChanOut_OP_case_2
                                          by contradiction /* from formulas */
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case case_2
                                solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.23)  ∥
                                       (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.23) )
                                  case case_2
                                  solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.24)  ∥
                                         (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.24) )
                                    case case_2
                                    solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.25)  ∥
                                           (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.25) )
                                      case case_2
                                      solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                        case ChanIn_O
                                        solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.26 )
                                          case ChanOut_OP_case_1
                                          solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.29 )
                                            case ChanOut_OP_case_1
                                            by contradiction /* cyclic */
                                          next
                                            case ChanOut_OP_case_2
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case ChanOut_OP_case_2
                                          by contradiction /* from formulas */
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case ChanOut_OO_case_3
                              by contradiction /* from formulas */
                            qed
                          next
                            case ChanOut_OO_case_2
                            solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.19)  ∥
                                   (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.19) )
                              case case_1
                              solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.20)  ∥
                                     (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.20) )
                                case case_1
                                solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.21)  ∥
                                       (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.21) )
                                  case case_1
                                  solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.22)  ∥
                                         (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.22) )
                                    case case_1
                                    solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                      case ChanIn_O
                                      solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.23 )
                                        case ChanOut_OP_case_1
                                        solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.26 )
                                          case ChanOut_OP
                                          by contradiction /* from formulas */
                                        qed
                                      next
                                        case ChanOut_OP_case_2
                                        by contradiction /* from formulas */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case ChanOut_OO_case_3
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case ChanOut_OP_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case ChanOut_OP_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case ChanOut_OO_case_3
        by contradiction /* from formulas */
      qed
    next
      case ChanOut_OO_case_2
      solve( (∃ #j. (Type( $Cu.1, 'customer' ) @ #j) ∧ #j < #vr.4)  ∥
             (∃ #j. (Type( $Cu.1, 'cashier' ) @ #j) ∧ #j < #vr.4) )
        case case_1
        solve( (∃ #j. (Type( $Cu.1, 'customer' ) @ #j) ∧ #j < #vr.5)  ∥
               (∃ #j. (Type( $Cu.1, 'cashier' ) @ #j) ∧ #j < #vr.5) )
          case case_1
          solve( (∃ #j. (Type( $Cu.1, 'customer' ) @ #j) ∧ #j < #vr.6)  ∥
                 (∃ #j. (Type( $Cu.1, 'cashier' ) @ #j) ∧ #j < #vr.6) )
            case case_1
            solve( (∃ #j. (Type( $Cu.1, 'customer' ) @ #j) ∧ #j < #vr.7)  ∥
                   (∃ #j. (Type( $Cu.1, 'cashier' ) @ #j) ∧ #j < #vr.7) )
              case case_1
              solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
                case ChanIn_O
                solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.8 )
                  case ChanOut_OP_case_1
                  solve( Pos( $V.1, $Cu, receipt(~barcode_i) ) ▶₀ #vr.11 )
                    case ChanOut_OP_case_1
                    solve( (#i < #i2)  ∥ (#i2 < #i) )
                      case case_1
                      solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                        case 3Output
                        solve( Pos( $Cu.2, $V.1, object(~cont_i) ) ▶₀ #vr.14 )
                          case ChanOut_OO_case_1
                          solve( Pos( $S.1, $Cu.2, object(~cont_i) ) ▶₀ #vr.17 )
                            case ChanOut_OO_case_1
                            solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                              case ChanIn_O
                              solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.19 )
                                case ChanOut_OP_case_1
                                solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.22 )
                                  case ChanOut_OP
                                  by contradiction /* from formulas */
                                qed
                              next
                                case ChanOut_OP_case_2
                                by contradiction /* from formulas */
                              qed
                            qed
                          next
                            case ChanOut_OO_case_2
                            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.19)  ∥
                                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.19) )
                              case case_1
                              solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.20)  ∥
                                     (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.20) )
                                case case_1
                                solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.21)  ∥
                                       (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.21) )
                                  case case_1
                                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.22)  ∥
                                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.22) )
                                    case case_1
                                    solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                      case ChanIn_O
                                      solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.23 )
                                        case ChanOut_OP_case_1
                                        solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.26 )
                                          case ChanOut_OP
                                          by contradiction /* from formulas */
                                        qed
                                      next
                                        case ChanOut_OP_case_2
                                        by contradiction /* from formulas */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.20)  ∥
                                     (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.20) )
                                case case_2
                                solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.21)  ∥
                                       (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.21) )
                                  case case_2
                                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.22)  ∥
                                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.22) )
                                    case case_2
                                    solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                      case ChanIn_O
                                      solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.23 )
                                        case ChanOut_OP_case_1
                                        solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.26 )
                                          case ChanOut_OP
                                          by contradiction /* from formulas */
                                        qed
                                      next
                                        case ChanOut_OP_case_2
                                        by contradiction /* from formulas */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case ChanOut_OO_case_3
                            by contradiction /* from formulas */
                          qed
                        next
                          case ChanOut_OO_case_2
                          solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.16)  ∥
                                 (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.16) )
                            case case_1
                            solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                                   (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                              case case_1
                              solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.18)  ∥
                                     (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.18) )
                                case case_1
                                solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.19)  ∥
                                       (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.19) )
                                  case case_1
                                  solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                    case ChanIn_O
                                    solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.20 )
                                      case ChanOut_OP_case_1
                                      solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.23 )
                                        case ChanOut_OP_case_1
                                        by contradiction /* cyclic */
                                      next
                                        case ChanOut_OP_case_2
                                        by contradiction /* from formulas */
                                      qed
                                    next
                                      case ChanOut_OP_case_2
                                      by contradiction /* from formulas */
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case ChanOut_OO_case_3
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case case_2
                      solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                        case 3Output
                        solve( Pos( $Cu.2, $V.1, object(~cont_i) ) ▶₀ #vr.14 )
                          case ChanOut_OO_case_1
                          solve( Pos( $S.1, $Cu.2, object(~cont_i) ) ▶₀ #vr.17 )
                            case ChanOut_OO_case_1
                            solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                              case ChanIn_O
                              solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.19 )
                                case ChanOut_OP_case_1
                                solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.22 )
                                  case ChanOut_OP
                                  by contradiction /* from formulas */
                                qed
                              next
                                case ChanOut_OP_case_2
                                by contradiction /* from formulas */
                              qed
                            qed
                          next
                            case ChanOut_OO_case_2
                            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.19)  ∥
                                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.19) )
                              case case_1
                              solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.20)  ∥
                                     (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.20) )
                                case case_1
                                solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.21)  ∥
                                       (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.21) )
                                  case case_1
                                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.22)  ∥
                                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.22) )
                                    case case_1
                                    solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                      case ChanIn_O
                                      solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.23 )
                                        case ChanOut_OP_case_1
                                        solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.26 )
                                          case ChanOut_OP
                                          by contradiction /* from formulas */
                                        qed
                                      next
                                        case ChanOut_OP_case_2
                                        by contradiction /* from formulas */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            next
                              case case_2
                              solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.20)  ∥
                                     (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.20) )
                                case case_2
                                solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.21)  ∥
                                       (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.21) )
                                  case case_2
                                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.22)  ∥
                                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.22) )
                                    case case_2
                                    solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                      case ChanIn_O
                                      solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.23 )
                                        case ChanOut_OP_case_1
                                        solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.26 )
                                          case ChanOut_OP
                                          by contradiction /* from formulas */
                                        qed
                                      next
                                        case ChanOut_OP_case_2
                                        by contradiction /* from formulas */
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case ChanOut_OO_case_3
                            by contradiction /* from formulas */
                          qed
                        next
                          case ChanOut_OO_case_2
                          solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.16)  ∥
                                 (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.16) )
                            case case_1
                            solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                                   (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                              case case_1
                              solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.18)  ∥
                                     (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.18) )
                                case case_1
                                solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.19)  ∥
                                       (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.19) )
                                  case case_1
                                  solve( In_O( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                    case ChanIn_O
                                    solve( Pos( $Cu, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.20 )
                                      case ChanOut_OP_case_1
                                      solve( Pos( $V.2, $Cu, receipt(~barcode_i.1) ) ▶₀ #vr.23 )
                                        case ChanOut_OP_case_1
                                        by contradiction /* cyclic */
                                      next
                                        case ChanOut_OP_case_2
                                        by contradiction /* from formulas */
                                      qed
                                    next
                                      case ChanOut_OP_case_2
                                      by contradiction /* from formulas */
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case ChanOut_OO_case_3
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case ChanOut_OP_case_2
                    by contradiction /* from formulas */
                  qed
                next
                  case ChanOut_OP_case_2
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case ChanOut_OO_case_3
      by contradiction /* from formulas */
    qed
  qed
qed

lemma cashforpurchaseNetto:
  all-traces
  "∀ ca cu c bar #i.
    ((Cash( ca, cu, c, bar ) @ #i) ∧
     ((¬(∃ x #k. BuildA( x ) @ #k)) ∨
      ((¬(∃ h x #k. Chatty( h, x ) @ #k)) ∧
       (¬(∃ h x #k. Cocky( h, x ) @ #k))))) ⇒
    (∃ cu1 s #j.
      ((Purchase( s, cu1, c ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ ca1 cu2 bar2 #i2.
           (Cash( ca1, cu2, c, bar2 ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ s1 cu3 #j2. (Purchase( s1, cu3, c ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  (((∀ x #k. (BuildA( x ) @ #k) ⇒ ⊥) ∨
    ((∀ h x #k. (Chatty( h, x ) @ #k) ⇒ ⊥) ∧
     (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥)))) ∧
  (∀ cu1 s #j.
    (Purchase( s, cu1, c ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     ((∃ ca1 cu2 bar2 #i2. (Cash( ca1, cu2, c, bar2 ) @ #i2) ∧ ¬(#i = #i2)) ∧
      (∀ s1 cu3 #j2. (Purchase( s1, cu3, c ) @ #j2) ⇒ #j = #j2))))"
*/
simplify
solve( (∀ x #k. (BuildA( x ) @ #k) ⇒ ⊥)  ∥
       ((∀ h x #k. (Chatty( h, x ) @ #k) ⇒ ⊥) ∧
        (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥)) )
  case case_1
  solve( Info( bar, c ) ▶₁ #i )
    case 3Output
    solve( (#i < #i2)  ∥ (#i2 < #i) )
      case case_1
      solve( Pos( $Cu.2, $V, object(~cont_i) ) ▶₀ #vr.2 )
        case ChanOut_OO_case_1
        solve( Pos( $S.1, $Cu.2, object(~cont_i) ) ▶₀ #vr.5 )
          case ChanOut_OO_case_1
          solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
            case 3Output
            solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.8 )
              case ChanOut_OO_case_1
              solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.11 )
                case ChanOut_OO_case_1
                by contradiction /* cyclic */
              next
                case ChanOut_OO_case_2
                by contradiction /* from formulas */
              next
                case ChanOut_OO_case_3
                solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.13)  ∥
                       (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.13) )
                  case case_1
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                    case case_1
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.15)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.15) )
                      case case_1
                      solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.16)  ∥
                             (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.16) )
                        case case_1
                        solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                               (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                          case case_1
                          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                            case case_1
                            solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                              case ChanOut_OO
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                            case case_1
                            solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                              case ChanOut_OO
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                    case case_2
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.15)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.15) )
                      case case_2
                      solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.16)  ∥
                             (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.16) )
                        case case_2
                        solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                               (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                          case case_1
                          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                            case case_2
                            solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                              case ChanOut_OO
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                            case case_2
                            solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                              case ChanOut_OO
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case ChanOut_OO_case_2
              by contradiction /* from formulas */
            next
              case ChanOut_OO_case_3
              solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                     (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.10) )
                case case_1
                solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                       (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                  case case_1
                  solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.12)  ∥
                         (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.12) )
                    case case_1
                    solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.13)  ∥
                           (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.13) )
                      case case_1
                      solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                             (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                        case case_1
                        solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                               (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                          case case_1
                          solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.14 )
                            case ChanOut_OO
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                               (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                          case case_1
                          solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.14 )
                            case ChanOut_OO
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case ChanOut_OO_case_2
          by contradiction /* from formulas */
        next
          case ChanOut_OO_case_3
          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.7)  ∥
                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.7) )
            case case_1
            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.8) )
              case case_1
              solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.9)  ∥
                     (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.9) )
                case case_1
                solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                       (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.10) )
                  case case_1
                  solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                         (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                    case case_1
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                      case case_1
                      solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                        case ChanOut_OO_case_1
                        solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                          case 3Output
                          solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.14 )
                            case ChanOut_OO_case_1
                            solve( Pos( $S.2, $Cu.3, object(~cont_i) ) ▶₀ #vr.17 )
                              case ChanOut_OO_case_1
                              by contradiction /* from formulas */
                            next
                              case ChanOut_OO_case_2
                              by contradiction /* cyclic */
                            qed
                          next
                            case ChanOut_OO_case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case ChanOut_OO_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                      case case_1
                      solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                        case ChanOut_OO
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case case_2
            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.8) )
              case case_2
              solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.9)  ∥
                     (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.9) )
                case case_2
                solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                       (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.10) )
                  case case_2
                  solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                         (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                    case case_1
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                      case case_2
                      solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                        case ChanOut_OO_case_1
                        solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                          case 3Output
                          solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.14 )
                            case ChanOut_OO_case_1
                            solve( Pos( $S.2, $Cu.3, object(~cont_i) ) ▶₀ #vr.17 )
                              case ChanOut_OO_case_1
                              by contradiction /* from formulas */
                            next
                              case ChanOut_OO_case_2
                              by contradiction /* cyclic */
                            qed
                          next
                            case ChanOut_OO_case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case ChanOut_OO_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                      case case_2
                      solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                        case ChanOut_OO
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case ChanOut_OO_case_2
        by contradiction /* from formulas */
      next
        case ChanOut_OO_case_3
        solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.4)  ∥
               (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.4) )
          case case_1
          solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.5)  ∥
                 (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.5) )
            case case_1
            solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.6)  ∥
                   (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.6) )
              case case_1
              solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.7)  ∥
                     (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.7) )
                case case_1
                solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                       (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.8) )
                  case case_1
                  solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                         (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.8) )
                    case case_1
                    solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.8 )
                      case ChanOut_OO_case_1
                      solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                        case 3Output
                        solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.11 )
                          case ChanOut_OO_case_1
                          solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.14 )
                            case ChanOut_OO
                            by contradiction /* from formulas */
                          qed
                        next
                          case ChanOut_OO_case_2
                          by contradiction /* from formulas */
                        next
                          case ChanOut_OO_case_3
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case ChanOut_OO_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                         (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.8) )
                    case case_1
                    solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.8 )
                      case ChanOut_OO
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case case_2
      solve( Pos( $Cu.2, $V, object(~cont_i) ) ▶₀ #vr.2 )
        case ChanOut_OO_case_1
        solve( Pos( $S.1, $Cu.2, object(~cont_i) ) ▶₀ #vr.5 )
          case ChanOut_OO_case_1
          solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
            case 3Output
            solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.8 )
              case ChanOut_OO_case_1
              solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.11 )
                case ChanOut_OO_case_1
                by contradiction /* cyclic */
              next
                case ChanOut_OO_case_2
                by contradiction /* from formulas */
              next
                case ChanOut_OO_case_3
                solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.13)  ∥
                       (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.13) )
                  case case_1
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                    case case_1
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.15)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.15) )
                      case case_1
                      solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.16)  ∥
                             (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.16) )
                        case case_1
                        solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                               (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                          case case_1
                          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                            case case_1
                            solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                              case ChanOut_OO
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                            case case_1
                            solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                              case ChanOut_OO
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                    case case_2
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.15)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.15) )
                      case case_2
                      solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.16)  ∥
                             (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.16) )
                        case case_2
                        solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                               (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                          case case_1
                          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                            case case_2
                            solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                              case ChanOut_OO
                              by contradiction /* from formulas */
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                            case case_2
                            solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                              case ChanOut_OO
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case ChanOut_OO_case_2
              by contradiction /* from formulas */
            next
              case ChanOut_OO_case_3
              solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                     (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.10) )
                case case_1
                solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                       (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                  case case_1
                  solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.12)  ∥
                         (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.12) )
                    case case_1
                    solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.13)  ∥
                           (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.13) )
                      case case_1
                      solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                             (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                        case case_1
                        solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                               (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                          case case_1
                          solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.14 )
                            case ChanOut_OO
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                               (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                          case case_1
                          solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.14 )
                            case ChanOut_OO
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case ChanOut_OO_case_2
          by contradiction /* from formulas */
        next
          case ChanOut_OO_case_3
          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.7)  ∥
                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.7) )
            case case_1
            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.8) )
              case case_1
              solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.9)  ∥
                     (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.9) )
                case case_1
                solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                       (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.10) )
                  case case_1
                  solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                         (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                    case case_1
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                      case case_1
                      solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                        case ChanOut_OO_case_1
                        solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                          case 3Output
                          solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.14 )
                            case ChanOut_OO_case_1
                            solve( Pos( $S.2, $Cu.3, object(~cont_i) ) ▶₀ #vr.17 )
                              case ChanOut_OO_case_1
                              by contradiction /* from formulas */
                            next
                              case ChanOut_OO_case_2
                              by contradiction /* cyclic */
                            qed
                          next
                            case ChanOut_OO_case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case ChanOut_OO_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                      case case_1
                      solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                        case ChanOut_OO
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case case_2
            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.8) )
              case case_2
              solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.9)  ∥
                     (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.9) )
                case case_2
                solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                       (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.10) )
                  case case_2
                  solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                         (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                    case case_1
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                      case case_2
                      solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                        case ChanOut_OO_case_1
                        solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                          case 3Output
                          solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.14 )
                            case ChanOut_OO_case_1
                            solve( Pos( $S.2, $Cu.3, object(~cont_i) ) ▶₀ #vr.17 )
                              case ChanOut_OO_case_1
                              by contradiction /* from formulas */
                            next
                              case ChanOut_OO_case_2
                              by contradiction /* cyclic */
                            qed
                          next
                            case ChanOut_OO_case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case ChanOut_OO_case_2
                        by contradiction /* from formulas */
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                      case case_2
                      solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                        case ChanOut_OO
                        by contradiction /* from formulas */
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case ChanOut_OO_case_2
        by contradiction /* from formulas */
      next
        case ChanOut_OO_case_3
        solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.4)  ∥
               (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.4) )
          case case_1
          solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.5)  ∥
                 (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.5) )
            case case_1
            solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.6)  ∥
                   (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.6) )
              case case_1
              solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.7)  ∥
                     (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.7) )
                case case_1
                solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                       (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.8) )
                  case case_1
                  solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                         (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.8) )
                    case case_1
                    solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.8 )
                      case ChanOut_OO_case_1
                      solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                        case 3Output
                        solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.11 )
                          case ChanOut_OO_case_1
                          solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.14 )
                            case ChanOut_OO
                            by contradiction /* from formulas */
                          qed
                        next
                          case ChanOut_OO_case_2
                          by contradiction /* from formulas */
                        next
                          case ChanOut_OO_case_3
                          by contradiction /* cyclic */
                        qed
                      qed
                    next
                      case ChanOut_OO_case_2
                      by contradiction /* from formulas */
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                         (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.8) )
                    case case_1
                    solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.8 )
                      case ChanOut_OO
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case case_2
  solve( Info( bar, c ) ▶₁ #i )
    case 3Output
    solve( (#i < #i2)  ∥ (#i2 < #i) )
      case case_1
      solve( Pos( $Cu.2, $V, object(~cont_i) ) ▶₀ #vr.2 )
        case ChanOut_OO_case_1
        solve( Pos( $S.1, $Cu.2, object(~cont_i) ) ▶₀ #vr.5 )
          case ChanOut_OO_case_1
          solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
            case 3Output
            solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.8 )
              case ChanOut_OO_case_1
              solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.11 )
                case ChanOut_OO_case_1
                by contradiction /* cyclic */
              next
                case ChanOut_OO_case_2
                solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.13)  ∥
                       (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.13) )
                  case case_1
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                    case case_1
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.15)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.15) )
                      case case_1
                      solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.16)  ∥
                             (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.16) )
                        case case_1
                        solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
                          case ChanIn_O
                          solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.17 )
                            case ChanOut_OP_case_1
                            solve( Pos( $V.2, $Cu, receipt(~barcode_i) ) ▶₀ #vr.20 )
                              case ChanOut_OP_case_1
                              solve( In_O( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                case ChanIn_O
                                solve( Pos( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.22 )
                                  case ChanOut_OP_case_1
                                  solve( Pos( $V.2, $Cu.1, receipt(~barcode_i.1) ) ▶₀ #vr.25 )
                                    case ChanOut_OP_case_1
                                    solve( !KU( ~cont_i ) @ #vk )
                                      case LookA
                                      by contradiction /* from formulas */
                                    qed
                                  next
                                    case ChanOut_OP_case_2
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case ChanOut_OP_case_2
                                  by contradiction /* from formulas */
                                qed
                              qed
                            next
                              case ChanOut_OP_case_2
                              by contradiction /* from formulas */
                            qed
                          next
                            case ChanOut_OP_case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                    case case_2
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.15)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.15) )
                      case case_2
                      solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.16)  ∥
                             (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.16) )
                        case case_2
                        solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
                          case ChanIn_O
                          solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.17 )
                            case ChanOut_OP_case_1
                            solve( Pos( $V.2, $Cu, receipt(~barcode_i) ) ▶₀ #vr.20 )
                              case ChanOut_OP_case_1
                              solve( In_O( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                case ChanIn_O
                                solve( Pos( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.22 )
                                  case ChanOut_OP_case_1
                                  solve( Pos( $V.2, $Cu.1, receipt(~barcode_i.1) ) ▶₀ #vr.25 )
                                    case ChanOut_OP_case_1
                                    solve( !KU( ~cont_i ) @ #vk )
                                      case LookA
                                      by contradiction /* from formulas */
                                    qed
                                  next
                                    case ChanOut_OP_case_2
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case ChanOut_OP_case_2
                                  by contradiction /* from formulas */
                                qed
                              qed
                            next
                              case ChanOut_OP_case_2
                              by contradiction /* from formulas */
                            qed
                          next
                            case ChanOut_OP_case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case ChanOut_OO_case_3
                by contradiction /* from formulas */
              qed
            next
              case ChanOut_OO_case_2
              solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                     (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.10) )
                case case_1
                solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                       (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                  case case_1
                  solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.12)  ∥
                         (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.12) )
                    case case_1
                    solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.13)  ∥
                           (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.13) )
                      case case_1
                      solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
                        case ChanIn_O
                        solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.14 )
                          case ChanOut_OP_case_1
                          solve( Pos( $V.2, $Cu, receipt(~barcode_i) ) ▶₀ #vr.17 )
                            case ChanOut_OP_case_1
                            solve( In_O( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                              case ChanIn_O
                              solve( Pos( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.19 )
                                case ChanOut_OP_case_1
                                solve( Pos( $V.2, $Cu.1, receipt(~barcode_i.1) ) ▶₀ #vr.22 )
                                  case ChanOut_OP_case_1
                                  solve( !KU( ~cont_i ) @ #vk )
                                    case LookA
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case ChanOut_OP_case_2
                                  by contradiction /* from formulas */
                                qed
                              next
                                case ChanOut_OP_case_2
                                by contradiction /* from formulas */
                              qed
                            qed
                          next
                            case ChanOut_OP_case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case ChanOut_OP_case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case ChanOut_OO_case_3
              by contradiction /* from formulas */
            qed
          qed
        next
          case ChanOut_OO_case_2
          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.7)  ∥
                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.7) )
            case case_1
            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.8) )
              case case_1
              solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.9)  ∥
                     (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.9) )
                case case_1
                solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                       (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.10) )
                  case case_1
                  solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                    case 3Output
                    solve( Pos( $Cu.4, $V.1, object(~cont_i) ) ▶₀ #vr.12 )
                      case ChanOut_OO_case_1
                      solve( Pos( $S.2, $Cu.4, object(~cont_i) ) ▶₀ #vr.15 )
                        case ChanOut_OO_case_1
                        solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
                          case ChanIn_O
                          solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.17 )
                            case ChanOut_OP_case_1
                            solve( Pos( $V.2, $Cu, receipt(~barcode_i) ) ▶₀ #vr.20 )
                              case ChanOut_OP_case_1
                              solve( In_O( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                case ChanIn_O
                                solve( Pos( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.22 )
                                  case ChanOut_OP_case_1
                                  solve( Pos( $V.2, $Cu.1, receipt(~barcode_i.1) ) ▶₀ #vr.25 )
                                    case ChanOut_OP_case_1
                                    solve( !KU( ~cont_i ) @ #vk )
                                      case LookA
                                      by contradiction /* from formulas */
                                    qed
                                  next
                                    case ChanOut_OP_case_2
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case ChanOut_OP_case_2
                                  by contradiction /* from formulas */
                                qed
                              qed
                            next
                              case ChanOut_OP_case_2
                              by contradiction /* from formulas */
                            qed
                          next
                            case ChanOut_OP_case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case ChanOut_OO_case_2
                        solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                               (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                          case case_1
                          solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.18)  ∥
                                 (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.18) )
                            case case_1
                            solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.19)  ∥
                                   (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.19) )
                              case case_1
                              solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.20)  ∥
                                     (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.20) )
                                case case_1
                                solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
                                  case ChanIn_O
                                  solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.21 )
                                    case ChanOut_OP_case_1
                                    solve( Pos( $V.2, $Cu, receipt(~barcode_i) ) ▶₀ #vr.24 )
                                      case ChanOut_OP_case_1
                                      solve( In_O( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                        case ChanIn_O
                                        solve( Pos( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.26 )
                                          case ChanOut_OP_case_1
                                          solve( Pos( $V.2, $Cu.1, receipt(~barcode_i.1) ) ▶₀ #vr.29 )
                                            case ChanOut_OP_case_1
                                            solve( !KU( ~cont_i ) @ #vk )
                                              case LookA
                                              by contradiction /* from formulas */
                                            qed
                                          next
                                            case ChanOut_OP_case_2
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case ChanOut_OP_case_2
                                          by contradiction /* from formulas */
                                        qed
                                      qed
                                    next
                                      case ChanOut_OP_case_2
                                      by contradiction /* from formulas */
                                    qed
                                  next
                                    case ChanOut_OP_case_2
                                    by contradiction /* from formulas */
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.18)  ∥
                                 (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.18) )
                            case case_2
                            solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.19)  ∥
                                   (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.19) )
                              case case_2
                              solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.20)  ∥
                                     (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.20) )
                                case case_2
                                solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
                                  case ChanIn_O
                                  solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.21 )
                                    case ChanOut_OP_case_1
                                    solve( Pos( $V.2, $Cu, receipt(~barcode_i) ) ▶₀ #vr.24 )
                                      case ChanOut_OP_case_1
                                      solve( In_O( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                        case ChanIn_O
                                        solve( Pos( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.26 )
                                          case ChanOut_OP_case_1
                                          solve( Pos( $V.2, $Cu.1, receipt(~barcode_i.1) ) ▶₀ #vr.29 )
                                            case ChanOut_OP_case_1
                                            solve( !KU( ~cont_i ) @ #vk )
                                              case LookA
                                              by contradiction /* from formulas */
                                            qed
                                          next
                                            case ChanOut_OP_case_2
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case ChanOut_OP_case_2
                                          by contradiction /* from formulas */
                                        qed
                                      qed
                                    next
                                      case ChanOut_OP_case_2
                                      by contradiction /* from formulas */
                                    qed
                                  next
                                    case ChanOut_OP_case_2
                                    by contradiction /* from formulas */
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case ChanOut_OO_case_3
                        by contradiction /* from formulas */
                      qed
                    next
                      case ChanOut_OO_case_2
                      solve( (∃ #j. (Type( $Cu.4, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                             (∃ #j. (Type( $Cu.4, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                        case case_1
                        solve( (∃ #j. (Type( $Cu.4, 'customer' ) @ #j) ∧ #j < #vr.15)  ∥
                               (∃ #j. (Type( $Cu.4, 'cashier' ) @ #j) ∧ #j < #vr.15) )
                          case case_1
                          solve( (∃ #j. (Type( $Cu.4, 'customer' ) @ #j) ∧ #j < #vr.16)  ∥
                                 (∃ #j. (Type( $Cu.4, 'cashier' ) @ #j) ∧ #j < #vr.16) )
                            case case_1
                            solve( (∃ #j. (Type( $Cu.4, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                                   (∃ #j. (Type( $Cu.4, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                              case case_1
                              solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
                                case ChanIn_O
                                solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.18 )
                                  case ChanOut_OP_case_1
                                  solve( Pos( $V.2, $Cu, receipt(~barcode_i) ) ▶₀ #vr.21 )
                                    case ChanOut_OP_case_1
                                    solve( In_O( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                      case ChanIn_O
                                      solve( Pos( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.23 )
                                        case ChanOut_OP_case_1
                                        solve( Pos( $V.2, $Cu.1, receipt(~barcode_i.1) ) ▶₀ #vr.26 )
                                          case ChanOut_OP_case_1
                                          solve( !KU( ~cont_i ) @ #vk )
                                            case LookA
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case ChanOut_OP_case_2
                                          by contradiction /* from formulas */
                                        qed
                                      next
                                        case ChanOut_OP_case_2
                                        by contradiction /* from formulas */
                                      qed
                                    qed
                                  next
                                    case ChanOut_OP_case_2
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case ChanOut_OP_case_2
                                  by contradiction /* from formulas */
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ChanOut_OO_case_3
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          next
            case case_2
            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.8) )
              case case_2
              solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.9)  ∥
                     (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.9) )
                case case_2
                solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                       (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.10) )
                  case case_2
                  solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                    case 3Output
                    solve( Pos( $Cu.4, $V.1, object(~cont_i) ) ▶₀ #vr.12 )
                      case ChanOut_OO_case_1
                      solve( Pos( $S.2, $Cu.4, object(~cont_i) ) ▶₀ #vr.15 )
                        case ChanOut_OO_case_1
                        solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
                          case ChanIn_O
                          solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.17 )
                            case ChanOut_OP_case_1
                            solve( Pos( $V.2, $Cu, receipt(~barcode_i) ) ▶₀ #vr.20 )
                              case ChanOut_OP_case_1
                              solve( In_O( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                case ChanIn_O
                                solve( Pos( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.22 )
                                  case ChanOut_OP_case_1
                                  solve( Pos( $V.2, $Cu.1, receipt(~barcode_i.1) ) ▶₀ #vr.25 )
                                    case ChanOut_OP_case_1
                                    solve( !KU( ~cont_i ) @ #vk )
                                      case LookA
                                      by contradiction /* from formulas */
                                    qed
                                  next
                                    case ChanOut_OP_case_2
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case ChanOut_OP_case_2
                                  by contradiction /* from formulas */
                                qed
                              qed
                            next
                              case ChanOut_OP_case_2
                              by contradiction /* from formulas */
                            qed
                          next
                            case ChanOut_OP_case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case ChanOut_OO_case_2
                        solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                               (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                          case case_1
                          solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.18)  ∥
                                 (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.18) )
                            case case_1
                            solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.19)  ∥
                                   (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.19) )
                              case case_1
                              solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.20)  ∥
                                     (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.20) )
                                case case_1
                                solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
                                  case ChanIn_O
                                  solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.21 )
                                    case ChanOut_OP_case_1
                                    solve( Pos( $V.2, $Cu, receipt(~barcode_i) ) ▶₀ #vr.24 )
                                      case ChanOut_OP_case_1
                                      solve( In_O( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                        case ChanIn_O
                                        solve( Pos( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.26 )
                                          case ChanOut_OP_case_1
                                          solve( Pos( $V.2, $Cu.1, receipt(~barcode_i.1) ) ▶₀ #vr.29 )
                                            case ChanOut_OP_case_1
                                            solve( !KU( ~cont_i ) @ #vk )
                                              case LookA
                                              by contradiction /* from formulas */
                                            qed
                                          next
                                            case ChanOut_OP_case_2
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case ChanOut_OP_case_2
                                          by contradiction /* from formulas */
                                        qed
                                      qed
                                    next
                                      case ChanOut_OP_case_2
                                      by contradiction /* from formulas */
                                    qed
                                  next
                                    case ChanOut_OP_case_2
                                    by contradiction /* from formulas */
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.18)  ∥
                                 (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.18) )
                            case case_2
                            solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.19)  ∥
                                   (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.19) )
                              case case_2
                              solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.20)  ∥
                                     (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.20) )
                                case case_2
                                solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
                                  case ChanIn_O
                                  solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.21 )
                                    case ChanOut_OP_case_1
                                    solve( Pos( $V.2, $Cu, receipt(~barcode_i) ) ▶₀ #vr.24 )
                                      case ChanOut_OP_case_1
                                      solve( In_O( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                        case ChanIn_O
                                        solve( Pos( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.26 )
                                          case ChanOut_OP_case_1
                                          solve( Pos( $V.2, $Cu.1, receipt(~barcode_i.1) ) ▶₀ #vr.29 )
                                            case ChanOut_OP_case_1
                                            solve( !KU( ~cont_i ) @ #vk )
                                              case LookA
                                              by contradiction /* from formulas */
                                            qed
                                          next
                                            case ChanOut_OP_case_2
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case ChanOut_OP_case_2
                                          by contradiction /* from formulas */
                                        qed
                                      qed
                                    next
                                      case ChanOut_OP_case_2
                                      by contradiction /* from formulas */
                                    qed
                                  next
                                    case ChanOut_OP_case_2
                                    by contradiction /* from formulas */
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case ChanOut_OO_case_3
                        by contradiction /* from formulas */
                      qed
                    next
                      case ChanOut_OO_case_2
                      solve( (∃ #j. (Type( $Cu.4, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                             (∃ #j. (Type( $Cu.4, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                        case case_1
                        solve( (∃ #j. (Type( $Cu.4, 'customer' ) @ #j) ∧ #j < #vr.15)  ∥
                               (∃ #j. (Type( $Cu.4, 'cashier' ) @ #j) ∧ #j < #vr.15) )
                          case case_1
                          solve( (∃ #j. (Type( $Cu.4, 'customer' ) @ #j) ∧ #j < #vr.16)  ∥
                                 (∃ #j. (Type( $Cu.4, 'cashier' ) @ #j) ∧ #j < #vr.16) )
                            case case_1
                            solve( (∃ #j. (Type( $Cu.4, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                                   (∃ #j. (Type( $Cu.4, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                              case case_1
                              solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
                                case ChanIn_O
                                solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.18 )
                                  case ChanOut_OP_case_1
                                  solve( Pos( $V.2, $Cu, receipt(~barcode_i) ) ▶₀ #vr.21 )
                                    case ChanOut_OP_case_1
                                    solve( In_O( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                      case ChanIn_O
                                      solve( Pos( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.23 )
                                        case ChanOut_OP_case_1
                                        solve( Pos( $V.2, $Cu.1, receipt(~barcode_i.1) ) ▶₀ #vr.26 )
                                          case ChanOut_OP_case_1
                                          solve( !KU( ~cont_i ) @ #vk )
                                            case LookA
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case ChanOut_OP_case_2
                                          by contradiction /* from formulas */
                                        qed
                                      next
                                        case ChanOut_OP_case_2
                                        by contradiction /* from formulas */
                                      qed
                                    qed
                                  next
                                    case ChanOut_OP_case_2
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case ChanOut_OP_case_2
                                  by contradiction /* from formulas */
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ChanOut_OO_case_3
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case ChanOut_OO_case_3
          by contradiction /* from formulas */
        qed
      next
        case ChanOut_OO_case_2
        solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.4)  ∥
               (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.4) )
          case case_1
          solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.5)  ∥
                 (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.5) )
            case case_1
            solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.6)  ∥
                   (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.6) )
              case case_1
              solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.7)  ∥
                     (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.7) )
                case case_1
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.4, $V.1, object(~cont_i) ) ▶₀ #vr.9 )
                    case ChanOut_OO_case_1
                    solve( Pos( $S.1, $Cu.4, object(~cont_i) ) ▶₀ #vr.12 )
                      case ChanOut_OO_case_1
                      solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
                        case ChanIn_O
                        solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.14 )
                          case ChanOut_OP_case_1
                          solve( Pos( $V.2, $Cu, receipt(~barcode_i) ) ▶₀ #vr.17 )
                            case ChanOut_OP_case_1
                            solve( In_O( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                              case ChanIn_O
                              solve( Pos( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.19 )
                                case ChanOut_OP_case_1
                                solve( Pos( $V.2, $Cu.1, receipt(~barcode_i.1) ) ▶₀ #vr.22 )
                                  case ChanOut_OP_case_1
                                  solve( !KU( ~cont_i ) @ #vk )
                                    case LookA
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case ChanOut_OP_case_2
                                  by contradiction /* from formulas */
                                qed
                              next
                                case ChanOut_OP_case_2
                                by contradiction /* from formulas */
                              qed
                            qed
                          next
                            case ChanOut_OP_case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case ChanOut_OP_case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case ChanOut_OO_case_2
                      solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                             (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                        case case_1
                        solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.15)  ∥
                               (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.15) )
                          case case_1
                          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.16)  ∥
                                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.16) )
                            case case_1
                            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                              case case_1
                              solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
                                case ChanIn_O
                                solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.18 )
                                  case ChanOut_OP_case_1
                                  solve( Pos( $V.2, $Cu, receipt(~barcode_i) ) ▶₀ #vr.21 )
                                    case ChanOut_OP_case_1
                                    solve( In_O( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                      case ChanIn_O
                                      solve( Pos( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.23 )
                                        case ChanOut_OP_case_1
                                        solve( Pos( $V.2, $Cu.1, receipt(~barcode_i.1) ) ▶₀ #vr.26 )
                                          case ChanOut_OP_case_1
                                          solve( !KU( ~cont_i ) @ #vk )
                                            case LookA
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case ChanOut_OP_case_2
                                          by contradiction /* from formulas */
                                        qed
                                      next
                                        case ChanOut_OP_case_2
                                        by contradiction /* from formulas */
                                      qed
                                    qed
                                  next
                                    case ChanOut_OP_case_2
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case ChanOut_OP_case_2
                                  by contradiction /* from formulas */
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.15)  ∥
                               (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.15) )
                          case case_2
                          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.16)  ∥
                                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.16) )
                            case case_2
                            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                              case case_2
                              solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
                                case ChanIn_O
                                solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.18 )
                                  case ChanOut_OP_case_1
                                  solve( Pos( $V.2, $Cu, receipt(~barcode_i) ) ▶₀ #vr.21 )
                                    case ChanOut_OP_case_1
                                    solve( In_O( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                      case ChanIn_O
                                      solve( Pos( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.23 )
                                        case ChanOut_OP_case_1
                                        solve( Pos( $V.2, $Cu.1, receipt(~barcode_i.1) ) ▶₀ #vr.26 )
                                          case ChanOut_OP_case_1
                                          solve( !KU( ~cont_i ) @ #vk )
                                            case LookA
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case ChanOut_OP_case_2
                                          by contradiction /* from formulas */
                                        qed
                                      next
                                        case ChanOut_OP_case_2
                                        by contradiction /* from formulas */
                                      qed
                                    qed
                                  next
                                    case ChanOut_OP_case_2
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case ChanOut_OP_case_2
                                  by contradiction /* from formulas */
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ChanOut_OO_case_3
                      by contradiction /* from formulas */
                    qed
                  next
                    case ChanOut_OO_case_2
                    solve( (∃ #j. (Type( $Cu.4, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                           (∃ #j. (Type( $Cu.4, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                      case case_1
                      solve( (∃ #j. (Type( $Cu.4, 'customer' ) @ #j) ∧ #j < #vr.12)  ∥
                             (∃ #j. (Type( $Cu.4, 'cashier' ) @ #j) ∧ #j < #vr.12) )
                        case case_1
                        solve( (∃ #j. (Type( $Cu.4, 'customer' ) @ #j) ∧ #j < #vr.13)  ∥
                               (∃ #j. (Type( $Cu.4, 'cashier' ) @ #j) ∧ #j < #vr.13) )
                          case case_1
                          solve( (∃ #j. (Type( $Cu.4, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                                 (∃ #j. (Type( $Cu.4, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                            case case_1
                            solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
                              case ChanIn_O
                              solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.15 )
                                case ChanOut_OP_case_1
                                solve( Pos( $V.2, $Cu, receipt(~barcode_i) ) ▶₀ #vr.18 )
                                  case ChanOut_OP_case_1
                                  solve( In_O( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                    case ChanIn_O
                                    solve( Pos( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.20 )
                                      case ChanOut_OP_case_1
                                      solve( Pos( $V.2, $Cu.1, receipt(~barcode_i.1) ) ▶₀ #vr.23 )
                                        case ChanOut_OP_case_1
                                        solve( !KU( ~cont_i ) @ #vk )
                                          case LookA
                                          by contradiction /* from formulas */
                                        qed
                                      next
                                        case ChanOut_OP_case_2
                                        by contradiction /* from formulas */
                                      qed
                                    next
                                      case ChanOut_OP_case_2
                                      by contradiction /* from formulas */
                                    qed
                                  qed
                                next
                                  case ChanOut_OP_case_2
                                  by contradiction /* from formulas */
                                qed
                              next
                                case ChanOut_OP_case_2
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case ChanOut_OO_case_3
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case ChanOut_OO_case_3
        by contradiction /* from formulas */
      qed
    next
      case case_2
      solve( Pos( $Cu.2, $V, object(~cont_i) ) ▶₀ #vr.2 )
        case ChanOut_OO_case_1
        solve( Pos( $S.1, $Cu.2, object(~cont_i) ) ▶₀ #vr.5 )
          case ChanOut_OO_case_1
          solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
            case 3Output
            solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.8 )
              case ChanOut_OO_case_1
              solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.11 )
                case ChanOut_OO_case_1
                by contradiction /* cyclic */
              next
                case ChanOut_OO_case_2
                solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.13)  ∥
                       (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.13) )
                  case case_1
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                    case case_1
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.15)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.15) )
                      case case_1
                      solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.16)  ∥
                             (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.16) )
                        case case_1
                        solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
                          case ChanIn_O
                          solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.17 )
                            case ChanOut_OP_case_1
                            solve( Pos( $V.2, $Cu, receipt(~barcode_i) ) ▶₀ #vr.20 )
                              case ChanOut_OP_case_1
                              solve( In_O( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                case ChanIn_O
                                solve( Pos( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.22 )
                                  case ChanOut_OP_case_1
                                  solve( Pos( $V.2, $Cu.1, receipt(~barcode_i.1) ) ▶₀ #vr.25 )
                                    case ChanOut_OP_case_1
                                    solve( !KU( ~cont_i ) @ #vk )
                                      case LookA
                                      by contradiction /* from formulas */
                                    qed
                                  next
                                    case ChanOut_OP_case_2
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case ChanOut_OP_case_2
                                  by contradiction /* from formulas */
                                qed
                              qed
                            next
                              case ChanOut_OP_case_2
                              by contradiction /* from formulas */
                            qed
                          next
                            case ChanOut_OP_case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                    case case_2
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.15)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.15) )
                      case case_2
                      solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.16)  ∥
                             (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.16) )
                        case case_2
                        solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
                          case ChanIn_O
                          solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.17 )
                            case ChanOut_OP_case_1
                            solve( Pos( $V.2, $Cu, receipt(~barcode_i) ) ▶₀ #vr.20 )
                              case ChanOut_OP_case_1
                              solve( In_O( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                case ChanIn_O
                                solve( Pos( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.22 )
                                  case ChanOut_OP_case_1
                                  solve( Pos( $V.2, $Cu.1, receipt(~barcode_i.1) ) ▶₀ #vr.25 )
                                    case ChanOut_OP_case_1
                                    solve( !KU( ~cont_i ) @ #vk )
                                      case LookA
                                      by contradiction /* from formulas */
                                    qed
                                  next
                                    case ChanOut_OP_case_2
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case ChanOut_OP_case_2
                                  by contradiction /* from formulas */
                                qed
                              qed
                            next
                              case ChanOut_OP_case_2
                              by contradiction /* from formulas */
                            qed
                          next
                            case ChanOut_OP_case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case ChanOut_OO_case_3
                by contradiction /* from formulas */
              qed
            next
              case ChanOut_OO_case_2
              solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                     (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.10) )
                case case_1
                solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                       (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                  case case_1
                  solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.12)  ∥
                         (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.12) )
                    case case_1
                    solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.13)  ∥
                           (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.13) )
                      case case_1
                      solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
                        case ChanIn_O
                        solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.14 )
                          case ChanOut_OP_case_1
                          solve( Pos( $V.2, $Cu, receipt(~barcode_i) ) ▶₀ #vr.17 )
                            case ChanOut_OP_case_1
                            solve( In_O( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                              case ChanIn_O
                              solve( Pos( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.19 )
                                case ChanOut_OP_case_1
                                solve( Pos( $V.2, $Cu.1, receipt(~barcode_i.1) ) ▶₀ #vr.22 )
                                  case ChanOut_OP_case_1
                                  solve( !KU( ~cont_i ) @ #vk )
                                    case LookA
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case ChanOut_OP_case_2
                                  by contradiction /* from formulas */
                                qed
                              next
                                case ChanOut_OP_case_2
                                by contradiction /* from formulas */
                              qed
                            qed
                          next
                            case ChanOut_OP_case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case ChanOut_OP_case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case ChanOut_OO_case_3
              by contradiction /* from formulas */
            qed
          qed
        next
          case ChanOut_OO_case_2
          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.7)  ∥
                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.7) )
            case case_1
            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.8) )
              case case_1
              solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.9)  ∥
                     (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.9) )
                case case_1
                solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                       (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.10) )
                  case case_1
                  solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                    case 3Output
                    solve( Pos( $Cu.4, $V.1, object(~cont_i) ) ▶₀ #vr.12 )
                      case ChanOut_OO_case_1
                      solve( Pos( $S.2, $Cu.4, object(~cont_i) ) ▶₀ #vr.15 )
                        case ChanOut_OO_case_1
                        solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
                          case ChanIn_O
                          solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.17 )
                            case ChanOut_OP_case_1
                            solve( Pos( $V.2, $Cu, receipt(~barcode_i) ) ▶₀ #vr.20 )
                              case ChanOut_OP_case_1
                              solve( In_O( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                case ChanIn_O
                                solve( Pos( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.22 )
                                  case ChanOut_OP_case_1
                                  solve( Pos( $V.2, $Cu.1, receipt(~barcode_i.1) ) ▶₀ #vr.25 )
                                    case ChanOut_OP_case_1
                                    solve( !KU( ~cont_i ) @ #vk )
                                      case LookA
                                      by contradiction /* from formulas */
                                    qed
                                  next
                                    case ChanOut_OP_case_2
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case ChanOut_OP_case_2
                                  by contradiction /* from formulas */
                                qed
                              qed
                            next
                              case ChanOut_OP_case_2
                              by contradiction /* from formulas */
                            qed
                          next
                            case ChanOut_OP_case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case ChanOut_OO_case_2
                        solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                               (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                          case case_1
                          solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.18)  ∥
                                 (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.18) )
                            case case_1
                            solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.19)  ∥
                                   (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.19) )
                              case case_1
                              solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.20)  ∥
                                     (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.20) )
                                case case_1
                                solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
                                  case ChanIn_O
                                  solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.21 )
                                    case ChanOut_OP_case_1
                                    solve( Pos( $V.2, $Cu, receipt(~barcode_i) ) ▶₀ #vr.24 )
                                      case ChanOut_OP_case_1
                                      solve( In_O( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                        case ChanIn_O
                                        solve( Pos( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.26 )
                                          case ChanOut_OP_case_1
                                          solve( Pos( $V.2, $Cu.1, receipt(~barcode_i.1) ) ▶₀ #vr.29 )
                                            case ChanOut_OP_case_1
                                            solve( !KU( ~cont_i ) @ #vk )
                                              case LookA
                                              by contradiction /* from formulas */
                                            qed
                                          next
                                            case ChanOut_OP_case_2
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case ChanOut_OP_case_2
                                          by contradiction /* from formulas */
                                        qed
                                      qed
                                    next
                                      case ChanOut_OP_case_2
                                      by contradiction /* from formulas */
                                    qed
                                  next
                                    case ChanOut_OP_case_2
                                    by contradiction /* from formulas */
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.18)  ∥
                                 (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.18) )
                            case case_2
                            solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.19)  ∥
                                   (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.19) )
                              case case_2
                              solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.20)  ∥
                                     (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.20) )
                                case case_2
                                solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
                                  case ChanIn_O
                                  solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.21 )
                                    case ChanOut_OP_case_1
                                    solve( Pos( $V.2, $Cu, receipt(~barcode_i) ) ▶₀ #vr.24 )
                                      case ChanOut_OP_case_1
                                      solve( In_O( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                        case ChanIn_O
                                        solve( Pos( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.26 )
                                          case ChanOut_OP_case_1
                                          solve( Pos( $V.2, $Cu.1, receipt(~barcode_i.1) ) ▶₀ #vr.29 )
                                            case ChanOut_OP_case_1
                                            solve( !KU( ~cont_i ) @ #vk )
                                              case LookA
                                              by contradiction /* from formulas */
                                            qed
                                          next
                                            case ChanOut_OP_case_2
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case ChanOut_OP_case_2
                                          by contradiction /* from formulas */
                                        qed
                                      qed
                                    next
                                      case ChanOut_OP_case_2
                                      by contradiction /* from formulas */
                                    qed
                                  next
                                    case ChanOut_OP_case_2
                                    by contradiction /* from formulas */
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case ChanOut_OO_case_3
                        by contradiction /* from formulas */
                      qed
                    next
                      case ChanOut_OO_case_2
                      solve( (∃ #j. (Type( $Cu.4, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                             (∃ #j. (Type( $Cu.4, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                        case case_1
                        solve( (∃ #j. (Type( $Cu.4, 'customer' ) @ #j) ∧ #j < #vr.15)  ∥
                               (∃ #j. (Type( $Cu.4, 'cashier' ) @ #j) ∧ #j < #vr.15) )
                          case case_1
                          solve( (∃ #j. (Type( $Cu.4, 'customer' ) @ #j) ∧ #j < #vr.16)  ∥
                                 (∃ #j. (Type( $Cu.4, 'cashier' ) @ #j) ∧ #j < #vr.16) )
                            case case_1
                            solve( (∃ #j. (Type( $Cu.4, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                                   (∃ #j. (Type( $Cu.4, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                              case case_1
                              solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
                                case ChanIn_O
                                solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.18 )
                                  case ChanOut_OP_case_1
                                  solve( Pos( $V.2, $Cu, receipt(~barcode_i) ) ▶₀ #vr.21 )
                                    case ChanOut_OP_case_1
                                    solve( In_O( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                      case ChanIn_O
                                      solve( Pos( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.23 )
                                        case ChanOut_OP_case_1
                                        solve( Pos( $V.2, $Cu.1, receipt(~barcode_i.1) ) ▶₀ #vr.26 )
                                          case ChanOut_OP_case_1
                                          solve( !KU( ~cont_i ) @ #vk )
                                            case LookA
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case ChanOut_OP_case_2
                                          by contradiction /* from formulas */
                                        qed
                                      next
                                        case ChanOut_OP_case_2
                                        by contradiction /* from formulas */
                                      qed
                                    qed
                                  next
                                    case ChanOut_OP_case_2
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case ChanOut_OP_case_2
                                  by contradiction /* from formulas */
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ChanOut_OO_case_3
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          next
            case case_2
            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.8) )
              case case_2
              solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.9)  ∥
                     (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.9) )
                case case_2
                solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                       (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.10) )
                  case case_2
                  solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                    case 3Output
                    solve( Pos( $Cu.4, $V.1, object(~cont_i) ) ▶₀ #vr.12 )
                      case ChanOut_OO_case_1
                      solve( Pos( $S.2, $Cu.4, object(~cont_i) ) ▶₀ #vr.15 )
                        case ChanOut_OO_case_1
                        solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
                          case ChanIn_O
                          solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.17 )
                            case ChanOut_OP_case_1
                            solve( Pos( $V.2, $Cu, receipt(~barcode_i) ) ▶₀ #vr.20 )
                              case ChanOut_OP_case_1
                              solve( In_O( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                case ChanIn_O
                                solve( Pos( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.22 )
                                  case ChanOut_OP_case_1
                                  solve( Pos( $V.2, $Cu.1, receipt(~barcode_i.1) ) ▶₀ #vr.25 )
                                    case ChanOut_OP_case_1
                                    solve( !KU( ~cont_i ) @ #vk )
                                      case LookA
                                      by contradiction /* from formulas */
                                    qed
                                  next
                                    case ChanOut_OP_case_2
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case ChanOut_OP_case_2
                                  by contradiction /* from formulas */
                                qed
                              qed
                            next
                              case ChanOut_OP_case_2
                              by contradiction /* from formulas */
                            qed
                          next
                            case ChanOut_OP_case_2
                            by contradiction /* from formulas */
                          qed
                        qed
                      next
                        case ChanOut_OO_case_2
                        solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                               (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                          case case_1
                          solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.18)  ∥
                                 (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.18) )
                            case case_1
                            solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.19)  ∥
                                   (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.19) )
                              case case_1
                              solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.20)  ∥
                                     (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.20) )
                                case case_1
                                solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
                                  case ChanIn_O
                                  solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.21 )
                                    case ChanOut_OP_case_1
                                    solve( Pos( $V.2, $Cu, receipt(~barcode_i) ) ▶₀ #vr.24 )
                                      case ChanOut_OP_case_1
                                      solve( In_O( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                        case ChanIn_O
                                        solve( Pos( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.26 )
                                          case ChanOut_OP_case_1
                                          solve( Pos( $V.2, $Cu.1, receipt(~barcode_i.1) ) ▶₀ #vr.29 )
                                            case ChanOut_OP_case_1
                                            solve( !KU( ~cont_i ) @ #vk )
                                              case LookA
                                              by contradiction /* from formulas */
                                            qed
                                          next
                                            case ChanOut_OP_case_2
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case ChanOut_OP_case_2
                                          by contradiction /* from formulas */
                                        qed
                                      qed
                                    next
                                      case ChanOut_OP_case_2
                                      by contradiction /* from formulas */
                                    qed
                                  next
                                    case ChanOut_OP_case_2
                                    by contradiction /* from formulas */
                                  qed
                                qed
                              qed
                            qed
                          qed
                        next
                          case case_2
                          solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.18)  ∥
                                 (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.18) )
                            case case_2
                            solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.19)  ∥
                                   (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.19) )
                              case case_2
                              solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.20)  ∥
                                     (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.20) )
                                case case_2
                                solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
                                  case ChanIn_O
                                  solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.21 )
                                    case ChanOut_OP_case_1
                                    solve( Pos( $V.2, $Cu, receipt(~barcode_i) ) ▶₀ #vr.24 )
                                      case ChanOut_OP_case_1
                                      solve( In_O( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                        case ChanIn_O
                                        solve( Pos( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.26 )
                                          case ChanOut_OP_case_1
                                          solve( Pos( $V.2, $Cu.1, receipt(~barcode_i.1) ) ▶₀ #vr.29 )
                                            case ChanOut_OP_case_1
                                            solve( !KU( ~cont_i ) @ #vk )
                                              case LookA
                                              by contradiction /* from formulas */
                                            qed
                                          next
                                            case ChanOut_OP_case_2
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case ChanOut_OP_case_2
                                          by contradiction /* from formulas */
                                        qed
                                      qed
                                    next
                                      case ChanOut_OP_case_2
                                      by contradiction /* from formulas */
                                    qed
                                  next
                                    case ChanOut_OP_case_2
                                    by contradiction /* from formulas */
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case ChanOut_OO_case_3
                        by contradiction /* from formulas */
                      qed
                    next
                      case ChanOut_OO_case_2
                      solve( (∃ #j. (Type( $Cu.4, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                             (∃ #j. (Type( $Cu.4, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                        case case_1
                        solve( (∃ #j. (Type( $Cu.4, 'customer' ) @ #j) ∧ #j < #vr.15)  ∥
                               (∃ #j. (Type( $Cu.4, 'cashier' ) @ #j) ∧ #j < #vr.15) )
                          case case_1
                          solve( (∃ #j. (Type( $Cu.4, 'customer' ) @ #j) ∧ #j < #vr.16)  ∥
                                 (∃ #j. (Type( $Cu.4, 'cashier' ) @ #j) ∧ #j < #vr.16) )
                            case case_1
                            solve( (∃ #j. (Type( $Cu.4, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                                   (∃ #j. (Type( $Cu.4, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                              case case_1
                              solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
                                case ChanIn_O
                                solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.18 )
                                  case ChanOut_OP_case_1
                                  solve( Pos( $V.2, $Cu, receipt(~barcode_i) ) ▶₀ #vr.21 )
                                    case ChanOut_OP_case_1
                                    solve( In_O( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                      case ChanIn_O
                                      solve( Pos( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.23 )
                                        case ChanOut_OP_case_1
                                        solve( Pos( $V.2, $Cu.1, receipt(~barcode_i.1) ) ▶₀ #vr.26 )
                                          case ChanOut_OP_case_1
                                          solve( !KU( ~cont_i ) @ #vk )
                                            case LookA
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case ChanOut_OP_case_2
                                          by contradiction /* from formulas */
                                        qed
                                      next
                                        case ChanOut_OP_case_2
                                        by contradiction /* from formulas */
                                      qed
                                    qed
                                  next
                                    case ChanOut_OP_case_2
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case ChanOut_OP_case_2
                                  by contradiction /* from formulas */
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ChanOut_OO_case_3
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case ChanOut_OO_case_3
          by contradiction /* from formulas */
        qed
      next
        case ChanOut_OO_case_2
        solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.4)  ∥
               (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.4) )
          case case_1
          solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.5)  ∥
                 (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.5) )
            case case_1
            solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.6)  ∥
                   (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.6) )
              case case_1
              solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.7)  ∥
                     (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.7) )
                case case_1
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.4, $V.1, object(~cont_i) ) ▶₀ #vr.9 )
                    case ChanOut_OO_case_1
                    solve( Pos( $S.1, $Cu.4, object(~cont_i) ) ▶₀ #vr.12 )
                      case ChanOut_OO_case_1
                      solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
                        case ChanIn_O
                        solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.14 )
                          case ChanOut_OP_case_1
                          solve( Pos( $V.2, $Cu, receipt(~barcode_i) ) ▶₀ #vr.17 )
                            case ChanOut_OP_case_1
                            solve( In_O( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                              case ChanIn_O
                              solve( Pos( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.19 )
                                case ChanOut_OP_case_1
                                solve( Pos( $V.2, $Cu.1, receipt(~barcode_i.1) ) ▶₀ #vr.22 )
                                  case ChanOut_OP_case_1
                                  solve( !KU( ~cont_i ) @ #vk )
                                    case LookA
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case ChanOut_OP_case_2
                                  by contradiction /* from formulas */
                                qed
                              next
                                case ChanOut_OP_case_2
                                by contradiction /* from formulas */
                              qed
                            qed
                          next
                            case ChanOut_OP_case_2
                            by contradiction /* from formulas */
                          qed
                        next
                          case ChanOut_OP_case_2
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case ChanOut_OO_case_2
                      solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                             (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                        case case_1
                        solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.15)  ∥
                               (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.15) )
                          case case_1
                          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.16)  ∥
                                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.16) )
                            case case_1
                            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                              case case_1
                              solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
                                case ChanIn_O
                                solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.18 )
                                  case ChanOut_OP_case_1
                                  solve( Pos( $V.2, $Cu, receipt(~barcode_i) ) ▶₀ #vr.21 )
                                    case ChanOut_OP_case_1
                                    solve( In_O( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                      case ChanIn_O
                                      solve( Pos( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.23 )
                                        case ChanOut_OP_case_1
                                        solve( Pos( $V.2, $Cu.1, receipt(~barcode_i.1) ) ▶₀ #vr.26 )
                                          case ChanOut_OP_case_1
                                          solve( !KU( ~cont_i ) @ #vk )
                                            case LookA
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case ChanOut_OP_case_2
                                          by contradiction /* from formulas */
                                        qed
                                      next
                                        case ChanOut_OP_case_2
                                        by contradiction /* from formulas */
                                      qed
                                    qed
                                  next
                                    case ChanOut_OP_case_2
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case ChanOut_OP_case_2
                                  by contradiction /* from formulas */
                                qed
                              qed
                            qed
                          qed
                        qed
                      next
                        case case_2
                        solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.15)  ∥
                               (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.15) )
                          case case_2
                          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.16)  ∥
                                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.16) )
                            case case_2
                            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                              case case_2
                              solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
                                case ChanIn_O
                                solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.18 )
                                  case ChanOut_OP_case_1
                                  solve( Pos( $V.2, $Cu, receipt(~barcode_i) ) ▶₀ #vr.21 )
                                    case ChanOut_OP_case_1
                                    solve( In_O( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                      case ChanIn_O
                                      solve( Pos( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.23 )
                                        case ChanOut_OP_case_1
                                        solve( Pos( $V.2, $Cu.1, receipt(~barcode_i.1) ) ▶₀ #vr.26 )
                                          case ChanOut_OP_case_1
                                          solve( !KU( ~cont_i ) @ #vk )
                                            case LookA
                                            by contradiction /* from formulas */
                                          qed
                                        next
                                          case ChanOut_OP_case_2
                                          by contradiction /* from formulas */
                                        qed
                                      next
                                        case ChanOut_OP_case_2
                                        by contradiction /* from formulas */
                                      qed
                                    qed
                                  next
                                    case ChanOut_OP_case_2
                                    by contradiction /* from formulas */
                                  qed
                                next
                                  case ChanOut_OP_case_2
                                  by contradiction /* from formulas */
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    next
                      case ChanOut_OO_case_3
                      by contradiction /* from formulas */
                    qed
                  next
                    case ChanOut_OO_case_2
                    solve( (∃ #j. (Type( $Cu.4, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                           (∃ #j. (Type( $Cu.4, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                      case case_1
                      solve( (∃ #j. (Type( $Cu.4, 'customer' ) @ #j) ∧ #j < #vr.12)  ∥
                             (∃ #j. (Type( $Cu.4, 'cashier' ) @ #j) ∧ #j < #vr.12) )
                        case case_1
                        solve( (∃ #j. (Type( $Cu.4, 'customer' ) @ #j) ∧ #j < #vr.13)  ∥
                               (∃ #j. (Type( $Cu.4, 'cashier' ) @ #j) ∧ #j < #vr.13) )
                          case case_1
                          solve( (∃ #j. (Type( $Cu.4, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                                 (∃ #j. (Type( $Cu.4, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                            case case_1
                            solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
                              case ChanIn_O
                              solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.15 )
                                case ChanOut_OP_case_1
                                solve( Pos( $V.2, $Cu, receipt(~barcode_i) ) ▶₀ #vr.18 )
                                  case ChanOut_OP_case_1
                                  solve( In_O( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                    case ChanIn_O
                                    solve( Pos( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.20 )
                                      case ChanOut_OP_case_1
                                      solve( Pos( $V.2, $Cu.1, receipt(~barcode_i.1) ) ▶₀ #vr.23 )
                                        case ChanOut_OP_case_1
                                        solve( !KU( ~cont_i ) @ #vk )
                                          case LookA
                                          by contradiction /* from formulas */
                                        qed
                                      next
                                        case ChanOut_OP_case_2
                                        by contradiction /* from formulas */
                                      qed
                                    next
                                      case ChanOut_OP_case_2
                                      by contradiction /* from formulas */
                                    qed
                                  qed
                                next
                                  case ChanOut_OP_case_2
                                  by contradiction /* from formulas */
                                qed
                              next
                                case ChanOut_OP_case_2
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case ChanOut_OO_case_3
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case ChanOut_OO_case_3
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma cashforpurchaseCustNetto:
  all-traces
  "∀ ca cu c bar #i.
    ((Cash( ca, cu, c, bar ) @ #i) ∧
     (((¬(∃ h x #k. Chatty( h, x ) @ #k)) ∧
       (¬(∃ h x #k. Cocky( h, x ) @ #k))) ∨
      (((¬(∃ x #k. PrintA( x ) @ #k)) ∧ (¬(∃ h x #k. Cocky( h, x ) @ #k))) ∧
       (¬(∃ x #k. BuildA( x ) @ #k))))) ⇒
    (∃ s #j.
      ((Purchase( s, cu, c ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ s1 #j2. (Purchase( s1, cu, c ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  ((((∀ h x #k. (Chatty( h, x ) @ #k) ⇒ ⊥) ∧
     (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥)) ∨
    ((∀ x #k. (PrintA( x ) @ #k) ⇒ ⊥) ∧
     (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥) ∧
     (∀ x #k. (BuildA( x ) @ #k) ⇒ ⊥)))) ∧
  (∀ s #j.
    (Purchase( s, cu, c ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     ((∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ ¬(#i = #i2)) ∧
      (∀ s1 #j2. (Purchase( s1, cu, c ) @ #j2) ⇒ #j = #j2))))"
*/
simplify
solve( ((∀ h x #k. (Chatty( h, x ) @ #k) ⇒ ⊥) ∧
        (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥))  ∥
       ((∀ x #k. (PrintA( x ) @ #k) ⇒ ⊥) ∧
        (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥) ∧
        (∀ x #k. (BuildA( x ) @ #k) ⇒ ⊥)) )
  case case_1
  solve( Info( bar, c ) ▶₁ #i )
    case 3Output
    solve( Pos( $Cu.1, $V, object(~cont_i) ) ▶₀ #vr.2 )
      case ChanOut_OO_case_1
      solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.5 )
        case ChanOut_OO_case_1
        solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
          case ChanIn_O
          solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.7 )
            case ChanOut_OP_case_1
            solve( Pos( $V.1, $Cu, receipt(~barcode_i) ) ▶₀ #vr.10 )
              case ChanOut_OP_case_1
              solve( (#i < #i2)  ∥ (#i2 < #i) )
                case case_1
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO_case_1
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO_case_1
                      by contradiction /* cyclic */
                    next
                      case ChanOut_OO_case_2
                      solve( !KU( ~cont_i ) @ #vk )
                        case LookA
                        by contradiction /* from formulas */
                      qed
                    next
                      case ChanOut_OO_case_3
                      by contradiction /* from formulas */
                    qed
                  next
                    case ChanOut_OO_case_2
                    solve( !KU( ~cont_i ) @ #vk )
                      case LookA
                      by contradiction /* from formulas */
                    qed
                  next
                    case ChanOut_OO_case_3
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case case_2
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO_case_1
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO_case_1
                      by contradiction /* cyclic */
                    next
                      case ChanOut_OO_case_2
                      solve( !KU( ~cont_i ) @ #vk )
                        case LookA
                        by contradiction /* from formulas */
                      qed
                    next
                      case ChanOut_OO_case_3
                      by contradiction /* from formulas */
                    qed
                  next
                    case ChanOut_OO_case_2
                    solve( !KU( ~cont_i ) @ #vk )
                      case LookA
                      by contradiction /* from formulas */
                    qed
                  next
                    case ChanOut_OO_case_3
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case ChanOut_OP_case_2
              by contradiction /* from formulas */
            qed
          next
            case ChanOut_OP_case_2
            by contradiction /* from formulas */
          qed
        qed
      next
        case ChanOut_OO_case_2
        solve( !KU( ~cont_i ) @ #vk )
          case LookA
          by contradiction /* from formulas */
        qed
      next
        case ChanOut_OO_case_3
        by contradiction /* from formulas */
      qed
    next
      case ChanOut_OO_case_2
      solve( !KU( ~cont_i ) @ #vk )
        case LookA
        by contradiction /* from formulas */
      qed
    next
      case ChanOut_OO_case_3
      by contradiction /* from formulas */
    qed
  qed
next
  case case_2
  solve( Info( bar, c ) ▶₁ #i )
    case 3Output
    solve( Pos( $Cu.1, $V, object(~cont_i) ) ▶₀ #vr.2 )
      case ChanOut_OO_case_1
      solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.5 )
        case ChanOut_OO_case_1
        solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
          case ChanIn_O
          solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.7 )
            case ChanOut_OP_case_1
            solve( Pos( $V.1, $Cu, receipt(~barcode_i) ) ▶₀ #vr.10 )
              case ChanOut_OP_case_1
              solve( (#i < #i2)  ∥ (#i2 < #i) )
                case case_1
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO_case_1
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO_case_1
                      by contradiction /* cyclic */
                    next
                      case ChanOut_OO_case_2
                      by contradiction /* from formulas */
                    next
                      case ChanOut_OO_case_3
                      by contradiction /* from formulas */
                    qed
                  next
                    case ChanOut_OO_case_2
                    by contradiction /* from formulas */
                  next
                    case ChanOut_OO_case_3
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case case_2
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO_case_1
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO_case_1
                      by contradiction /* cyclic */
                    next
                      case ChanOut_OO_case_2
                      by contradiction /* from formulas */
                    next
                      case ChanOut_OO_case_3
                      by contradiction /* from formulas */
                    qed
                  next
                    case ChanOut_OO_case_2
                    by contradiction /* from formulas */
                  next
                    case ChanOut_OO_case_3
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case ChanOut_OP_case_2
              by contradiction /* from formulas */
            qed
          next
            case ChanOut_OP_case_2
            by contradiction /* from formulas */
          qed
        qed
      next
        case ChanOut_OO_case_2
        by contradiction /* from formulas */
      next
        case ChanOut_OO_case_3
        by contradiction /* from formulas */
      qed
    next
      case ChanOut_OO_case_2
      by contradiction /* from formulas */
    next
      case ChanOut_OO_case_3
      by contradiction /* from formulas */
    qed
  qed
qed

lemma cashforpurchaseCustNettoAttack:
  all-traces
  "∀ ca cu c bar #i.
    (Cash( ca, cu, c, bar ) @ #i) ⇒
    (∃ s #j.
      ((Purchase( s, cu, c ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ s1 #j2. (Purchase( s1, cu, c ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  ∀ s #j.
   (Purchase( s, cu, c ) @ #j)
  ⇒
   ((¬(#j < #i)) ∨
    ((∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ ¬(#i = #i2)) ∧
     (∀ s1 #j2. (Purchase( s1, cu, c ) @ #j2) ⇒ #j = #j2)))"
*/
simplify
solve( Info( bar, c ) ▶₁ #i )
  case 3Output
  solve( Pos( $Cu.1, $V, object(~cont_i) ) ▶₀ #vr.2 )
    case ChanOut_OO_case_1
    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.5 )
      case ChanOut_OO_case_1
      solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
        case ChanIn_O
        solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.7 )
          case ChanOut_OP_case_2
          solve( (∃ #j. (Type( $Cu, 'customer' ) @ #j) ∧ #j < #vr.9)  ∥
                 (∃ #j. (Type( $Cu, 'cashier' ) @ #j) ∧ #j < #vr.9) )
            case case_1
            solve( (∃ #j. (Type( $Cu, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                   (∃ #j. (Type( $Cu, 'cashier' ) @ #j) ∧ #j < #vr.10) )
              case case_1
              solve( (∃ #j. (Type( $Cu, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                     (∃ #j. (Type( $Cu, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                case case_1
                solve( (∃ #j. (Type( $Cu, 'customer' ) @ #j) ∧ #j < #vr.12)  ∥
                       (∃ #j. (Type( $Cu, 'cashier' ) @ #j) ∧ #j < #vr.12) )
                  case case_1
                  solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.13)  ∥
                         (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.13) )
                    case case_1
                    solve( (∃ #j. (Type( $Cu, 'customer' ) @ #j) ∧ #j < #vr.13)  ∥
                           (∃ #j. (Type( $Cu, 'cashier' ) @ #j) ∧ #j < #vr.13) )
                      case case_1
                      solve( Pos( $A.1, $A, receipt(~barcode_i) ) ▶₀ #vr.13 )
                        case ChanOut_OP
                        solve( Type( $Cu, 'customer' ) @ #j )
                          case 1Purchase
                          solve( Type( $Cu, 'customer' ) @ #j.1 )
                            case 1Purchase
                            solve( Type( $Cu, 'customer' ) @ #j.2 )
                              case 1Purchase
                              solve( Type( $Cu, 'customer' ) @ #j.3 )
                                case 1Purchase
                                solve( Type( $A, 'customer' ) @ #j.4 )
                                  case 1Purchase
                                  solve( Type( $Cu, 'customer' ) @ #j.5 )
                                    case 1Purchase
                                    SOLVED // trace found
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma cashforpurchaseNettoAttack:
  all-traces
  "∀ ca cu c bar #i.
    (Cash( ca, cu, c, bar ) @ #i) ⇒
    (∃ s cu1 #j.
      ((Purchase( s, cu1, c ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ ca1 cu2 bar2 #i2.
           (Cash( ca1, cu2, c, bar2 ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ s1 cu3 #j2. (Purchase( s1, cu3, c ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  ∀ s cu1 #j.
   (Purchase( s, cu1, c ) @ #j)
  ⇒
   ((¬(#j < #i)) ∨
    ((∃ ca1 cu2 bar2 #i2. (Cash( ca1, cu2, c, bar2 ) @ #i2) ∧ ¬(#i = #i2)) ∧
     (∀ s1 cu3 #j2. (Purchase( s1, cu3, c ) @ #j2) ⇒ #j = #j2)))"
*/
simplify
solve( Info( bar, c ) ▶₁ #i )
  case 3Output
  solve( (#i < #i2)  ∥ (#i2 < #i) )
    case case_1
    solve( Pos( $Cu.2, $V, object(~cont_i) ) ▶₀ #vr.2 )
      case ChanOut_OO_case_1
      solve( Pos( $S.1, $Cu.2, object(~cont_i) ) ▶₀ #vr.5 )
        case ChanOut_OO_case_2
        solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.7)  ∥
               (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.7) )
          case case_1
          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.8) )
            case case_1
            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.9)  ∥
                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.9) )
              case case_1
              solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                     (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.10) )
                case case_1
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.4, $V.1, object(~cont_i) ) ▶₀ #vr.12 )
                    case ChanOut_OO_case_1
                    solve( Pos( $S.2, $Cu.4, object(~cont_i) ) ▶₀ #vr.15 )
                      case ChanOut_OO_case_2
                      solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                             (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                        case case_1
                        solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.18)  ∥
                               (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.18) )
                          case case_1
                          solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.19)  ∥
                                 (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.19) )
                            case case_1
                            solve( (∃ #j. (Type( $S.2, 'customer' ) @ #j) ∧ #j < #vr.20)  ∥
                                   (∃ #j. (Type( $S.2, 'cashier' ) @ #j) ∧ #j < #vr.20) )
                              case case_1
                              solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
                                case ChanIn_O
                                solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.21 )
                                  case ChanOut_OP_case_1
                                  solve( Pos( $V.2, $Cu, receipt(~barcode_i) ) ▶₀ #vr.24 )
                                    case ChanOut_OP_case_1
                                    solve( In_O( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #i2 )
                                      case ChanIn_O
                                      solve( Pos( $Cu.1, $Ca.1, receipt(~barcode_i.1) ) ▶₀ #vr.26 )
                                        case ChanOut_OP_case_1
                                        solve( Pos( $V.2, $Cu.1, receipt(~barcode_i.1) ) ▶₀ #vr.29 )
                                          case ChanOut_OP_case_1
                                          solve( !KU( ~cont_i ) @ #vk )
                                            case LookA
                                            solve( (∃ #j. (Type( $Att, 'customer' ) @ #j) ∧ #j < #vr.31)  ∥
                                                   (∃ #j. (Type( $Att, 'cashier' ) @ #j) ∧ #j < #vr.31) )
                                              case case_1
                                              solve( (∃ #j. (Type( $Att, 'customer' ) @ #j) ∧ #j < #vr.32)  ∥
                                                     (∃ #j. (Type( $Att, 'cashier' ) @ #j) ∧ #j < #vr.32) )
                                                case case_1
                                                solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.33)  ∥
                                                       (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.33) )
                                                  case case_1
                                                  solve( (∃ #j.
                                                           (Type( $Att, 'customer' ) @ #j) ∧ #j < #vr.33)  ∥
                                                         (∃ #j.
                                                           (Type( $Att, 'cashier' ) @ #j) ∧ #j < #vr.33) )
                                                    case case_1
                                                    solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.33 )
                                                      case ChanOut_OO_case_1
                                                      solve( Type( $S.1, 'customer' ) @ #j )
                                                        case 1Purchase
                                                        solve( Type( $S.1, 'customer' ) @ #j.1 )
                                                          case 1Purchase
                                                          solve( Type( $S.1, 'customer' ) @ #j.2 )
                                                            case 1Purchase
                                                            solve( Type( $S.1, 'customer' ) @ #j.3 )
                                                              case 1Purchase
                                                              solve( Type( $S.6, 'customer' ) @ #j.4 )
                                                                case 1Purchase
                                                                solve( Type( $S.7, 'customer' ) @ #j.5 )
                                                                  case 1Purchase
                                                                  solve( Type( $S.7, 'customer' ) @ #j.6 )
                                                                    case 1Purchase
                                                                    solve( Type( $S.7, 'customer' ) @ #j.7 )
                                                                      case 1Purchase
                                                                      solve( Type( $Att, 'customer' ) @ #j.8 )
                                                                        case 1Purchase
                                                                        solve( Type( $Att, 'customer'
                                                                               ) @ #j.9 )
                                                                          case 1Purchase
                                                                          solve( Type( $A, 'customer'
                                                                                 ) @ #j.10 )
                                                                            case 1Purchase
                                                                            solve( Type( $Att, 'customer'
                                                                                   ) @ #j.11 )
                                                                              case 1Purchase
                                                                              SOLVED // trace found
                                                                            qed
                                                                          qed
                                                                        qed
                                                                      qed
                                                                    qed
                                                                  qed
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma cashforcontainerCustNettoAttack:
  all-traces
  "∀ ca cu c bar #i.
    (Cash( ca, cu, c, bar ) @ #i) ⇒
    (∃ #j v.
      ((GetCont( v, cu, c ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ v1 #j2. (GetCont( v1, cu, c ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  ∀ #j v.
   (GetCont( v, cu, c ) @ #j)
  ⇒
   ((¬(#j < #i)) ∨
    ((∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ ¬(#i = #i2)) ∧
     (∀ v1 #j2. (GetCont( v1, cu, c ) @ #j2) ⇒ #j = #j2)))"
*/
simplify
solve( Info( bar, c ) ▶₁ #i )
  case 3Output
  solve( Pos( $Cu.1, $V, object(~cont_i) ) ▶₀ #vr.2 )
    case ChanOut_OO_case_1
    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.5 )
      case ChanOut_OO_case_1
      solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
        case ChanIn_O
        solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.7 )
          case ChanOut_OP_case_2
          solve( (∃ #j. (Type( $Cu, 'customer' ) @ #j) ∧ #j < #vr.9)  ∥
                 (∃ #j. (Type( $Cu, 'cashier' ) @ #j) ∧ #j < #vr.9) )
            case case_1
            solve( (∃ #j. (Type( $Cu, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                   (∃ #j. (Type( $Cu, 'cashier' ) @ #j) ∧ #j < #vr.10) )
              case case_1
              solve( (∃ #j. (Type( $Cu, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                     (∃ #j. (Type( $Cu, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                case case_1
                solve( (∃ #j. (Type( $Cu, 'customer' ) @ #j) ∧ #j < #vr.12)  ∥
                       (∃ #j. (Type( $Cu, 'cashier' ) @ #j) ∧ #j < #vr.12) )
                  case case_1
                  solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.13)  ∥
                         (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.13) )
                    case case_1
                    solve( (∃ #j. (Type( $Cu, 'customer' ) @ #j) ∧ #j < #vr.13)  ∥
                           (∃ #j. (Type( $Cu, 'cashier' ) @ #j) ∧ #j < #vr.13) )
                      case case_1
                      solve( Pos( $A.1, $A, receipt(~barcode_i) ) ▶₀ #vr.13 )
                        case ChanOut_OP
                        solve( Type( $Cu, 'customer' ) @ #j )
                          case 1Purchase
                          solve( Type( $Cu, 'customer' ) @ #j.1 )
                            case 1Purchase
                            solve( Type( $Cu, 'customer' ) @ #j.2 )
                              case 1Purchase
                              solve( Type( $Cu, 'customer' ) @ #j.3 )
                                case 1Purchase
                                solve( Type( $A, 'customer' ) @ #j.4 )
                                  case 1Purchase
                                  solve( Type( $Cu, 'customer' ) @ #j.5 )
                                    case 1Purchase
                                    SOLVED // trace found
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

/*
WARNING: the following wellformedness checks failed!

Lemma actions:
  lemma `chatty' references action 
    (ProtoFact Linear "Chatty" 2,2,Linear)
  but no rule has such an action.
  
  lemma `sendcashNoAtt' references action 
    (ProtoFact Linear "Chatty" 2,2,Linear)
  but no rule has such an action.
  
  lemma `sendcashNoAtt' references action 
    (ProtoFact Linear "PrintA" 1,1,Linear)
  but no rule has such an action.
  
  lemma `cashforcontainerCustNetto' references action 
    (ProtoFact Linear "Chatty" 2,2,Linear)
  but no rule has such an action.
  
  lemma `cashforcontainerCustNetto' references action 
    (ProtoFact Linear "PrintA" 1,1,Linear)
  but no rule has such an action.
  
  lemma `cashforpurchaseNetto' references action 
    (ProtoFact Linear "Chatty" 2,2,Linear)
  but no rule has such an action.
  
  lemma `cashforpurchaseCustNetto' references action 
    (ProtoFact Linear "Chatty" 2,2,Linear)
  but no rule has such an action.
  
  lemma `cashforpurchaseCustNetto' references action 
    (ProtoFact Linear "PrintA" 1,1,Linear)
  but no rule has such an action.
*/

end

==============================================================================
summary of summaries:

analyzed: /Users/finn/Documents/Research_Project_Tamarin/TamarinAutoRunner/exampleFiles/Netto.spthy

  WARNING: 8 wellformedness check failed!
           The analysis results might be wrong!
  
  chatty (all-traces): verified (12 steps)
  readA (all-traces): verified (27 steps)
  lookA (all-traces): verified (36 steps)
  sendcashNoAtt (exists-trace): verified (8 steps)
  cashforvoucherNetto (all-traces): verified (4 steps)
  cashforcontainerNetto (all-traces): verified (4 steps)
  cashforcontainerCustNetto (all-traces): verified (654 steps)
  cashforpurchaseNetto (all-traces): verified (710 steps)
  cashforpurchaseCustNetto (all-traces): verified (66 steps)
  cashforpurchaseCustNettoAttack (all-traces): falsified - found trace (20 steps)
  cashforpurchaseNettoAttack (all-traces): falsified - found trace (41 steps)
  cashforcontainerCustNettoAttack (all-traces): falsified - found trace (20 steps)

==============================================================================
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.

theory Netto begin

// Function signature and definition of the equational theory E

functions: fst/1, get/1, look/1, object/1, pair/2, receipt/1, snd/1
equations:
    fst(<x.1, x.2>) = x.1,
    get(object(a)) = a,
    look(receipt(a)) = a,
    snd(<x.1, x.2>) = x.2



rule (modulo E) 1Purchase:
   [ Fr( ~cont_i ) ]
  --[ Type( $Cu, 'customer' ), Purchase( $S, $Cu, ~cont_i ) ]->
   [ !Container( object(~cont_i) ), Out_O( $S, $Cu, object(~cont_i) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) 3Output:
   [
   !Container( object(cont_i) ), Fr( ~barcode_i ),
   In_O( $Cu, $V, object(cont_i) )
   ]
  --[
  SendBarcode( ~barcode_i ), GetCont( $V, $Cu, cont_i ),
  Type( $Cu, 'customer' ), Type( $V, 'vending' )
  ]->
   [ Out_O( $V, $Cu, receipt(~barcode_i) ), Info( ~barcode_i, cont_i ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) 5Cash:
   [ In_O( $Cu, $Ca, receipt(barcode_i) ), Info( barcode_i, cont_i ) ]
  --[
  Cash( $Ca, $Cu, cont_i, barcode_i ), Type( $Cu, 'customer' ),
  Type( $Ca, 'cashier' )
  ]->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) 2Return:
   [ In_O( $S, $Cu, object(cont_i) ) ]
  --[ Type( $Cu, 'customer' ), Type( $V, 'vending' ) ]->
   [ Out_O( $Cu, $V, object(cont_i) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) 4Hand:
   [ In_O( $V, $Cu, receipt(barcode_i) ) ]
  --[
  Type( $Ca, 'cashier' ), Type( $Cu, 'customer' ), Type( $V, 'vending' )
  ]->
   [ Out_O( $Cu, $Ca, receipt(barcode_i) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ChanOut_I:
   [ Out_I( $A, $B, x ) ]
  --[ ChanOut_I( $A, $B, x ), Neq( $A, $B ) ]->
   [ !Sec_I( $A, $B, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ChanIn_I:
   [ !Sec_I( $A, $B, x ) ]
  --[ ChanIn_I( $A, $B, x ), Neq( $A, $B ) ]->
   [ In_I( $A, $B, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ChanIn_O:
   [ Pos( $A, $B, x ) ]
  --[ ChanIn_O( $A, $B, x ), Neq( $A, $B ) ]->
   [ In_O( $A, $B, x ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) ChanOut_OO:
   [ Out_O( $A, $B, object(y) ) ]
  --[ ChanIn_O( $A, $B, object(y) ), Neq( $A, $B ) ]->
   [ Pos( $A, $B, object(y) ), Look( $B, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ChanOut_OP:
   [ Out_O( $A, $B, receipt(y) ) ]
  --[
  ChanIn_O( $A, $B, receipt(y) ), Neq( $A, $B ), NoType( $B, 'vending' )
  ]->
   [ Pos( $A, $B, receipt(y) ), Read( $B, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Receive_HK:
   [ GotInfo( $H, x ) ] --[ Once( $H, x ) ]-> [ !HK( $H, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Look:
   [ Look( $A, x ) ] --[ Human( $A ) ]-> [ GotInfo( $A, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Read:
   [ Read( $A, x ) ] --[ Human( $A ) ]-> [ GotInfo( $A, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Chatty[color=#ff0000]:
   [ !HK( $H, x ) ] --[ Chatty( $H, x ) ]-> [ Out( x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Build[color=#ff0000]:
   [ In( x ) ]
  --[ BuildA( x ), Human( $Att ) ]->
   [ PosDA( $Att, object(x) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) GiveA:
   [ PosUA( $Att, x ) ] --[ Human( $Att ) ]-> [ Out_OA( $Att, $B, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) GetA:
   [ In_OA( $A, $Att, x ) ] --[ Human( $Att ) ]-> [ PosDA( $Att, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) LookA:
   [ PosDA( $Att, object(y) ) ]
  --[ LookA( y ), Human( $Att ) ]->
   [ Out( y ), PosUA( $Att, object(y) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ReadA:
   [ PosDA( $Att, receipt(y) ) ]
  --[ ReadA( y ), Human( $Att ) ]->
   [ Out( y ), PosUA( $Att, receipt(y) ) ]

  /* has exactly the trivial AC variant */

restriction inequality:
  "∀ x #i. (Neq( x, x ) @ #i) ⇒ (⊥)"
  // safety formula

restriction type_distinct:
  "∀ x t1 t2 #i #j.
    ((Type( x, t1 ) @ #i) ∧ (Type( x, t2 ) @ #j)) ⇒ (t1 = t2)"
  // safety formula

restriction once:
  "∀ x y #i #j. ((Once( x, y ) @ #i) ∧ (Once( x, y ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction human:
  "∀ x #i.
    (Human( x ) @ #i) ⇒
    ((∃ #j. (Type( x, 'customer' ) @ #j) ∧ (#j < #i)) ∨
     (∃ #j. (Type( x, 'cashier' ) @ #j) ∧ (#j < #i)))"

restriction notype:
  "∀ x y #i. (NoType( x, y ) @ #i) ⇒ (¬(∃ #j. Type( x, y ) @ #j))"
  // safety formula

lemma chatty [sources]:
  all-traces
  "∀ h x #i.
    (Chatty( h, x ) @ #i) ⇒
    (((∃ #j. (!KU( x ) @ #j) ∧ (#j < #i)) ∨
      (∃ s c #j. (Purchase( s, c, x ) @ #j) ∧ (#j < #i))) ∨
     (∃ #j. (SendBarcode( x ) @ #j) ∧ (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ h x #i.
  (Chatty( h, x ) @ #i)
 ∧
  (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ s c #j. (Purchase( s, c, x ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #j. (SendBarcode( x ) @ #j) ⇒ ¬(#j < #i))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∀ h x #i.
           (Chatty( h, x ) @ #i)
          ⇒
           ((last(#i)) ∨
            (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) ∨
            (∃ s c #j. (Purchase( s, c, x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) ∨
            (∃ #j. (SendBarcode( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))))  ∥
         (∃ x #i.
           (Human( x ) @ #i)
          ∧
           (¬(last(#i))) ∧
           (∀ #j.
             (Type( x, 'customer' ) @ #j) ⇒ ((last(#j)) ∨ (#j = #i) ∨ (#i < #j))) ∧
           (∀ #j.
             (Type( x, 'cashier' ) @ #j) ⇒ ((last(#j)) ∨ (#j = #i) ∨ (#i < #j)))) )
    case case_1
    solve( (last(#i))  ∥
           (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ s c #j. (Purchase( s, c, x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ #j. (SendBarcode( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) )
      case case_1
      solve( !HK( $H, x ) ▶₀ #i )
        case Receive_HK_case_1
        by contradiction /* from formulas */
      next
        case Receive_HK_case_2
        solve( Pos( $S, $A, object(x) ) ▶₀ #vr.4 )
          case ChanOut_OO
          by contradiction /* from formulas */
        qed
      next
        case Receive_HK_case_3
        by contradiction /* from formulas */
      next
        case Receive_HK_case_4
        solve( Pos( $V, $A, receipt(x) ) ▶₀ #vr.4 )
          case ChanOut_OP
          by contradiction /* from formulas */
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    next
      case case_4
      by contradiction /* from formulas */
    qed
  next
    case case_2
    solve( (∃ #j. (Type( x.1, 'customer' ) @ #j) ∧ #j < #i.1)  ∥
           (∃ #j. (Type( x.1, 'cashier' ) @ #j) ∧ #j < #i.1) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    qed
  qed
qed

lemma readA [sources]:
  all-traces
  "∀ x #i.
    (ReadA( x ) @ #i) ⇒
    ((∃ #j. (!KU( x ) @ #j) ∧ (#j < #i)) ∨
     (∃ #j. (SendBarcode( x ) @ #j) ∧ (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i.
  (ReadA( x ) @ #i)
 ∧
  (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #j. (SendBarcode( x ) @ #j) ⇒ ¬(#j < #i))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∀ x #i.
           (ReadA( x ) @ #i)
          ⇒
           ((last(#i)) ∨
            (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) ∨
            (∃ #j. (SendBarcode( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))))  ∥
         (∃ x #i.
           (Human( x ) @ #i)
          ∧
           (¬(last(#i))) ∧
           (∀ #j.
             (Type( x, 'customer' ) @ #j) ⇒ ((last(#j)) ∨ (#j = #i) ∨ (#i < #j))) ∧
           (∀ #j.
             (Type( x, 'cashier' ) @ #j) ⇒ ((last(#j)) ∨ (#j = #i) ∨ (#i < #j)))) )
    case case_1
    solve( (last(#i))  ∥
           (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ #j. (SendBarcode( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) )
      case case_1
      solve( (∃ #j. (Type( $Att, 'customer' ) @ #j) ∧ #j < #i)  ∥
             (∃ #j. (Type( $Att, 'cashier' ) @ #j) ∧ #j < #i) )
        case case_1
        by solve( PosDA( $Att, receipt(x) ) ▶₀ #i )
      next
        case case_2
        by solve( PosDA( $Att, receipt(x) ) ▶₀ #i )
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    qed
  next
    case case_2
    solve( (∃ #j. (Type( $Att, 'customer' ) @ #j) ∧ #j < #i)  ∥
           (∃ #j. (Type( $Att, 'cashier' ) @ #j) ∧ #j < #i) )
      case case_1
      solve( (∃ #j. (Type( x.1, 'customer' ) @ #j) ∧ #j < #i.1)  ∥
             (∃ #j. (Type( x.1, 'cashier' ) @ #j) ∧ #j < #i.1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      qed
    next
      case case_2
      solve( (∃ #j. (Type( x.1, 'customer' ) @ #j) ∧ #j < #i.1)  ∥
             (∃ #j. (Type( x.1, 'cashier' ) @ #j) ∧ #j < #i.1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma lookA [sources]:
  all-traces
  "∀ x #i.
    (LookA( x ) @ #i) ⇒
    (((∃ #j. (!KU( x ) @ #j) ∧ (#j < #i)) ∨
      (∃ h c #j. (Purchase( h, c, x ) @ #j) ∧ (#j < #i))) ∨
     (∃ #j. (SendBarcode( x ) @ #j) ∧ (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i.
  (LookA( x ) @ #i)
 ∧
  (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ h c #j. (Purchase( h, c, x ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #j. (SendBarcode( x ) @ #j) ⇒ ¬(#j < #i))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∀ x #i.
           (LookA( x ) @ #i)
          ⇒
           ((last(#i)) ∨
            (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) ∨
            (∃ h c #j. (Purchase( h, c, x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) ∨
            (∃ #j. (SendBarcode( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))))  ∥
         (∃ x #i.
           (Human( x ) @ #i)
          ∧
           (¬(last(#i))) ∧
           (∀ #j.
             (Type( x, 'customer' ) @ #j) ⇒ ((last(#j)) ∨ (#j = #i) ∨ (#i < #j))) ∧
           (∀ #j.
             (Type( x, 'cashier' ) @ #j) ⇒ ((last(#j)) ∨ (#j = #i) ∨ (#i < #j)))) )
    case case_1
    solve( (last(#i))  ∥
           (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ h c #j. (Purchase( h, c, x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ #j. (SendBarcode( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) )
      case case_1
      solve( (∃ #j. (Type( $Att, 'customer' ) @ #j) ∧ #j < #i)  ∥
             (∃ #j. (Type( $Att, 'cashier' ) @ #j) ∧ #j < #i) )
        case case_1
        solve( PosDA( $Att, object(x) ) ▶₀ #i )
          case Build
          by contradiction /* from formulas */
        qed
      next
        case case_2
        solve( PosDA( $Att, object(x) ) ▶₀ #i )
          case Build
          by contradiction /* from formulas */
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    next
      case case_4
      by contradiction /* from formulas */
    qed
  next
    case case_2
    solve( (∃ #j. (Type( $Att, 'customer' ) @ #j) ∧ #j < #i)  ∥
           (∃ #j. (Type( $Att, 'cashier' ) @ #j) ∧ #j < #i) )
      case case_1
      solve( (∃ #j. (Type( x.1, 'customer' ) @ #j) ∧ #j < #i.1)  ∥
             (∃ #j. (Type( x.1, 'cashier' ) @ #j) ∧ #j < #i.1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      qed
    next
      case case_2
      solve( (∃ #j. (Type( x.1, 'customer' ) @ #j) ∧ #j < #i.1)  ∥
             (∃ #j. (Type( x.1, 'cashier' ) @ #j) ∧ #j < #i.1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma sendcashNoAtt:
  exists-trace
  "∃ a b m n #i.
    ((((Cash( a, b, m, n ) @ #i) ∧ (¬(∃ x #k. PrintA( x ) @ #k))) ∧
      (¬(∃ x #k. BuildA( x ) @ #k))) ∧
     (¬(∃ h x #k. Chatty( h, x ) @ #k))) ∧
    (¬(∃ h x #k. Cocky( h, x ) @ #k))"
/*
guarded formula characterizing all satisfying traces:
"∃ a b m n #i.
  (Cash( a, b, m, n ) @ #i)
 ∧
  (∀ x #k. (PrintA( x ) @ #k) ⇒ ⊥) ∧
  (∀ x #k. (BuildA( x ) @ #k) ⇒ ⊥) ∧
  (∀ h x #k. (Chatty( h, x ) @ #k) ⇒ ⊥) ∧
  (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥)"
*/
simplify
solve( Info( n, m ) ▶₁ #i )
  case 3Output
  solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
    case ChanIn_O
    solve( Pos( $Cu.1, $V, object(~cont_i) ) ▶₀ #vr.2 )
      case ChanOut_OO
      solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.3 )
        case ChanOut_OP
        solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.6 )
          case ChanOut_OO
          solve( Pos( $V.1, $Cu, receipt(~barcode_i) ) ▶₀ #vr.9 )
            case ChanOut_OP
            SOLVED // trace found
          qed
        qed
      qed
    qed
  qed
qed

lemma cashforvoucherNetto:
  all-traces
  "∀ ca cu c bar #i.
    (Cash( ca, cu, c, bar ) @ #i) ⇒
    (∃ #j.
      ((SendBarcode( bar ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ a2 b2 #i2. (Cash( a2, b2, c, bar ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ #j2. (SendBarcode( bar ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  ∀ #j.
   (SendBarcode( bar ) @ #j)
  ⇒
   ((¬(#j < #i)) ∨
    ((∃ a2 b2 #i2. (Cash( a2, b2, c, bar ) @ #i2) ∧ ¬(#i = #i2)) ∧
     (∀ #j2. (SendBarcode( bar ) @ #j2) ⇒ #j = #j2)))"
*/
simplify
solve( Info( bar, c ) ▶₁ #i )
  case 3Output
  solve( Info( ~barcode_i, ~cont_i ) ▶₁ #i2 )
    case 3Output
    by contradiction /* from formulas */
  qed
qed

lemma cashforcontainerNetto:
  all-traces
  "∀ ca cu c bar #i.
    (Cash( ca, cu, c, bar ) @ #i) ⇒
    (∃ v cu1 #j.
      ((GetCont( v, cu1, c ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ ca1 cu2 bar2 #i2.
           (Cash( ca1, cu2, c, bar2 ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ v1 cu3 #j2. (GetCont( v1, cu3, c ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  ∀ v cu1 #j.
   (GetCont( v, cu1, c ) @ #j)
  ⇒
   ((¬(#j < #i)) ∨
    ((∃ ca1 cu2 bar2 #i2. (Cash( ca1, cu2, c, bar2 ) @ #i2) ∧ ¬(#i = #i2)) ∧
     (∀ v1 cu3 #j2. (GetCont( v1, cu3, c ) @ #j2) ⇒ #j = #j2)))"
*/
simplify
solve( Info( bar, c ) ▶₁ #i )
  case 3Output
  solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
    case 3Output
    by contradiction /* from formulas */
  qed
qed

lemma cashforcontainerCustNetto:
  all-traces
  "∀ ca cu c bar #i.
    ((Cash( ca, cu, c, bar ) @ #i) ∧
     (((¬(∃ h x #k. Chatty( h, x ) @ #k)) ∧
       (¬(∃ h x #k. Cocky( h, x ) @ #k))) ∨
      ((¬(∃ x #k. PrintA( x ) @ #k)) ∧ (¬(∃ h x #k. Cocky( h, x ) @ #k))))) ⇒
    (∃ #j v.
      ((GetCont( v, cu, c ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ v1 #j2. (GetCont( v1, cu, c ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  ((((∀ h x #k. (Chatty( h, x ) @ #k) ⇒ ⊥) ∧
     (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥)) ∨
    ((∀ x #k. (PrintA( x ) @ #k) ⇒ ⊥) ∧
     (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥)))) ∧
  (∀ #j v.
    (GetCont( v, cu, c ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     ((∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ ¬(#i = #i2)) ∧
      (∀ v1 #j2. (GetCont( v1, cu, c ) @ #j2) ⇒ #j = #j2))))"
*/
simplify
solve( ((∀ h x #k. (Chatty( h, x ) @ #k) ⇒ ⊥) ∧
        (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥))  ∥
       ((∀ x #k. (PrintA( x ) @ #k) ⇒ ⊥) ∧
        (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥)) )
  case case_1
  solve( Info( bar, c ) ▶₁ #i )
    case 3Output
    solve( Pos( $Cu.1, $V, object(~cont_i) ) ▶₀ #vr.2 )
      case ChanOut_OO
      solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.5 )
        case ChanOut_OO
        solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
          case ChanIn_O
          solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.7 )
            case ChanOut_OP
            solve( Pos( $V.1, $Cu, receipt(~barcode_i) ) ▶₀ #vr.10 )
              case ChanOut_OP
              solve( (#i < #i2)  ∥ (#i2 < #i) )
                case case_1
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              next
                case case_2
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case case_2
  solve( Info( bar, c ) ▶₁ #i )
    case 3Output
    solve( Pos( $Cu.1, $V, object(~cont_i) ) ▶₀ #vr.2 )
      case ChanOut_OO
      solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.5 )
        case ChanOut_OO
        solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
          case ChanIn_O
          solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.7 )
            case ChanOut_OP
            solve( Pos( $V.1, $Cu, receipt(~barcode_i) ) ▶₀ #vr.10 )
              case ChanOut_OP
              solve( (#i < #i2)  ∥ (#i2 < #i) )
                case case_1
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              next
                case case_2
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma cashforpurchaseNetto:
  all-traces
  "∀ ca cu c bar #i.
    ((Cash( ca, cu, c, bar ) @ #i) ∧
     ((¬(∃ x #k. BuildA( x ) @ #k)) ∨
      ((¬(∃ h x #k. Chatty( h, x ) @ #k)) ∧
       (¬(∃ h x #k. Cocky( h, x ) @ #k))))) ⇒
    (∃ cu1 s #j.
      ((Purchase( s, cu1, c ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ ca1 cu2 bar2 #i2.
           (Cash( ca1, cu2, c, bar2 ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ s1 cu3 #j2. (Purchase( s1, cu3, c ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  (((∀ x #k. (BuildA( x ) @ #k) ⇒ ⊥) ∨
    ((∀ h x #k. (Chatty( h, x ) @ #k) ⇒ ⊥) ∧
     (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥)))) ∧
  (∀ cu1 s #j.
    (Purchase( s, cu1, c ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     ((∃ ca1 cu2 bar2 #i2. (Cash( ca1, cu2, c, bar2 ) @ #i2) ∧ ¬(#i = #i2)) ∧
      (∀ s1 cu3 #j2. (Purchase( s1, cu3, c ) @ #j2) ⇒ #j = #j2))))"
*/
simplify
solve( (∀ x #k. (BuildA( x ) @ #k) ⇒ ⊥)  ∥
       ((∀ h x #k. (Chatty( h, x ) @ #k) ⇒ ⊥) ∧
        (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥)) )
  case case_1
  solve( Info( bar, c ) ▶₁ #i )
    case 3Output
    solve( (#i < #i2)  ∥ (#i2 < #i) )
      case case_1
      solve( Pos( $Cu.2, $V, object(~cont_i) ) ▶₀ #vr.2 )
        case ChanOut_OO
        solve( Pos( $S.1, $Cu.2, object(~cont_i) ) ▶₀ #vr.5 )
          case ChanOut_OO
          solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
            case 3Output
            solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.8 )
              case ChanOut_OO
              solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.11 )
                case ChanOut_OO
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    next
      case case_2
      solve( Pos( $Cu.2, $V, object(~cont_i) ) ▶₀ #vr.2 )
        case ChanOut_OO
        solve( Pos( $S.1, $Cu.2, object(~cont_i) ) ▶₀ #vr.5 )
          case ChanOut_OO
          solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
            case 3Output
            solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.8 )
              case ChanOut_OO
              solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.11 )
                case ChanOut_OO
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case case_2
  solve( Info( bar, c ) ▶₁ #i )
    case 3Output
    solve( (#i < #i2)  ∥ (#i2 < #i) )
      case case_1
      solve( Pos( $Cu.2, $V, object(~cont_i) ) ▶₀ #vr.2 )
        case ChanOut_OO
        solve( Pos( $S.1, $Cu.2, object(~cont_i) ) ▶₀ #vr.5 )
          case ChanOut_OO
          solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
            case 3Output
            solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.8 )
              case ChanOut_OO
              solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.11 )
                case ChanOut_OO
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    next
      case case_2
      solve( Pos( $Cu.2, $V, object(~cont_i) ) ▶₀ #vr.2 )
        case ChanOut_OO
        solve( Pos( $S.1, $Cu.2, object(~cont_i) ) ▶₀ #vr.5 )
          case ChanOut_OO
          solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
            case 3Output
            solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.8 )
              case ChanOut_OO
              solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.11 )
                case ChanOut_OO
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma cashforpurchaseCustNetto:
  all-traces
  "∀ ca cu c bar #i.
    ((Cash( ca, cu, c, bar ) @ #i) ∧
     (((¬(∃ h x #k. Chatty( h, x ) @ #k)) ∧
       (¬(∃ h x #k. Cocky( h, x ) @ #k))) ∨
      (((¬(∃ x #k. PrintA( x ) @ #k)) ∧ (¬(∃ h x #k. Cocky( h, x ) @ #k))) ∧
       (¬(∃ x #k. BuildA( x ) @ #k))))) ⇒
    (∃ s #j.
      ((Purchase( s, cu, c ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ s1 #j2. (Purchase( s1, cu, c ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  ((((∀ h x #k. (Chatty( h, x ) @ #k) ⇒ ⊥) ∧
     (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥)) ∨
    ((∀ x #k. (PrintA( x ) @ #k) ⇒ ⊥) ∧
     (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥) ∧
     (∀ x #k. (BuildA( x ) @ #k) ⇒ ⊥)))) ∧
  (∀ s #j.
    (Purchase( s, cu, c ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     ((∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ ¬(#i = #i2)) ∧
      (∀ s1 #j2. (Purchase( s1, cu, c ) @ #j2) ⇒ #j = #j2))))"
*/
simplify
solve( ((∀ h x #k. (Chatty( h, x ) @ #k) ⇒ ⊥) ∧
        (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥))  ∥
       ((∀ x #k. (PrintA( x ) @ #k) ⇒ ⊥) ∧
        (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥) ∧
        (∀ x #k. (BuildA( x ) @ #k) ⇒ ⊥)) )
  case case_1
  solve( Info( bar, c ) ▶₁ #i )
    case 3Output
    solve( Pos( $Cu.1, $V, object(~cont_i) ) ▶₀ #vr.2 )
      case ChanOut_OO
      solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.5 )
        case ChanOut_OO
        solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
          case ChanIn_O
          solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.7 )
            case ChanOut_OP
            solve( Pos( $V.1, $Cu, receipt(~barcode_i) ) ▶₀ #vr.10 )
              case ChanOut_OP
              solve( (#i < #i2)  ∥ (#i2 < #i) )
                case case_1
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              next
                case case_2
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case case_2
  solve( Info( bar, c ) ▶₁ #i )
    case 3Output
    solve( Pos( $Cu.1, $V, object(~cont_i) ) ▶₀ #vr.2 )
      case ChanOut_OO
      solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.5 )
        case ChanOut_OO
        solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
          case ChanIn_O
          solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.7 )
            case ChanOut_OP
            solve( Pos( $V.1, $Cu, receipt(~barcode_i) ) ▶₀ #vr.10 )
              case ChanOut_OP
              solve( (#i < #i2)  ∥ (#i2 < #i) )
                case case_1
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              next
                case case_2
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma cashforpurchaseCustNettoAttack:
  all-traces
  "∀ ca cu c bar #i.
    (Cash( ca, cu, c, bar ) @ #i) ⇒
    (∃ s #j.
      ((Purchase( s, cu, c ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ s1 #j2. (Purchase( s1, cu, c ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  ∀ s #j.
   (Purchase( s, cu, c ) @ #j)
  ⇒
   ((¬(#j < #i)) ∨
    ((∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ ¬(#i = #i2)) ∧
     (∀ s1 #j2. (Purchase( s1, cu, c ) @ #j2) ⇒ #j = #j2)))"
*/
simplify
solve( Info( bar, c ) ▶₁ #i )
  case 3Output
  solve( Pos( $Cu.1, $V, object(~cont_i) ) ▶₀ #vr.2 )
    case ChanOut_OO
    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.5 )
      case ChanOut_OO
      solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
        case ChanIn_O
        solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.7 )
          case ChanOut_OP
          solve( Pos( $V.1, $Cu, receipt(~barcode_i) ) ▶₀ #vr.10 )
            case ChanOut_OP
            solve( (#i < #i2)  ∥ (#i2 < #i) )
              case case_1
              solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                case 3Output
                solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                  case ChanOut_OO
                  solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                    case ChanOut_OO
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            next
              case case_2
              solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                case 3Output
                solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                  case ChanOut_OO
                  solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                    case ChanOut_OO
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma cashforpurchaseNettoAttack:
  all-traces
  "∀ ca cu c bar #i.
    (Cash( ca, cu, c, bar ) @ #i) ⇒
    (∃ s cu1 #j.
      ((Purchase( s, cu1, c ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ ca1 cu2 bar2 #i2.
           (Cash( ca1, cu2, c, bar2 ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ s1 cu3 #j2. (Purchase( s1, cu3, c ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  ∀ s cu1 #j.
   (Purchase( s, cu1, c ) @ #j)
  ⇒
   ((¬(#j < #i)) ∨
    ((∃ ca1 cu2 bar2 #i2. (Cash( ca1, cu2, c, bar2 ) @ #i2) ∧ ¬(#i = #i2)) ∧
     (∀ s1 cu3 #j2. (Purchase( s1, cu3, c ) @ #j2) ⇒ #j = #j2)))"
*/
simplify
solve( Info( bar, c ) ▶₁ #i )
  case 3Output
  solve( (#i < #i2)  ∥ (#i2 < #i) )
    case case_1
    solve( Pos( $Cu.2, $V, object(~cont_i) ) ▶₀ #vr.2 )
      case ChanOut_OO
      solve( Pos( $S.1, $Cu.2, object(~cont_i) ) ▶₀ #vr.5 )
        case ChanOut_OO
        solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
          case 3Output
          solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.8 )
            case ChanOut_OO
            solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.11 )
              case ChanOut_OO
              by contradiction /* cyclic */
            qed
          qed
        qed
      qed
    qed
  next
    case case_2
    solve( Pos( $Cu.2, $V, object(~cont_i) ) ▶₀ #vr.2 )
      case ChanOut_OO
      solve( Pos( $S.1, $Cu.2, object(~cont_i) ) ▶₀ #vr.5 )
        case ChanOut_OO
        solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
          case 3Output
          solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.8 )
            case ChanOut_OO
            solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.11 )
              case ChanOut_OO
              by contradiction /* cyclic */
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma cashforcontainerCustNettoAttack:
  all-traces
  "∀ ca cu c bar #i.
    (Cash( ca, cu, c, bar ) @ #i) ⇒
    (∃ #j v.
      ((GetCont( v, cu, c ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ v1 #j2. (GetCont( v1, cu, c ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  ∀ #j v.
   (GetCont( v, cu, c ) @ #j)
  ⇒
   ((¬(#j < #i)) ∨
    ((∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ ¬(#i = #i2)) ∧
     (∀ v1 #j2. (GetCont( v1, cu, c ) @ #j2) ⇒ #j = #j2)))"
*/
simplify
solve( Info( bar, c ) ▶₁ #i )
  case 3Output
  solve( Pos( $Cu.1, $V, object(~cont_i) ) ▶₀ #vr.2 )
    case ChanOut_OO
    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.5 )
      case ChanOut_OO
      solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
        case ChanIn_O
        solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.7 )
          case ChanOut_OP
          solve( Pos( $V.1, $Cu, receipt(~barcode_i) ) ▶₀ #vr.10 )
            case ChanOut_OP
            solve( (#i < #i2)  ∥ (#i2 < #i) )
              case case_1
              solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                case 3Output
                solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                  case ChanOut_OO
                  solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                    case ChanOut_OO
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            next
              case case_2
              solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                case 3Output
                solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                  case ChanOut_OO
                  solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                    case ChanOut_OO
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

/*
WARNING: the following wellformedness checks failed!

Lemma actions:
  lemma `sendcashNoAtt' references action 
    (ProtoFact Linear "Cocky" 2,2,Linear)
  but no rule has such an action.
  
  lemma `sendcashNoAtt' references action 
    (ProtoFact Linear "PrintA" 1,1,Linear)
  but no rule has such an action.
  
  lemma `cashforcontainerCustNetto' references action 
    (ProtoFact Linear "Cocky" 2,2,Linear)
  but no rule has such an action.
  
  lemma `cashforcontainerCustNetto' references action 
    (ProtoFact Linear "PrintA" 1,1,Linear)
  but no rule has such an action.
  
  lemma `cashforpurchaseNetto' references action 
    (ProtoFact Linear "Cocky" 2,2,Linear)
  but no rule has such an action.
  
  lemma `cashforpurchaseCustNetto' references action 
    (ProtoFact Linear "Cocky" 2,2,Linear)
  but no rule has such an action.
  
  lemma `cashforpurchaseCustNetto' references action 
    (ProtoFact Linear "PrintA" 1,1,Linear)
  but no rule has such an action.
*/

end

==============================================================================
summary of summaries:

analyzed: /Users/finn/Documents/Research_Project_Tamarin/TamarinAutoRunner/exampleFiles/Netto.spthy

  WARNING: 7 wellformedness check failed!
           The analysis results might be wrong!
  
  chatty (all-traces): verified (18 steps)
  readA (all-traces): verified (17 steps)
  lookA (all-traces): verified (20 steps)
  sendcashNoAtt (exists-trace): verified (8 steps)
  cashforvoucherNetto (all-traces): verified (4 steps)
  cashforcontainerNetto (all-traces): verified (4 steps)
  cashforcontainerCustNetto (all-traces): verified (32 steps)
  cashforpurchaseNetto (all-traces): verified (30 steps)
  cashforpurchaseCustNetto (all-traces): verified (32 steps)
  cashforpurchaseCustNettoAttack (all-traces): verified (16 steps)
  cashforpurchaseNettoAttack (all-traces): verified (15 steps)
  cashforcontainerCustNettoAttack (all-traces): verified (16 steps)

==============================================================================
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.

theory Netto begin

// Function signature and definition of the equational theory E

functions: fst/1, get/1, look/1, object/1, pair/2, receipt/1, snd/1
equations:
    fst(<x.1, x.2>) = x.1,
    get(object(a)) = a,
    look(receipt(a)) = a,
    snd(<x.1, x.2>) = x.2



rule (modulo E) 1Purchase:
   [ Fr( ~cont_i ) ]
  --[ Type( $Cu, 'customer' ), Purchase( $S, $Cu, ~cont_i ) ]->
   [ !Container( object(~cont_i) ), Out_O( $S, $Cu, object(~cont_i) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) 3Output:
   [
   !Container( object(cont_i) ), Fr( ~barcode_i ),
   In_O( $Cu, $V, object(cont_i) )
   ]
  --[
  SendBarcode( ~barcode_i ), GetCont( $V, $Cu, cont_i ),
  Type( $Cu, 'customer' ), Type( $V, 'vending' )
  ]->
   [ Out_O( $V, $Cu, receipt(~barcode_i) ), Info( ~barcode_i, cont_i ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) 5Cash:
   [ In_O( $Cu, $Ca, receipt(barcode_i) ), Info( barcode_i, cont_i ) ]
  --[
  Cash( $Ca, $Cu, cont_i, barcode_i ), Type( $Cu, 'customer' ),
  Type( $Ca, 'cashier' )
  ]->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) 2Return:
   [ In_O( $S, $Cu, object(cont_i) ) ]
  --[ Type( $Cu, 'customer' ), Type( $V, 'vending' ) ]->
   [ Out_O( $Cu, $V, object(cont_i) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) 4Hand:
   [ In_O( $V, $Cu, receipt(barcode_i) ) ]
  --[
  Type( $Ca, 'cashier' ), Type( $Cu, 'customer' ), Type( $V, 'vending' )
  ]->
   [ Out_O( $Cu, $Ca, receipt(barcode_i) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ChanOut_I:
   [ Out_I( $A, $B, x ) ]
  --[ ChanOut_I( $A, $B, x ), Neq( $A, $B ) ]->
   [ !Sec_I( $A, $B, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ChanIn_I:
   [ !Sec_I( $A, $B, x ) ]
  --[ ChanIn_I( $A, $B, x ), Neq( $A, $B ) ]->
   [ In_I( $A, $B, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ChanIn_O:
   [ Pos( $A, $B, x ) ]
  --[ ChanIn_O( $A, $B, x ), Neq( $A, $B ) ]->
   [ In_O( $A, $B, x ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) ChanOut_OO:
   [ Out_O( $A, $B, object(y) ) ]
  --[ ChanIn_O( $A, $B, object(y) ), Neq( $A, $B ) ]->
   [ Pos( $A, $B, object(y) ), Look( $B, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ChanOut_OP:
   [ Out_O( $A, $B, receipt(y) ) ]
  --[
  ChanIn_O( $A, $B, receipt(y) ), Neq( $A, $B ), NoType( $B, 'vending' )
  ]->
   [ Pos( $A, $B, receipt(y) ), Read( $B, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Receive_HK:
   [ GotInfo( $H, x ) ] --[ Once( $H, x ) ]-> [ !HK( $H, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Look:
   [ Look( $A, x ) ] --[ Human( $A ) ]-> [ GotInfo( $A, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Read:
   [ Read( $A, x ) ] --[ Human( $A ) ]-> [ GotInfo( $A, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Chatty[color=#ff0000]:
   [ !HK( $H, x ) ] --[ Chatty( $H, x ) ]-> [ Out( x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Print[color=#ff0000]:
   [ In( x ) ]
  --[ PrintA( x ), Human( $Att ) ]->
   [ PosDA( $Att, receipt(x) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Build[color=#ff0000]:
   [ In( x ) ]
  --[ BuildA( x ), Human( $Att ) ]->
   [ PosDA( $Att, object(x) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) GiveA:
   [ PosUA( $Att, x ) ] --[ Human( $Att ) ]-> [ Out_OA( $Att, $B, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) GetA:
   [ In_OA( $A, $Att, x ) ] --[ Human( $Att ) ]-> [ PosDA( $Att, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) LookA:
   [ PosDA( $Att, object(y) ) ]
  --[ LookA( y ), Human( $Att ) ]->
   [ Out( y ), PosUA( $Att, object(y) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ReadA:
   [ PosDA( $Att, receipt(y) ) ]
  --[ ReadA( y ), Human( $Att ) ]->
   [ Out( y ), PosUA( $Att, receipt(y) ) ]

  /* has exactly the trivial AC variant */

restriction inequality:
  "∀ x #i. (Neq( x, x ) @ #i) ⇒ (⊥)"
  // safety formula

restriction type_distinct:
  "∀ x t1 t2 #i #j.
    ((Type( x, t1 ) @ #i) ∧ (Type( x, t2 ) @ #j)) ⇒ (t1 = t2)"
  // safety formula

restriction once:
  "∀ x y #i #j. ((Once( x, y ) @ #i) ∧ (Once( x, y ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction human:
  "∀ x #i.
    (Human( x ) @ #i) ⇒
    ((∃ #j. (Type( x, 'customer' ) @ #j) ∧ (#j < #i)) ∨
     (∃ #j. (Type( x, 'cashier' ) @ #j) ∧ (#j < #i)))"

restriction notype:
  "∀ x y #i. (NoType( x, y ) @ #i) ⇒ (¬(∃ #j. Type( x, y ) @ #j))"
  // safety formula

lemma chatty [sources]:
  all-traces
  "∀ h x #i.
    (Chatty( h, x ) @ #i) ⇒
    (((∃ #j. (!KU( x ) @ #j) ∧ (#j < #i)) ∨
      (∃ s c #j. (Purchase( s, c, x ) @ #j) ∧ (#j < #i))) ∨
     (∃ #j. (SendBarcode( x ) @ #j) ∧ (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ h x #i.
  (Chatty( h, x ) @ #i)
 ∧
  (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ s c #j. (Purchase( s, c, x ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #j. (SendBarcode( x ) @ #j) ⇒ ¬(#j < #i))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∀ h x #i.
           (Chatty( h, x ) @ #i)
          ⇒
           ((last(#i)) ∨
            (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) ∨
            (∃ s c #j. (Purchase( s, c, x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) ∨
            (∃ #j. (SendBarcode( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))))  ∥
         (∃ x #i.
           (Human( x ) @ #i)
          ∧
           (¬(last(#i))) ∧
           (∀ #j.
             (Type( x, 'customer' ) @ #j) ⇒ ((last(#j)) ∨ (#j = #i) ∨ (#i < #j))) ∧
           (∀ #j.
             (Type( x, 'cashier' ) @ #j) ⇒ ((last(#j)) ∨ (#j = #i) ∨ (#i < #j)))) )
    case case_1
    solve( (last(#i))  ∥
           (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ s c #j. (Purchase( s, c, x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ #j. (SendBarcode( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) )
      case case_1
      solve( !HK( $H, x ) ▶₀ #i )
        case Receive_HK_case_1
        by contradiction /* from formulas */
      next
        case Receive_HK_case_2
        solve( Pos( $S, $A, object(x) ) ▶₀ #vr.4 )
          case ChanOut_OO
          by contradiction /* from formulas */
        qed
      next
        case Receive_HK_case_3
        by contradiction /* from formulas */
      next
        case Receive_HK_case_4
        solve( Pos( $V, $A, receipt(x) ) ▶₀ #vr.4 )
          case ChanOut_OP
          by contradiction /* from formulas */
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    next
      case case_4
      by contradiction /* from formulas */
    qed
  next
    case case_2
    solve( (∃ #j. (Type( x.1, 'customer' ) @ #j) ∧ #j < #i.1)  ∥
           (∃ #j. (Type( x.1, 'cashier' ) @ #j) ∧ #j < #i.1) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    qed
  qed
qed

lemma readA [sources]:
  all-traces
  "∀ x #i.
    (ReadA( x ) @ #i) ⇒
    ((∃ #j. (!KU( x ) @ #j) ∧ (#j < #i)) ∨
     (∃ #j. (SendBarcode( x ) @ #j) ∧ (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i.
  (ReadA( x ) @ #i)
 ∧
  (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #j. (SendBarcode( x ) @ #j) ⇒ ¬(#j < #i))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∀ x #i.
           (ReadA( x ) @ #i)
          ⇒
           ((last(#i)) ∨
            (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) ∨
            (∃ #j. (SendBarcode( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))))  ∥
         (∃ x #i.
           (Human( x ) @ #i)
          ∧
           (¬(last(#i))) ∧
           (∀ #j.
             (Type( x, 'customer' ) @ #j) ⇒ ((last(#j)) ∨ (#j = #i) ∨ (#i < #j))) ∧
           (∀ #j.
             (Type( x, 'cashier' ) @ #j) ⇒ ((last(#j)) ∨ (#j = #i) ∨ (#i < #j)))) )
    case case_1
    solve( (last(#i))  ∥
           (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ #j. (SendBarcode( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) )
      case case_1
      solve( (∃ #j. (Type( $Att, 'customer' ) @ #j) ∧ #j < #i)  ∥
             (∃ #j. (Type( $Att, 'cashier' ) @ #j) ∧ #j < #i) )
        case case_1
        solve( PosDA( $Att, receipt(x) ) ▶₀ #i )
          case Print
          by contradiction /* from formulas */
        qed
      next
        case case_2
        solve( PosDA( $Att, receipt(x) ) ▶₀ #i )
          case Print
          by contradiction /* from formulas */
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    qed
  next
    case case_2
    solve( (∃ #j. (Type( $Att, 'customer' ) @ #j) ∧ #j < #i)  ∥
           (∃ #j. (Type( $Att, 'cashier' ) @ #j) ∧ #j < #i) )
      case case_1
      solve( (∃ #j. (Type( x.1, 'customer' ) @ #j) ∧ #j < #i.1)  ∥
             (∃ #j. (Type( x.1, 'cashier' ) @ #j) ∧ #j < #i.1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      qed
    next
      case case_2
      solve( (∃ #j. (Type( x.1, 'customer' ) @ #j) ∧ #j < #i.1)  ∥
             (∃ #j. (Type( x.1, 'cashier' ) @ #j) ∧ #j < #i.1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma lookA [sources]:
  all-traces
  "∀ x #i.
    (LookA( x ) @ #i) ⇒
    (((∃ #j. (!KU( x ) @ #j) ∧ (#j < #i)) ∨
      (∃ h c #j. (Purchase( h, c, x ) @ #j) ∧ (#j < #i))) ∨
     (∃ #j. (SendBarcode( x ) @ #j) ∧ (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i.
  (LookA( x ) @ #i)
 ∧
  (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ h c #j. (Purchase( h, c, x ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #j. (SendBarcode( x ) @ #j) ⇒ ¬(#j < #i))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∀ x #i.
           (LookA( x ) @ #i)
          ⇒
           ((last(#i)) ∨
            (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) ∨
            (∃ h c #j. (Purchase( h, c, x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) ∨
            (∃ #j. (SendBarcode( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))))  ∥
         (∃ x #i.
           (Human( x ) @ #i)
          ∧
           (¬(last(#i))) ∧
           (∀ #j.
             (Type( x, 'customer' ) @ #j) ⇒ ((last(#j)) ∨ (#j = #i) ∨ (#i < #j))) ∧
           (∀ #j.
             (Type( x, 'cashier' ) @ #j) ⇒ ((last(#j)) ∨ (#j = #i) ∨ (#i < #j)))) )
    case case_1
    solve( (last(#i))  ∥
           (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ h c #j. (Purchase( h, c, x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ #j. (SendBarcode( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) )
      case case_1
      solve( (∃ #j. (Type( $Att, 'customer' ) @ #j) ∧ #j < #i)  ∥
             (∃ #j. (Type( $Att, 'cashier' ) @ #j) ∧ #j < #i) )
        case case_1
        solve( PosDA( $Att, object(x) ) ▶₀ #i )
          case Build
          by contradiction /* from formulas */
        qed
      next
        case case_2
        solve( PosDA( $Att, object(x) ) ▶₀ #i )
          case Build
          by contradiction /* from formulas */
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    next
      case case_4
      by contradiction /* from formulas */
    qed
  next
    case case_2
    solve( (∃ #j. (Type( $Att, 'customer' ) @ #j) ∧ #j < #i)  ∥
           (∃ #j. (Type( $Att, 'cashier' ) @ #j) ∧ #j < #i) )
      case case_1
      solve( (∃ #j. (Type( x.1, 'customer' ) @ #j) ∧ #j < #i.1)  ∥
             (∃ #j. (Type( x.1, 'cashier' ) @ #j) ∧ #j < #i.1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      qed
    next
      case case_2
      solve( (∃ #j. (Type( x.1, 'customer' ) @ #j) ∧ #j < #i.1)  ∥
             (∃ #j. (Type( x.1, 'cashier' ) @ #j) ∧ #j < #i.1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma sendcashNoAtt:
  exists-trace
  "∃ a b m n #i.
    ((((Cash( a, b, m, n ) @ #i) ∧ (¬(∃ x #k. PrintA( x ) @ #k))) ∧
      (¬(∃ x #k. BuildA( x ) @ #k))) ∧
     (¬(∃ h x #k. Chatty( h, x ) @ #k))) ∧
    (¬(∃ h x #k. Cocky( h, x ) @ #k))"
/*
guarded formula characterizing all satisfying traces:
"∃ a b m n #i.
  (Cash( a, b, m, n ) @ #i)
 ∧
  (∀ x #k. (PrintA( x ) @ #k) ⇒ ⊥) ∧
  (∀ x #k. (BuildA( x ) @ #k) ⇒ ⊥) ∧
  (∀ h x #k. (Chatty( h, x ) @ #k) ⇒ ⊥) ∧
  (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥)"
*/
simplify
solve( Info( n, m ) ▶₁ #i )
  case 3Output
  solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
    case ChanIn_O
    solve( Pos( $Cu.1, $V, object(~cont_i) ) ▶₀ #vr.2 )
      case ChanOut_OO
      solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.3 )
        case ChanOut_OP
        solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.6 )
          case ChanOut_OO
          solve( Pos( $V.1, $Cu, receipt(~barcode_i) ) ▶₀ #vr.9 )
            case ChanOut_OP
            SOLVED // trace found
          qed
        qed
      qed
    qed
  qed
qed

lemma cashforvoucherNetto:
  all-traces
  "∀ ca cu c bar #i.
    (Cash( ca, cu, c, bar ) @ #i) ⇒
    (∃ #j.
      ((SendBarcode( bar ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ a2 b2 #i2. (Cash( a2, b2, c, bar ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ #j2. (SendBarcode( bar ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  ∀ #j.
   (SendBarcode( bar ) @ #j)
  ⇒
   ((¬(#j < #i)) ∨
    ((∃ a2 b2 #i2. (Cash( a2, b2, c, bar ) @ #i2) ∧ ¬(#i = #i2)) ∧
     (∀ #j2. (SendBarcode( bar ) @ #j2) ⇒ #j = #j2)))"
*/
simplify
solve( Info( bar, c ) ▶₁ #i )
  case 3Output
  solve( Info( ~barcode_i, ~cont_i ) ▶₁ #i2 )
    case 3Output
    by contradiction /* from formulas */
  qed
qed

lemma cashforcontainerNetto:
  all-traces
  "∀ ca cu c bar #i.
    (Cash( ca, cu, c, bar ) @ #i) ⇒
    (∃ v cu1 #j.
      ((GetCont( v, cu1, c ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ ca1 cu2 bar2 #i2.
           (Cash( ca1, cu2, c, bar2 ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ v1 cu3 #j2. (GetCont( v1, cu3, c ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  ∀ v cu1 #j.
   (GetCont( v, cu1, c ) @ #j)
  ⇒
   ((¬(#j < #i)) ∨
    ((∃ ca1 cu2 bar2 #i2. (Cash( ca1, cu2, c, bar2 ) @ #i2) ∧ ¬(#i = #i2)) ∧
     (∀ v1 cu3 #j2. (GetCont( v1, cu3, c ) @ #j2) ⇒ #j = #j2)))"
*/
simplify
solve( Info( bar, c ) ▶₁ #i )
  case 3Output
  solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
    case 3Output
    by contradiction /* from formulas */
  qed
qed

lemma cashforcontainerCustNetto:
  all-traces
  "∀ ca cu c bar #i.
    ((Cash( ca, cu, c, bar ) @ #i) ∧
     (((¬(∃ h x #k. Chatty( h, x ) @ #k)) ∧
       (¬(∃ h x #k. Cocky( h, x ) @ #k))) ∨
      ((¬(∃ x #k. PrintA( x ) @ #k)) ∧ (¬(∃ h x #k. Cocky( h, x ) @ #k))))) ⇒
    (∃ #j v.
      ((GetCont( v, cu, c ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ v1 #j2. (GetCont( v1, cu, c ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  ((((∀ h x #k. (Chatty( h, x ) @ #k) ⇒ ⊥) ∧
     (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥)) ∨
    ((∀ x #k. (PrintA( x ) @ #k) ⇒ ⊥) ∧
     (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥)))) ∧
  (∀ #j v.
    (GetCont( v, cu, c ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     ((∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ ¬(#i = #i2)) ∧
      (∀ v1 #j2. (GetCont( v1, cu, c ) @ #j2) ⇒ #j = #j2))))"
*/
simplify
solve( ((∀ h x #k. (Chatty( h, x ) @ #k) ⇒ ⊥) ∧
        (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥))  ∥
       ((∀ x #k. (PrintA( x ) @ #k) ⇒ ⊥) ∧
        (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥)) )
  case case_1
  solve( Info( bar, c ) ▶₁ #i )
    case 3Output
    solve( Pos( $Cu.1, $V, object(~cont_i) ) ▶₀ #vr.2 )
      case ChanOut_OO
      solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.5 )
        case ChanOut_OO
        solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
          case ChanIn_O
          solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.7 )
            case ChanOut_OP
            solve( Pos( $V.1, $Cu, receipt(~barcode_i) ) ▶₀ #vr.10 )
              case ChanOut_OP
              solve( (#i < #i2)  ∥ (#i2 < #i) )
                case case_1
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              next
                case case_2
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case case_2
  solve( Info( bar, c ) ▶₁ #i )
    case 3Output
    solve( Pos( $Cu.1, $V, object(~cont_i) ) ▶₀ #vr.2 )
      case ChanOut_OO
      solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.5 )
        case ChanOut_OO
        solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
          case ChanIn_O
          solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.7 )
            case ChanOut_OP
            solve( Pos( $V.1, $Cu, receipt(~barcode_i) ) ▶₀ #vr.10 )
              case ChanOut_OP
              solve( (#i < #i2)  ∥ (#i2 < #i) )
                case case_1
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              next
                case case_2
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma cashforpurchaseNetto:
  all-traces
  "∀ ca cu c bar #i.
    ((Cash( ca, cu, c, bar ) @ #i) ∧
     ((¬(∃ x #k. BuildA( x ) @ #k)) ∨
      ((¬(∃ h x #k. Chatty( h, x ) @ #k)) ∧
       (¬(∃ h x #k. Cocky( h, x ) @ #k))))) ⇒
    (∃ cu1 s #j.
      ((Purchase( s, cu1, c ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ ca1 cu2 bar2 #i2.
           (Cash( ca1, cu2, c, bar2 ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ s1 cu3 #j2. (Purchase( s1, cu3, c ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  (((∀ x #k. (BuildA( x ) @ #k) ⇒ ⊥) ∨
    ((∀ h x #k. (Chatty( h, x ) @ #k) ⇒ ⊥) ∧
     (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥)))) ∧
  (∀ cu1 s #j.
    (Purchase( s, cu1, c ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     ((∃ ca1 cu2 bar2 #i2. (Cash( ca1, cu2, c, bar2 ) @ #i2) ∧ ¬(#i = #i2)) ∧
      (∀ s1 cu3 #j2. (Purchase( s1, cu3, c ) @ #j2) ⇒ #j = #j2))))"
*/
simplify
solve( (∀ x #k. (BuildA( x ) @ #k) ⇒ ⊥)  ∥
       ((∀ h x #k. (Chatty( h, x ) @ #k) ⇒ ⊥) ∧
        (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥)) )
  case case_1
  solve( Info( bar, c ) ▶₁ #i )
    case 3Output
    solve( (#i < #i2)  ∥ (#i2 < #i) )
      case case_1
      solve( Pos( $Cu.2, $V, object(~cont_i) ) ▶₀ #vr.2 )
        case ChanOut_OO
        solve( Pos( $S.1, $Cu.2, object(~cont_i) ) ▶₀ #vr.5 )
          case ChanOut_OO
          solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
            case 3Output
            solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.8 )
              case ChanOut_OO
              solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.11 )
                case ChanOut_OO
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    next
      case case_2
      solve( Pos( $Cu.2, $V, object(~cont_i) ) ▶₀ #vr.2 )
        case ChanOut_OO
        solve( Pos( $S.1, $Cu.2, object(~cont_i) ) ▶₀ #vr.5 )
          case ChanOut_OO
          solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
            case 3Output
            solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.8 )
              case ChanOut_OO
              solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.11 )
                case ChanOut_OO
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case case_2
  solve( Info( bar, c ) ▶₁ #i )
    case 3Output
    solve( (#i < #i2)  ∥ (#i2 < #i) )
      case case_1
      solve( Pos( $Cu.2, $V, object(~cont_i) ) ▶₀ #vr.2 )
        case ChanOut_OO
        solve( Pos( $S.1, $Cu.2, object(~cont_i) ) ▶₀ #vr.5 )
          case ChanOut_OO
          solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
            case 3Output
            solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.8 )
              case ChanOut_OO
              solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.11 )
                case ChanOut_OO
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    next
      case case_2
      solve( Pos( $Cu.2, $V, object(~cont_i) ) ▶₀ #vr.2 )
        case ChanOut_OO
        solve( Pos( $S.1, $Cu.2, object(~cont_i) ) ▶₀ #vr.5 )
          case ChanOut_OO
          solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
            case 3Output
            solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.8 )
              case ChanOut_OO
              solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.11 )
                case ChanOut_OO
                by contradiction /* cyclic */
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma cashforpurchaseCustNetto:
  all-traces
  "∀ ca cu c bar #i.
    ((Cash( ca, cu, c, bar ) @ #i) ∧
     (((¬(∃ h x #k. Chatty( h, x ) @ #k)) ∧
       (¬(∃ h x #k. Cocky( h, x ) @ #k))) ∨
      (((¬(∃ x #k. PrintA( x ) @ #k)) ∧ (¬(∃ h x #k. Cocky( h, x ) @ #k))) ∧
       (¬(∃ x #k. BuildA( x ) @ #k))))) ⇒
    (∃ s #j.
      ((Purchase( s, cu, c ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ s1 #j2. (Purchase( s1, cu, c ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  ((((∀ h x #k. (Chatty( h, x ) @ #k) ⇒ ⊥) ∧
     (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥)) ∨
    ((∀ x #k. (PrintA( x ) @ #k) ⇒ ⊥) ∧
     (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥) ∧
     (∀ x #k. (BuildA( x ) @ #k) ⇒ ⊥)))) ∧
  (∀ s #j.
    (Purchase( s, cu, c ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     ((∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ ¬(#i = #i2)) ∧
      (∀ s1 #j2. (Purchase( s1, cu, c ) @ #j2) ⇒ #j = #j2))))"
*/
simplify
solve( ((∀ h x #k. (Chatty( h, x ) @ #k) ⇒ ⊥) ∧
        (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥))  ∥
       ((∀ x #k. (PrintA( x ) @ #k) ⇒ ⊥) ∧
        (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥) ∧
        (∀ x #k. (BuildA( x ) @ #k) ⇒ ⊥)) )
  case case_1
  solve( Info( bar, c ) ▶₁ #i )
    case 3Output
    solve( Pos( $Cu.1, $V, object(~cont_i) ) ▶₀ #vr.2 )
      case ChanOut_OO
      solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.5 )
        case ChanOut_OO
        solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
          case ChanIn_O
          solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.7 )
            case ChanOut_OP
            solve( Pos( $V.1, $Cu, receipt(~barcode_i) ) ▶₀ #vr.10 )
              case ChanOut_OP
              solve( (#i < #i2)  ∥ (#i2 < #i) )
                case case_1
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              next
                case case_2
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case case_2
  solve( Info( bar, c ) ▶₁ #i )
    case 3Output
    solve( Pos( $Cu.1, $V, object(~cont_i) ) ▶₀ #vr.2 )
      case ChanOut_OO
      solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.5 )
        case ChanOut_OO
        solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
          case ChanIn_O
          solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.7 )
            case ChanOut_OP
            solve( Pos( $V.1, $Cu, receipt(~barcode_i) ) ▶₀ #vr.10 )
              case ChanOut_OP
              solve( (#i < #i2)  ∥ (#i2 < #i) )
                case case_1
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              next
                case case_2
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO
                      by contradiction /* cyclic */
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma cashforpurchaseCustNettoAttack:
  all-traces
  "∀ ca cu c bar #i.
    (Cash( ca, cu, c, bar ) @ #i) ⇒
    (∃ s #j.
      ((Purchase( s, cu, c ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ s1 #j2. (Purchase( s1, cu, c ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  ∀ s #j.
   (Purchase( s, cu, c ) @ #j)
  ⇒
   ((¬(#j < #i)) ∨
    ((∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ ¬(#i = #i2)) ∧
     (∀ s1 #j2. (Purchase( s1, cu, c ) @ #j2) ⇒ #j = #j2)))"
*/
simplify
solve( Info( bar, c ) ▶₁ #i )
  case 3Output
  solve( Pos( $Cu.1, $V, object(~cont_i) ) ▶₀ #vr.2 )
    case ChanOut_OO
    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.5 )
      case ChanOut_OO
      solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
        case ChanIn_O
        solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.7 )
          case ChanOut_OP
          solve( Pos( $V.1, $Cu, receipt(~barcode_i) ) ▶₀ #vr.10 )
            case ChanOut_OP
            solve( (#i < #i2)  ∥ (#i2 < #i) )
              case case_1
              solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                case 3Output
                solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                  case ChanOut_OO
                  solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                    case ChanOut_OO
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            next
              case case_2
              solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                case 3Output
                solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                  case ChanOut_OO
                  solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                    case ChanOut_OO
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma cashforpurchaseNettoAttack:
  all-traces
  "∀ ca cu c bar #i.
    (Cash( ca, cu, c, bar ) @ #i) ⇒
    (∃ s cu1 #j.
      ((Purchase( s, cu1, c ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ ca1 cu2 bar2 #i2.
           (Cash( ca1, cu2, c, bar2 ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ s1 cu3 #j2. (Purchase( s1, cu3, c ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  ∀ s cu1 #j.
   (Purchase( s, cu1, c ) @ #j)
  ⇒
   ((¬(#j < #i)) ∨
    ((∃ ca1 cu2 bar2 #i2. (Cash( ca1, cu2, c, bar2 ) @ #i2) ∧ ¬(#i = #i2)) ∧
     (∀ s1 cu3 #j2. (Purchase( s1, cu3, c ) @ #j2) ⇒ #j = #j2)))"
*/
simplify
solve( Info( bar, c ) ▶₁ #i )
  case 3Output
  solve( (#i < #i2)  ∥ (#i2 < #i) )
    case case_1
    solve( Pos( $Cu.2, $V, object(~cont_i) ) ▶₀ #vr.2 )
      case ChanOut_OO
      solve( Pos( $S.1, $Cu.2, object(~cont_i) ) ▶₀ #vr.5 )
        case ChanOut_OO
        solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
          case 3Output
          solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.8 )
            case ChanOut_OO
            solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.11 )
              case ChanOut_OO
              by contradiction /* cyclic */
            qed
          qed
        qed
      qed
    qed
  next
    case case_2
    solve( Pos( $Cu.2, $V, object(~cont_i) ) ▶₀ #vr.2 )
      case ChanOut_OO
      solve( Pos( $S.1, $Cu.2, object(~cont_i) ) ▶₀ #vr.5 )
        case ChanOut_OO
        solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
          case 3Output
          solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.8 )
            case ChanOut_OO
            solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.11 )
              case ChanOut_OO
              by contradiction /* cyclic */
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma cashforcontainerCustNettoAttack:
  all-traces
  "∀ ca cu c bar #i.
    (Cash( ca, cu, c, bar ) @ #i) ⇒
    (∃ #j v.
      ((GetCont( v, cu, c ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ v1 #j2. (GetCont( v1, cu, c ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  ∀ #j v.
   (GetCont( v, cu, c ) @ #j)
  ⇒
   ((¬(#j < #i)) ∨
    ((∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ ¬(#i = #i2)) ∧
     (∀ v1 #j2. (GetCont( v1, cu, c ) @ #j2) ⇒ #j = #j2)))"
*/
simplify
solve( Info( bar, c ) ▶₁ #i )
  case 3Output
  solve( Pos( $Cu.1, $V, object(~cont_i) ) ▶₀ #vr.2 )
    case ChanOut_OO
    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.5 )
      case ChanOut_OO
      solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
        case ChanIn_O
        solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.7 )
          case ChanOut_OP
          solve( Pos( $V.1, $Cu, receipt(~barcode_i) ) ▶₀ #vr.10 )
            case ChanOut_OP
            solve( (#i < #i2)  ∥ (#i2 < #i) )
              case case_1
              solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                case 3Output
                solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                  case ChanOut_OO
                  solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                    case ChanOut_OO
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            next
              case case_2
              solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                case 3Output
                solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                  case ChanOut_OO
                  solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                    case ChanOut_OO
                    by contradiction /* cyclic */
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

/*
WARNING: the following wellformedness checks failed!

Lemma actions:
  lemma `sendcashNoAtt' references action 
    (ProtoFact Linear "Cocky" 2,2,Linear)
  but no rule has such an action.
  
  lemma `cashforcontainerCustNetto' references action 
    (ProtoFact Linear "Cocky" 2,2,Linear)
  but no rule has such an action.
  
  lemma `cashforpurchaseNetto' references action 
    (ProtoFact Linear "Cocky" 2,2,Linear)
  but no rule has such an action.
  
  lemma `cashforpurchaseCustNetto' references action 
    (ProtoFact Linear "Cocky" 2,2,Linear)
  but no rule has such an action.
*/

end

==============================================================================
summary of summaries:

analyzed: /Users/finn/Documents/Research_Project_Tamarin/TamarinAutoRunner/exampleFiles/Netto.spthy

  WARNING: 4 wellformedness check failed!
           The analysis results might be wrong!
  
  chatty (all-traces): verified (18 steps)
  readA (all-traces): verified (19 steps)
  lookA (all-traces): verified (20 steps)
  sendcashNoAtt (exists-trace): verified (8 steps)
  cashforvoucherNetto (all-traces): verified (4 steps)
  cashforcontainerNetto (all-traces): verified (4 steps)
  cashforcontainerCustNetto (all-traces): verified (32 steps)
  cashforpurchaseNetto (all-traces): verified (30 steps)
  cashforpurchaseCustNetto (all-traces): verified (32 steps)
  cashforpurchaseCustNettoAttack (all-traces): verified (16 steps)
  cashforpurchaseNettoAttack (all-traces): verified (15 steps)
  cashforcontainerCustNettoAttack (all-traces): verified (16 steps)

==============================================================================
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.

theory Netto begin

// Function signature and definition of the equational theory E

functions: fst/1, get/1, look/1, object/1, pair/2, receipt/1, snd/1
equations:
    fst(<x.1, x.2>) = x.1,
    get(object(a)) = a,
    look(receipt(a)) = a,
    snd(<x.1, x.2>) = x.2



rule (modulo E) 1Purchase:
   [ Fr( ~cont_i ) ]
  --[ Type( $Cu, 'customer' ), Purchase( $S, $Cu, ~cont_i ) ]->
   [ !Container( object(~cont_i) ), Out_O( $S, $Cu, object(~cont_i) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) 3Output:
   [
   !Container( object(cont_i) ), Fr( ~barcode_i ),
   In_O( $Cu, $V, object(cont_i) )
   ]
  --[
  SendBarcode( ~barcode_i ), GetCont( $V, $Cu, cont_i ),
  Type( $Cu, 'customer' ), Type( $V, 'vending' )
  ]->
   [ Out_O( $V, $Cu, receipt(~barcode_i) ), Info( ~barcode_i, cont_i ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) 5Cash:
   [ In_O( $Cu, $Ca, receipt(barcode_i) ), Info( barcode_i, cont_i ) ]
  --[
  Cash( $Ca, $Cu, cont_i, barcode_i ), Type( $Cu, 'customer' ),
  Type( $Ca, 'cashier' )
  ]->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) 2Return:
   [ In_O( $S, $Cu, object(cont_i) ) ]
  --[ Type( $Cu, 'customer' ), Type( $V, 'vending' ) ]->
   [ Out_O( $Cu, $V, object(cont_i) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) 4Hand:
   [ In_O( $V, $Cu, receipt(barcode_i) ) ]
  --[
  Type( $Ca, 'cashier' ), Type( $Cu, 'customer' ), Type( $V, 'vending' )
  ]->
   [ Out_O( $Cu, $Ca, receipt(barcode_i) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ChanOut_I:
   [ Out_I( $A, $B, x ) ]
  --[ ChanOut_I( $A, $B, x ), Neq( $A, $B ) ]->
   [ !Sec_I( $A, $B, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ChanIn_I:
   [ !Sec_I( $A, $B, x ) ]
  --[ ChanIn_I( $A, $B, x ), Neq( $A, $B ) ]->
   [ In_I( $A, $B, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ChanIn_O:
   [ Pos( $A, $B, x ) ]
  --[ ChanIn_O( $A, $B, x ), Neq( $A, $B ) ]->
   [ In_O( $A, $B, x ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) ChanOut_OO:
   [ Out_O( $A, $B, object(y) ) ]
  --[ ChanIn_O( $A, $B, object(y) ), Neq( $A, $B ) ]->
   [ Pos( $A, $B, object(y) ), Look( $B, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ChanOut_OP:
   [ Out_O( $A, $B, receipt(y) ) ]
  --[
  ChanIn_O( $A, $B, receipt(y) ), Neq( $A, $B ), NoType( $B, 'vending' )
  ]->
   [ Pos( $A, $B, receipt(y) ), Read( $B, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Receive_HK:
   [ GotInfo( $H, x ) ] --[ Once( $H, x ) ]-> [ !HK( $H, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Look:
   [ Look( $A, x ) ] --[ Human( $A ) ]-> [ GotInfo( $A, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Read:
   [ Read( $A, x ) ] --[ Human( $A ) ]-> [ GotInfo( $A, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Cocky[color=#ff0000]:
   [ Pos( $A, $B, x ) ]
  --[
  Cocky( $B, x ), Neq( $A, $B ), Neq( $A, $C ), Neq( $B, $C ), Human( $B ),
  Human( $C ), Once( x, x )
  ]->
   [ In_OA( $B, $C, x ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) CockyGet:
   [ Out_OA( $A, $B, x ) ]
  --[ Neq( $A, $B ), Human( $A ) ]->
   [ Out_O( $A, $B, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Print[color=#ff0000]:
   [ In( x ) ]
  --[ PrintA( x ), Human( $Att ) ]->
   [ PosDA( $Att, receipt(x) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) GiveA:
   [ PosUA( $Att, x ) ] --[ Human( $Att ) ]-> [ Out_OA( $Att, $B, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) GetA:
   [ In_OA( $A, $Att, x ) ] --[ Human( $Att ) ]-> [ PosDA( $Att, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) LookA:
   [ PosDA( $Att, object(y) ) ]
  --[ LookA( y ), Human( $Att ) ]->
   [ Out( y ), PosUA( $Att, object(y) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ReadA:
   [ PosDA( $Att, receipt(y) ) ]
  --[ ReadA( y ), Human( $Att ) ]->
   [ Out( y ), PosUA( $Att, receipt(y) ) ]

  /* has exactly the trivial AC variant */

restriction inequality:
  "∀ x #i. (Neq( x, x ) @ #i) ⇒ (⊥)"
  // safety formula

restriction type_distinct:
  "∀ x t1 t2 #i #j.
    ((Type( x, t1 ) @ #i) ∧ (Type( x, t2 ) @ #j)) ⇒ (t1 = t2)"
  // safety formula

restriction once:
  "∀ x y #i #j. ((Once( x, y ) @ #i) ∧ (Once( x, y ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction human:
  "∀ x #i.
    (Human( x ) @ #i) ⇒
    ((∃ #j. (Type( x, 'customer' ) @ #j) ∧ (#j < #i)) ∨
     (∃ #j. (Type( x, 'cashier' ) @ #j) ∧ (#j < #i)))"

restriction notype:
  "∀ x y #i. (NoType( x, y ) @ #i) ⇒ (¬(∃ #j. Type( x, y ) @ #j))"
  // safety formula

lemma chatty [sources]:
  all-traces
  "∀ h x #i.
    (Chatty( h, x ) @ #i) ⇒
    (((∃ #j. (!KU( x ) @ #j) ∧ (#j < #i)) ∨
      (∃ s c #j. (Purchase( s, c, x ) @ #j) ∧ (#j < #i))) ∨
     (∃ #j. (SendBarcode( x ) @ #j) ∧ (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ h x #i.
  (Chatty( h, x ) @ #i)
 ∧
  (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ s c #j. (Purchase( s, c, x ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #j. (SendBarcode( x ) @ #j) ⇒ ¬(#j < #i))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∀ h x #i.
           (Chatty( h, x ) @ #i)
          ⇒
           ((last(#i)) ∨
            (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) ∨
            (∃ s c #j. (Purchase( s, c, x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) ∨
            (∃ #j. (SendBarcode( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))))  ∥
         (∃ x #i.
           (Human( x ) @ #i)
          ∧
           (¬(last(#i))) ∧
           (∀ #j.
             (Type( x, 'customer' ) @ #j) ⇒ ((last(#j)) ∨ (#j = #i) ∨ (#i < #j))) ∧
           (∀ #j.
             (Type( x, 'cashier' ) @ #j) ⇒ ((last(#j)) ∨ (#j = #i) ∨ (#i < #j)))) )
    case case_1
    solve( (last(#i))  ∥
           (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ s c #j. (Purchase( s, c, x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ #j. (SendBarcode( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) )
      case case_1
      by solve( Chatty( h, x ) @ #i )
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    next
      case case_4
      by contradiction /* from formulas */
    qed
  next
    case case_2
    solve( (∃ #j. (Type( x, 'customer' ) @ #j) ∧ #j < #i)  ∥
           (∃ #j. (Type( x, 'cashier' ) @ #j) ∧ #j < #i) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    qed
  qed
qed

lemma readA [sources]:
  all-traces
  "∀ x #i.
    (ReadA( x ) @ #i) ⇒
    ((∃ #j. (!KU( x ) @ #j) ∧ (#j < #i)) ∨
     (∃ #j. (SendBarcode( x ) @ #j) ∧ (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i.
  (ReadA( x ) @ #i)
 ∧
  (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #j. (SendBarcode( x ) @ #j) ⇒ ¬(#j < #i))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∀ x #i.
           (ReadA( x ) @ #i)
          ⇒
           ((last(#i)) ∨
            (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) ∨
            (∃ #j. (SendBarcode( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))))  ∥
         (∃ x #i.
           (Human( x ) @ #i)
          ∧
           (¬(last(#i))) ∧
           (∀ #j.
             (Type( x, 'customer' ) @ #j) ⇒ ((last(#j)) ∨ (#j = #i) ∨ (#i < #j))) ∧
           (∀ #j.
             (Type( x, 'cashier' ) @ #j) ⇒ ((last(#j)) ∨ (#j = #i) ∨ (#i < #j)))) )
    case case_1
    solve( (last(#i))  ∥
           (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ #j. (SendBarcode( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) )
      case case_1
      solve( (∃ #j. (Type( $Att, 'customer' ) @ #j) ∧ #j < #i)  ∥
             (∃ #j. (Type( $Att, 'cashier' ) @ #j) ∧ #j < #i) )
        case case_1
        solve( PosDA( $Att, receipt(x) ) ▶₀ #i )
          case GetA
          solve( Pos( $A.1, $A, receipt(x) ) ▶₀ #vr.1 )
            case ChanOut_OP_case_1
            by contradiction /* from formulas */
          next
            case ChanOut_OP_case_2
            solve( Pos( $V, $A.1, receipt(x) ) ▶₀ #vr.4 )
              case ChanOut_OP_case_1
              by contradiction /* from formulas */
            next
              case ChanOut_OP_case_2
              by contradiction /* from formulas */
            qed
          next
            case ChanOut_OP_case_3
            by contradiction /* from formulas */
          next
            case ChanOut_OP_case_4
            by contradiction /* cyclic */
          qed
        next
          case Print
          by contradiction /* from formulas */
        qed
      next
        case case_2
        solve( PosDA( $Att, receipt(x) ) ▶₀ #i )
          case GetA
          solve( Pos( $A.1, $A, receipt(x) ) ▶₀ #vr.1 )
            case ChanOut_OP_case_1
            by contradiction /* from formulas */
          next
            case ChanOut_OP_case_2
            solve( Pos( $V, $A.1, receipt(x) ) ▶₀ #vr.4 )
              case ChanOut_OP_case_1
              by contradiction /* from formulas */
            next
              case ChanOut_OP_case_2
              by contradiction /* from formulas */
            qed
          next
            case ChanOut_OP_case_3
            by contradiction /* from formulas */
          next
            case ChanOut_OP_case_4
            by contradiction /* cyclic */
          qed
        next
          case Print
          by contradiction /* from formulas */
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    qed
  next
    case case_2
    solve( (∃ #j. (Type( $Att, 'customer' ) @ #j) ∧ #j < #i)  ∥
           (∃ #j. (Type( $Att, 'cashier' ) @ #j) ∧ #j < #i) )
      case case_1
      solve( (∃ #j. (Type( x.1, 'customer' ) @ #j) ∧ #j < #i.1)  ∥
             (∃ #j. (Type( x.1, 'cashier' ) @ #j) ∧ #j < #i.1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      qed
    next
      case case_2
      solve( (∃ #j. (Type( x.1, 'customer' ) @ #j) ∧ #j < #i.1)  ∥
             (∃ #j. (Type( x.1, 'cashier' ) @ #j) ∧ #j < #i.1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma lookA [sources]:
  all-traces
  "∀ x #i.
    (LookA( x ) @ #i) ⇒
    (((∃ #j. (!KU( x ) @ #j) ∧ (#j < #i)) ∨
      (∃ h c #j. (Purchase( h, c, x ) @ #j) ∧ (#j < #i))) ∨
     (∃ #j. (SendBarcode( x ) @ #j) ∧ (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i.
  (LookA( x ) @ #i)
 ∧
  (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ h c #j. (Purchase( h, c, x ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #j. (SendBarcode( x ) @ #j) ⇒ ¬(#j < #i))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∀ x #i.
           (LookA( x ) @ #i)
          ⇒
           ((last(#i)) ∨
            (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) ∨
            (∃ h c #j. (Purchase( h, c, x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) ∨
            (∃ #j. (SendBarcode( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))))  ∥
         (∃ x #i.
           (Human( x ) @ #i)
          ∧
           (¬(last(#i))) ∧
           (∀ #j.
             (Type( x, 'customer' ) @ #j) ⇒ ((last(#j)) ∨ (#j = #i) ∨ (#i < #j))) ∧
           (∀ #j.
             (Type( x, 'cashier' ) @ #j) ⇒ ((last(#j)) ∨ (#j = #i) ∨ (#i < #j)))) )
    case case_1
    solve( (last(#i))  ∥
           (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ h c #j. (Purchase( h, c, x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ #j. (SendBarcode( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) )
      case case_1
      solve( (∃ #j. (Type( $Att, 'customer' ) @ #j) ∧ #j < #i)  ∥
             (∃ #j. (Type( $Att, 'cashier' ) @ #j) ∧ #j < #i) )
        case case_1
        solve( PosDA( $Att, object(x) ) ▶₀ #i )
          case GetA
          solve( Pos( $A.1, $A, object(x) ) ▶₀ #vr.1 )
            case ChanOut_OO_case_1
            by contradiction /* from formulas */
          next
            case ChanOut_OO_case_2
            solve( Pos( $S, $A.1, object(x) ) ▶₀ #vr.4 )
              case ChanOut_OO_case_1
              by contradiction /* from formulas */
            next
              case ChanOut_OO_case_2
              by contradiction /* cyclic */
            qed
          next
            case ChanOut_OO_case_3
            by contradiction /* cyclic */
          qed
        qed
      next
        case case_2
        solve( PosDA( $Att, object(x) ) ▶₀ #i )
          case GetA
          solve( Pos( $A.1, $A, object(x) ) ▶₀ #vr.1 )
            case ChanOut_OO_case_1
            by contradiction /* from formulas */
          next
            case ChanOut_OO_case_2
            solve( Pos( $S, $A.1, object(x) ) ▶₀ #vr.4 )
              case ChanOut_OO_case_1
              by contradiction /* from formulas */
            next
              case ChanOut_OO_case_2
              by contradiction /* cyclic */
            qed
          next
            case ChanOut_OO_case_3
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    next
      case case_4
      by contradiction /* from formulas */
    qed
  next
    case case_2
    solve( (∃ #j. (Type( $Att, 'customer' ) @ #j) ∧ #j < #i)  ∥
           (∃ #j. (Type( $Att, 'cashier' ) @ #j) ∧ #j < #i) )
      case case_1
      solve( (∃ #j. (Type( x.1, 'customer' ) @ #j) ∧ #j < #i.1)  ∥
             (∃ #j. (Type( x.1, 'cashier' ) @ #j) ∧ #j < #i.1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      qed
    next
      case case_2
      solve( (∃ #j. (Type( x.1, 'customer' ) @ #j) ∧ #j < #i.1)  ∥
             (∃ #j. (Type( x.1, 'cashier' ) @ #j) ∧ #j < #i.1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma sendcashNoAtt:
  exists-trace
  "∃ a b m n #i.
    ((((Cash( a, b, m, n ) @ #i) ∧ (¬(∃ x #k. PrintA( x ) @ #k))) ∧
      (¬(∃ x #k. BuildA( x ) @ #k))) ∧
     (¬(∃ h x #k. Chatty( h, x ) @ #k))) ∧
    (¬(∃ h x #k. Cocky( h, x ) @ #k))"
/*
guarded formula characterizing all satisfying traces:
"∃ a b m n #i.
  (Cash( a, b, m, n ) @ #i)
 ∧
  (∀ x #k. (PrintA( x ) @ #k) ⇒ ⊥) ∧
  (∀ x #k. (BuildA( x ) @ #k) ⇒ ⊥) ∧
  (∀ h x #k. (Chatty( h, x ) @ #k) ⇒ ⊥) ∧
  (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥)"
*/
simplify
solve( Info( n, m ) ▶₁ #i )
  case 3Output
  solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
    case ChanIn_O
    solve( Pos( $Cu.1, $V, object(~cont_i) ) ▶₀ #vr.2 )
      case ChanOut_OO_case_1
      solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.3 )
        case ChanOut_OP_case_1
        solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.6 )
          case ChanOut_OO_case_1
          solve( Pos( $V.1, $Cu, receipt(~barcode_i) ) ▶₀ #vr.9 )
            case ChanOut_OP_case_1
            SOLVED // trace found
          qed
        qed
      qed
    qed
  qed
qed

lemma cashforvoucherNetto:
  all-traces
  "∀ ca cu c bar #i.
    (Cash( ca, cu, c, bar ) @ #i) ⇒
    (∃ #j.
      ((SendBarcode( bar ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ a2 b2 #i2. (Cash( a2, b2, c, bar ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ #j2. (SendBarcode( bar ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  ∀ #j.
   (SendBarcode( bar ) @ #j)
  ⇒
   ((¬(#j < #i)) ∨
    ((∃ a2 b2 #i2. (Cash( a2, b2, c, bar ) @ #i2) ∧ ¬(#i = #i2)) ∧
     (∀ #j2. (SendBarcode( bar ) @ #j2) ⇒ #j = #j2)))"
*/
simplify
solve( Info( bar, c ) ▶₁ #i )
  case 3Output
  solve( Info( ~barcode_i, ~cont_i ) ▶₁ #i2 )
    case 3Output
    by contradiction /* from formulas */
  qed
qed

lemma cashforcontainerNetto:
  all-traces
  "∀ ca cu c bar #i.
    (Cash( ca, cu, c, bar ) @ #i) ⇒
    (∃ v cu1 #j.
      ((GetCont( v, cu1, c ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ ca1 cu2 bar2 #i2.
           (Cash( ca1, cu2, c, bar2 ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ v1 cu3 #j2. (GetCont( v1, cu3, c ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  ∀ v cu1 #j.
   (GetCont( v, cu1, c ) @ #j)
  ⇒
   ((¬(#j < #i)) ∨
    ((∃ ca1 cu2 bar2 #i2. (Cash( ca1, cu2, c, bar2 ) @ #i2) ∧ ¬(#i = #i2)) ∧
     (∀ v1 cu3 #j2. (GetCont( v1, cu3, c ) @ #j2) ⇒ #j = #j2)))"
*/
simplify
solve( Info( bar, c ) ▶₁ #i )
  case 3Output
  solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
    case 3Output
    by contradiction /* from formulas */
  qed
qed

lemma cashforcontainerCustNetto:
  all-traces
  "∀ ca cu c bar #i.
    ((Cash( ca, cu, c, bar ) @ #i) ∧
     (((¬(∃ h x #k. Chatty( h, x ) @ #k)) ∧
       (¬(∃ h x #k. Cocky( h, x ) @ #k))) ∨
      ((¬(∃ x #k. PrintA( x ) @ #k)) ∧ (¬(∃ h x #k. Cocky( h, x ) @ #k))))) ⇒
    (∃ #j v.
      ((GetCont( v, cu, c ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ v1 #j2. (GetCont( v1, cu, c ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  ((((∀ h x #k. (Chatty( h, x ) @ #k) ⇒ ⊥) ∧
     (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥)) ∨
    ((∀ x #k. (PrintA( x ) @ #k) ⇒ ⊥) ∧
     (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥)))) ∧
  (∀ #j v.
    (GetCont( v, cu, c ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     ((∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ ¬(#i = #i2)) ∧
      (∀ v1 #j2. (GetCont( v1, cu, c ) @ #j2) ⇒ #j = #j2))))"
*/
simplify
solve( ((∀ h x #k. (Chatty( h, x ) @ #k) ⇒ ⊥) ∧
        (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥))  ∥
       ((∀ x #k. (PrintA( x ) @ #k) ⇒ ⊥) ∧
        (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥)) )
  case case_1
  solve( Info( bar, c ) ▶₁ #i )
    case 3Output
    solve( Pos( $Cu.1, $V, object(~cont_i) ) ▶₀ #vr.2 )
      case ChanOut_OO_case_1
      solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.5 )
        case ChanOut_OO_case_1
        solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
          case ChanIn_O
          solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.7 )
            case ChanOut_OP_case_1
            solve( Pos( $V.1, $Cu, receipt(~barcode_i) ) ▶₀ #vr.10 )
              case ChanOut_OP_case_1
              solve( (#i < #i2)  ∥ (#i2 < #i) )
                case case_1
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO_case_1
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO_case_1
                      by contradiction /* cyclic */
                    next
                      case ChanOut_OO_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case ChanOut_OO_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case case_2
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO_case_1
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO_case_1
                      by contradiction /* cyclic */
                    next
                      case ChanOut_OO_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case ChanOut_OO_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case ChanOut_OP_case_2
              by solve( (∃ #j. (Type( $V.1, 'customer' ) @ #j) ∧ #j < #vr.12)  ∥
                        (∃ #j. (Type( $V.1, 'cashier' ) @ #j) ∧ #j < #vr.12) )
            next
              case ChanOut_OP_case_3
              by contradiction /* from formulas */
            qed
          next
            case ChanOut_OP_case_2
            solve( (∃ #j. (Type( $Cu, 'customer' ) @ #j) ∧ #j < #vr.9)  ∥
                   (∃ #j. (Type( $Cu, 'cashier' ) @ #j) ∧ #j < #vr.9) )
              case case_1
              solve( (∃ #j. (Type( $Cu, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                     (∃ #j. (Type( $Cu, 'cashier' ) @ #j) ∧ #j < #vr.10) )
                case case_1
                solve( (∃ #j. (Type( $Cu, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                       (∃ #j. (Type( $Cu, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                  case case_1
                  solve( (∃ #j. (Type( $Cu, 'customer' ) @ #j) ∧ #j < #vr.12)  ∥
                         (∃ #j. (Type( $Cu, 'cashier' ) @ #j) ∧ #j < #vr.12) )
                    case case_1
                    solve( !KU( ~barcode_i ) @ #vk )
                      case LookA
                      by contradiction /* from formulas */
                    next
                      case ReadA
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          next
            case ChanOut_OP_case_3
            by contradiction /* from formulas */
          qed
        qed
      next
        case ChanOut_OO_case_2
        by contradiction /* from formulas */
      qed
    next
      case ChanOut_OO_case_2
      by contradiction /* from formulas */
    qed
  qed
next
  case case_2
  solve( Info( bar, c ) ▶₁ #i )
    case 3Output
    solve( Pos( $Cu.1, $V, object(~cont_i) ) ▶₀ #vr.2 )
      case ChanOut_OO_case_1
      solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.5 )
        case ChanOut_OO_case_1
        solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
          case ChanIn_O
          solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.7 )
            case ChanOut_OP_case_1
            solve( Pos( $V.1, $Cu, receipt(~barcode_i) ) ▶₀ #vr.10 )
              case ChanOut_OP_case_1
              solve( (#i < #i2)  ∥ (#i2 < #i) )
                case case_1
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO_case_1
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO_case_1
                      by contradiction /* cyclic */
                    next
                      case ChanOut_OO_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case ChanOut_OO_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case case_2
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO_case_1
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO_case_1
                      by contradiction /* cyclic */
                    next
                      case ChanOut_OO_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case ChanOut_OO_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case ChanOut_OP_case_2
              by contradiction /* from formulas */
            next
              case ChanOut_OP_case_3
              by contradiction /* from formulas */
            qed
          next
            case ChanOut_OP_case_2
            by contradiction /* from formulas */
          next
            case ChanOut_OP_case_3
            by contradiction /* from formulas */
          qed
        qed
      next
        case ChanOut_OO_case_2
        by contradiction /* from formulas */
      qed
    next
      case ChanOut_OO_case_2
      by contradiction /* from formulas */
    qed
  qed
qed

lemma cashforpurchaseNetto:
  all-traces
  "∀ ca cu c bar #i.
    ((Cash( ca, cu, c, bar ) @ #i) ∧
     ((¬(∃ x #k. BuildA( x ) @ #k)) ∨
      ((¬(∃ h x #k. Chatty( h, x ) @ #k)) ∧
       (¬(∃ h x #k. Cocky( h, x ) @ #k))))) ⇒
    (∃ cu1 s #j.
      ((Purchase( s, cu1, c ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ ca1 cu2 bar2 #i2.
           (Cash( ca1, cu2, c, bar2 ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ s1 cu3 #j2. (Purchase( s1, cu3, c ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  (((∀ x #k. (BuildA( x ) @ #k) ⇒ ⊥) ∨
    ((∀ h x #k. (Chatty( h, x ) @ #k) ⇒ ⊥) ∧
     (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥)))) ∧
  (∀ cu1 s #j.
    (Purchase( s, cu1, c ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     ((∃ ca1 cu2 bar2 #i2. (Cash( ca1, cu2, c, bar2 ) @ #i2) ∧ ¬(#i = #i2)) ∧
      (∀ s1 cu3 #j2. (Purchase( s1, cu3, c ) @ #j2) ⇒ #j = #j2))))"
*/
simplify
solve( (∀ x #k. (BuildA( x ) @ #k) ⇒ ⊥)  ∥
       ((∀ h x #k. (Chatty( h, x ) @ #k) ⇒ ⊥) ∧
        (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥)) )
  case case_1
  solve( Info( bar, c ) ▶₁ #i )
    case 3Output
    solve( (#i < #i2)  ∥ (#i2 < #i) )
      case case_1
      solve( Pos( $Cu.2, $V, object(~cont_i) ) ▶₀ #vr.2 )
        case ChanOut_OO_case_1
        solve( Pos( $S.1, $Cu.2, object(~cont_i) ) ▶₀ #vr.5 )
          case ChanOut_OO_case_1
          solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
            case 3Output
            solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.8 )
              case ChanOut_OO_case_1
              solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.11 )
                case ChanOut_OO_case_1
                by contradiction /* cyclic */
              next
                case ChanOut_OO_case_2
                solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.13)  ∥
                       (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.13) )
                  case case_1
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                    case case_1
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.15)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.15) )
                      case case_1
                      solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.16)  ∥
                             (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.16) )
                        case case_1
                        solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                               (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                          case case_1
                          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                            case case_1
                            by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                          qed
                        next
                          case case_2
                          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                            case case_1
                            by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                    case case_2
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.15)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.15) )
                      case case_2
                      solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.16)  ∥
                             (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.16) )
                        case case_2
                        solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                               (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                          case case_1
                          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                            case case_2
                            by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                          qed
                        next
                          case case_2
                          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                            case case_2
                            by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case ChanOut_OO_case_2
              solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                     (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.10) )
                case case_1
                solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                       (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                  case case_1
                  solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.12)  ∥
                         (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.12) )
                    case case_1
                    solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.13)  ∥
                           (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.13) )
                      case case_1
                      solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                             (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                        case case_1
                        solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                               (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                          case case_1
                          by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.14 )
                        qed
                      next
                        case case_2
                        solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                               (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                          case case_1
                          by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.14 )
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case ChanOut_OO_case_2
          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.7)  ∥
                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.7) )
            case case_1
            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.8) )
              case case_1
              solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.9)  ∥
                     (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.9) )
                case case_1
                solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                       (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.10) )
                  case case_1
                  solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                         (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                    case case_1
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                      case case_1
                      solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                        case ChanOut_OO
                        solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                          case 3Output
                          solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.14 )
                            case ChanOut_OO
                            solve( Pos( $S.2, $Cu.3, object(~cont_i) ) ▶₀ #vr.17 )
                              case ChanOut_OO
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                      case case_1
                      by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                    qed
                  qed
                qed
              qed
            qed
          next
            case case_2
            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.8) )
              case case_2
              solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.9)  ∥
                     (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.9) )
                case case_2
                solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                       (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.10) )
                  case case_2
                  solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                         (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                    case case_1
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                      case case_2
                      solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                        case ChanOut_OO
                        solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                          case 3Output
                          solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.14 )
                            case ChanOut_OO
                            solve( Pos( $S.2, $Cu.3, object(~cont_i) ) ▶₀ #vr.17 )
                              case ChanOut_OO
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                      case case_2
                      by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case ChanOut_OO_case_2
        solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.4)  ∥
               (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.4) )
          case case_1
          solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.5)  ∥
                 (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.5) )
            case case_1
            solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.6)  ∥
                   (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.6) )
              case case_1
              solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.7)  ∥
                     (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.7) )
                case case_1
                solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                       (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.8) )
                  case case_1
                  solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                         (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.8) )
                    case case_1
                    solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.8 )
                      case ChanOut_OO
                      solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                        case 3Output
                        solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.11 )
                          case ChanOut_OO_case_1
                          by solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.14 )
                        next
                          case ChanOut_OO_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                         (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.8) )
                    case case_1
                    by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.8 )
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case case_2
      solve( Pos( $Cu.2, $V, object(~cont_i) ) ▶₀ #vr.2 )
        case ChanOut_OO_case_1
        solve( Pos( $S.1, $Cu.2, object(~cont_i) ) ▶₀ #vr.5 )
          case ChanOut_OO_case_1
          solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
            case 3Output
            solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.8 )
              case ChanOut_OO_case_1
              solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.11 )
                case ChanOut_OO_case_1
                by contradiction /* cyclic */
              next
                case ChanOut_OO_case_2
                solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.13)  ∥
                       (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.13) )
                  case case_1
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                    case case_1
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.15)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.15) )
                      case case_1
                      solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.16)  ∥
                             (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.16) )
                        case case_1
                        solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                               (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                          case case_1
                          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                            case case_1
                            by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                          qed
                        next
                          case case_2
                          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                            case case_1
                            by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                    case case_2
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.15)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.15) )
                      case case_2
                      solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.16)  ∥
                             (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.16) )
                        case case_2
                        solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                               (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                          case case_1
                          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                            case case_2
                            by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                          qed
                        next
                          case case_2
                          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                            case case_2
                            by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case ChanOut_OO_case_2
              solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                     (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.10) )
                case case_1
                solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                       (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                  case case_1
                  solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.12)  ∥
                         (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.12) )
                    case case_1
                    solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.13)  ∥
                           (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.13) )
                      case case_1
                      solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                             (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                        case case_1
                        solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                               (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                          case case_1
                          by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.14 )
                        qed
                      next
                        case case_2
                        solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                               (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                          case case_1
                          by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.14 )
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case ChanOut_OO_case_2
          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.7)  ∥
                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.7) )
            case case_1
            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.8) )
              case case_1
              solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.9)  ∥
                     (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.9) )
                case case_1
                solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                       (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.10) )
                  case case_1
                  solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                         (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                    case case_1
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                      case case_1
                      solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                        case ChanOut_OO
                        solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                          case 3Output
                          solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.14 )
                            case ChanOut_OO
                            solve( Pos( $S.2, $Cu.3, object(~cont_i) ) ▶₀ #vr.17 )
                              case ChanOut_OO
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                      case case_1
                      by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                    qed
                  qed
                qed
              qed
            qed
          next
            case case_2
            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.8) )
              case case_2
              solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.9)  ∥
                     (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.9) )
                case case_2
                solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                       (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.10) )
                  case case_2
                  solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                         (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                    case case_1
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                      case case_2
                      solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                        case ChanOut_OO
                        solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                          case 3Output
                          solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.14 )
                            case ChanOut_OO
                            solve( Pos( $S.2, $Cu.3, object(~cont_i) ) ▶₀ #vr.17 )
                              case ChanOut_OO
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                      case case_2
                      by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case ChanOut_OO_case_2
        solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.4)  ∥
               (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.4) )
          case case_1
          solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.5)  ∥
                 (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.5) )
            case case_1
            solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.6)  ∥
                   (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.6) )
              case case_1
              solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.7)  ∥
                     (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.7) )
                case case_1
                solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                       (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.8) )
                  case case_1
                  solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                         (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.8) )
                    case case_1
                    solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.8 )
                      case ChanOut_OO
                      solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                        case 3Output
                        solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.11 )
                          case ChanOut_OO_case_1
                          by solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.14 )
                        next
                          case ChanOut_OO_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                         (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.8) )
                    case case_1
                    by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.8 )
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case case_2
  solve( Info( bar, c ) ▶₁ #i )
    case 3Output
    solve( (#i < #i2)  ∥ (#i2 < #i) )
      case case_1
      solve( Pos( $Cu.2, $V, object(~cont_i) ) ▶₀ #vr.2 )
        case ChanOut_OO_case_1
        solve( Pos( $S.1, $Cu.2, object(~cont_i) ) ▶₀ #vr.5 )
          case ChanOut_OO_case_1
          solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
            case 3Output
            solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.8 )
              case ChanOut_OO_case_1
              solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.11 )
                case ChanOut_OO_case_1
                by contradiction /* cyclic */
              next
                case ChanOut_OO_case_2
                by contradiction /* from formulas */
              qed
            next
              case ChanOut_OO_case_2
              by contradiction /* from formulas */
            qed
          qed
        next
          case ChanOut_OO_case_2
          by contradiction /* from formulas */
        qed
      next
        case ChanOut_OO_case_2
        by contradiction /* from formulas */
      qed
    next
      case case_2
      solve( Pos( $Cu.2, $V, object(~cont_i) ) ▶₀ #vr.2 )
        case ChanOut_OO_case_1
        solve( Pos( $S.1, $Cu.2, object(~cont_i) ) ▶₀ #vr.5 )
          case ChanOut_OO_case_1
          solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
            case 3Output
            solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.8 )
              case ChanOut_OO_case_1
              solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.11 )
                case ChanOut_OO_case_1
                by contradiction /* cyclic */
              next
                case ChanOut_OO_case_2
                by contradiction /* from formulas */
              qed
            next
              case ChanOut_OO_case_2
              by contradiction /* from formulas */
            qed
          qed
        next
          case ChanOut_OO_case_2
          by contradiction /* from formulas */
        qed
      next
        case ChanOut_OO_case_2
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma cashforpurchaseCustNetto:
  all-traces
  "∀ ca cu c bar #i.
    ((Cash( ca, cu, c, bar ) @ #i) ∧
     (((¬(∃ h x #k. Chatty( h, x ) @ #k)) ∧
       (¬(∃ h x #k. Cocky( h, x ) @ #k))) ∨
      (((¬(∃ x #k. PrintA( x ) @ #k)) ∧ (¬(∃ h x #k. Cocky( h, x ) @ #k))) ∧
       (¬(∃ x #k. BuildA( x ) @ #k))))) ⇒
    (∃ s #j.
      ((Purchase( s, cu, c ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ s1 #j2. (Purchase( s1, cu, c ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  ((((∀ h x #k. (Chatty( h, x ) @ #k) ⇒ ⊥) ∧
     (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥)) ∨
    ((∀ x #k. (PrintA( x ) @ #k) ⇒ ⊥) ∧
     (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥) ∧
     (∀ x #k. (BuildA( x ) @ #k) ⇒ ⊥)))) ∧
  (∀ s #j.
    (Purchase( s, cu, c ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     ((∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ ¬(#i = #i2)) ∧
      (∀ s1 #j2. (Purchase( s1, cu, c ) @ #j2) ⇒ #j = #j2))))"
*/
simplify
solve( ((∀ h x #k. (Chatty( h, x ) @ #k) ⇒ ⊥) ∧
        (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥))  ∥
       ((∀ x #k. (PrintA( x ) @ #k) ⇒ ⊥) ∧
        (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥) ∧
        (∀ x #k. (BuildA( x ) @ #k) ⇒ ⊥)) )
  case case_1
  solve( Info( bar, c ) ▶₁ #i )
    case 3Output
    solve( Pos( $Cu.1, $V, object(~cont_i) ) ▶₀ #vr.2 )
      case ChanOut_OO_case_1
      solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.5 )
        case ChanOut_OO_case_1
        solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
          case ChanIn_O
          solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.7 )
            case ChanOut_OP_case_1
            solve( Pos( $V.1, $Cu, receipt(~barcode_i) ) ▶₀ #vr.10 )
              case ChanOut_OP_case_1
              solve( (#i < #i2)  ∥ (#i2 < #i) )
                case case_1
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO_case_1
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO_case_1
                      by contradiction /* cyclic */
                    next
                      case ChanOut_OO_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case ChanOut_OO_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case case_2
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO_case_1
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO_case_1
                      by contradiction /* cyclic */
                    next
                      case ChanOut_OO_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case ChanOut_OO_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case ChanOut_OP_case_2
              solve( !KU( ~barcode_i ) @ #vk )
                case LookA
                by contradiction /* from formulas */
              next
                case ReadA
                by contradiction /* from formulas */
              qed
            next
              case ChanOut_OP_case_3
              by contradiction /* from formulas */
            qed
          next
            case ChanOut_OP_case_2
            solve( !KU( ~barcode_i ) @ #vk )
              case LookA
              by contradiction /* from formulas */
            next
              case ReadA
              by contradiction /* from formulas */
            qed
          next
            case ChanOut_OP_case_3
            by contradiction /* from formulas */
          qed
        qed
      next
        case ChanOut_OO_case_2
        by contradiction /* from formulas */
      qed
    next
      case ChanOut_OO_case_2
      by contradiction /* from formulas */
    qed
  qed
next
  case case_2
  solve( Info( bar, c ) ▶₁ #i )
    case 3Output
    solve( Pos( $Cu.1, $V, object(~cont_i) ) ▶₀ #vr.2 )
      case ChanOut_OO_case_1
      solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.5 )
        case ChanOut_OO_case_1
        solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
          case ChanIn_O
          solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.7 )
            case ChanOut_OP_case_1
            solve( Pos( $V.1, $Cu, receipt(~barcode_i) ) ▶₀ #vr.10 )
              case ChanOut_OP_case_1
              solve( (#i < #i2)  ∥ (#i2 < #i) )
                case case_1
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO_case_1
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO_case_1
                      by contradiction /* cyclic */
                    next
                      case ChanOut_OO_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case ChanOut_OO_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case case_2
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO_case_1
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO_case_1
                      by contradiction /* cyclic */
                    next
                      case ChanOut_OO_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case ChanOut_OO_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case ChanOut_OP_case_2
              by contradiction /* from formulas */
            next
              case ChanOut_OP_case_3
              by contradiction /* from formulas */
            qed
          next
            case ChanOut_OP_case_2
            by contradiction /* from formulas */
          next
            case ChanOut_OP_case_3
            by contradiction /* from formulas */
          qed
        qed
      next
        case ChanOut_OO_case_2
        by contradiction /* from formulas */
      qed
    next
      case ChanOut_OO_case_2
      by contradiction /* from formulas */
    qed
  qed
qed

lemma cashforpurchaseCustNettoAttack:
  all-traces
  "∀ ca cu c bar #i.
    (Cash( ca, cu, c, bar ) @ #i) ⇒
    (∃ s #j.
      ((Purchase( s, cu, c ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ s1 #j2. (Purchase( s1, cu, c ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  ∀ s #j.
   (Purchase( s, cu, c ) @ #j)
  ⇒
   ((¬(#j < #i)) ∨
    ((∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ ¬(#i = #i2)) ∧
     (∀ s1 #j2. (Purchase( s1, cu, c ) @ #j2) ⇒ #j = #j2)))"
*/
simplify
solve( Info( bar, c ) ▶₁ #i )
  case 3Output
  solve( Pos( $Cu.1, $V, object(~cont_i) ) ▶₀ #vr.2 )
    case ChanOut_OO_case_1
    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.5 )
      case ChanOut_OO_case_1
      solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
        case ChanIn_O
        solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.7 )
          case ChanOut_OP_case_2
          solve( (∃ #j. (Type( $Cu, 'customer' ) @ #j) ∧ #j < #vr.9)  ∥
                 (∃ #j. (Type( $Cu, 'cashier' ) @ #j) ∧ #j < #vr.9) )
            case case_1
            solve( (∃ #j. (Type( $Cu, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                   (∃ #j. (Type( $Cu, 'cashier' ) @ #j) ∧ #j < #vr.10) )
              case case_1
              solve( (∃ #j. (Type( $Cu, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                     (∃ #j. (Type( $Cu, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                case case_1
                solve( (∃ #j. (Type( $Cu, 'customer' ) @ #j) ∧ #j < #vr.12)  ∥
                       (∃ #j. (Type( $Cu, 'cashier' ) @ #j) ∧ #j < #vr.12) )
                  case case_1
                  solve( !KU( ~barcode_i ) @ #vk )
                    case ReadA
                    solve( (∃ #j. (Type( $Att, 'customer' ) @ #j) ∧ #j < #vr.13)  ∥
                           (∃ #j. (Type( $Att, 'cashier' ) @ #j) ∧ #j < #vr.13) )
                      case case_1
                      solve( (∃ #j. (Type( $Att, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                             (∃ #j. (Type( $Att, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                        case case_1
                        solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.15)  ∥
                               (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.15) )
                          case case_1
                          solve( (∃ #j. (Type( $Att, 'customer' ) @ #j) ∧ #j < #vr.15)  ∥
                                 (∃ #j. (Type( $Att, 'cashier' ) @ #j) ∧ #j < #vr.15) )
                            case case_1
                            solve( Pos( $A.1, $A, receipt(~barcode_i) ) ▶₀ #vr.15 )
                              case ChanOut_OP_case_1
                              solve( Type( $Cu, 'customer' ) @ #j )
                                case 1Purchase
                                solve( Type( $Cu, 'customer' ) @ #j.1 )
                                  case 1Purchase
                                  solve( Type( $Cu, 'customer' ) @ #j.2 )
                                    case 1Purchase
                                    solve( Type( $Cu, 'customer' ) @ #j.3 )
                                      case 1Purchase
                                      solve( Type( $Att, 'customer' ) @ #j.4 )
                                        case 1Purchase
                                        solve( Type( $Att, 'customer' ) @ #j.5 )
                                          case 1Purchase
                                          solve( Type( $A, 'customer' ) @ #j.6 )
                                            case 1Purchase
                                            solve( Type( $Att, 'customer' ) @ #j.7 )
                                              case 1Purchase
                                              SOLVED // trace found
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma cashforpurchaseNettoAttack:
  all-traces
  "∀ ca cu c bar #i.
    (Cash( ca, cu, c, bar ) @ #i) ⇒
    (∃ s cu1 #j.
      ((Purchase( s, cu1, c ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ ca1 cu2 bar2 #i2.
           (Cash( ca1, cu2, c, bar2 ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ s1 cu3 #j2. (Purchase( s1, cu3, c ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  ∀ s cu1 #j.
   (Purchase( s, cu1, c ) @ #j)
  ⇒
   ((¬(#j < #i)) ∨
    ((∃ ca1 cu2 bar2 #i2. (Cash( ca1, cu2, c, bar2 ) @ #i2) ∧ ¬(#i = #i2)) ∧
     (∀ s1 cu3 #j2. (Purchase( s1, cu3, c ) @ #j2) ⇒ #j = #j2)))"
*/
simplify
solve( Info( bar, c ) ▶₁ #i )
  case 3Output
  solve( (#i < #i2)  ∥ (#i2 < #i) )
    case case_1
    solve( Pos( $Cu.2, $V, object(~cont_i) ) ▶₀ #vr.2 )
      case ChanOut_OO_case_1
      solve( Pos( $S.1, $Cu.2, object(~cont_i) ) ▶₀ #vr.5 )
        case ChanOut_OO_case_1
        solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
          case 3Output
          solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.8 )
            case ChanOut_OO_case_1
            solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.11 )
              case ChanOut_OO_case_1
              by contradiction /* cyclic */
            next
              case ChanOut_OO_case_2
              solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.13)  ∥
                     (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.13) )
                case case_1
                solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                       (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                  case case_1
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.15)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.15) )
                    case case_1
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.16)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.16) )
                      case case_1
                      solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                             (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                        case case_1
                        solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                               (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                          case case_1
                          by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                        qed
                      next
                        case case_2
                        solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                               (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                          case case_1
                          by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                       (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                  case case_2
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.15)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.15) )
                    case case_2
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.16)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.16) )
                      case case_2
                      solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                             (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                        case case_1
                        solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                               (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                          case case_2
                          by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                        qed
                      next
                        case case_2
                        solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                               (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                          case case_2
                          by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case ChanOut_OO_case_2
            solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                   (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.10) )
              case case_1
              solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                     (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                case case_1
                solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.12)  ∥
                       (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.12) )
                  case case_1
                  solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.13)  ∥
                         (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.13) )
                    case case_1
                    solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                           (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                      case case_1
                      solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                             (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                        case case_1
                        by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.14 )
                      qed
                    next
                      case case_2
                      solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                             (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                        case case_1
                        by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.14 )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case ChanOut_OO_case_2
        solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.7)  ∥
               (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.7) )
          case case_1
          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.8) )
            case case_1
            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.9)  ∥
                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.9) )
              case case_1
              solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                     (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.10) )
                case case_1
                solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                       (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                  case case_1
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                    case case_1
                    solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                      case ChanOut_OO
                      solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                        case 3Output
                        solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.14 )
                          case ChanOut_OO
                          solve( Pos( $S.2, $Cu.3, object(~cont_i) ) ▶₀ #vr.17 )
                            case ChanOut_OO
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                    case case_1
                    by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                  qed
                qed
              qed
            qed
          qed
        next
          case case_2
          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.8) )
            case case_2
            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.9)  ∥
                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.9) )
              case case_2
              solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                     (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.10) )
                case case_2
                solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                       (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                  case case_1
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                    case case_2
                    solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                      case ChanOut_OO
                      solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                        case 3Output
                        solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.14 )
                          case ChanOut_OO
                          solve( Pos( $S.2, $Cu.3, object(~cont_i) ) ▶₀ #vr.17 )
                            case ChanOut_OO
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                    case case_2
                    by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case ChanOut_OO_case_2
      solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.4)  ∥
             (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.4) )
        case case_1
        solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.5)  ∥
               (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.5) )
          case case_1
          solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.6)  ∥
                 (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.6) )
            case case_1
            solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.7)  ∥
                   (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.7) )
              case case_1
              solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                     (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.8) )
                case case_1
                solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                       (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.8) )
                  case case_1
                  solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.8 )
                    case ChanOut_OO
                    solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                      case 3Output
                      solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.11 )
                        case ChanOut_OO_case_1
                        by solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.14 )
                      next
                        case ChanOut_OO_case_2
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                       (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.8) )
                  case case_1
                  by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.8 )
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case case_2
    solve( Pos( $Cu.2, $V, object(~cont_i) ) ▶₀ #vr.2 )
      case ChanOut_OO_case_1
      solve( Pos( $S.1, $Cu.2, object(~cont_i) ) ▶₀ #vr.5 )
        case ChanOut_OO_case_1
        solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
          case 3Output
          solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.8 )
            case ChanOut_OO_case_1
            solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.11 )
              case ChanOut_OO_case_1
              by contradiction /* cyclic */
            next
              case ChanOut_OO_case_2
              solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.13)  ∥
                     (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.13) )
                case case_1
                solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                       (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                  case case_1
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.15)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.15) )
                    case case_1
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.16)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.16) )
                      case case_1
                      solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                             (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                        case case_1
                        solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                               (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                          case case_1
                          by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                        qed
                      next
                        case case_2
                        solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                               (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                          case case_1
                          by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                       (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                  case case_2
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.15)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.15) )
                    case case_2
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.16)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.16) )
                      case case_2
                      solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                             (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                        case case_1
                        solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                               (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                          case case_2
                          by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                        qed
                      next
                        case case_2
                        solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                               (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                          case case_2
                          by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case ChanOut_OO_case_2
            solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                   (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.10) )
              case case_1
              solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                     (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                case case_1
                solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.12)  ∥
                       (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.12) )
                  case case_1
                  solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.13)  ∥
                         (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.13) )
                    case case_1
                    solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                           (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                      case case_1
                      solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                             (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                        case case_1
                        by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.14 )
                      qed
                    next
                      case case_2
                      solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                             (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                        case case_1
                        by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.14 )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case ChanOut_OO_case_2
        solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.7)  ∥
               (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.7) )
          case case_1
          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.8) )
            case case_1
            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.9)  ∥
                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.9) )
              case case_1
              solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                     (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.10) )
                case case_1
                solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                       (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                  case case_1
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                    case case_1
                    solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                      case ChanOut_OO
                      solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                        case 3Output
                        solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.14 )
                          case ChanOut_OO
                          solve( Pos( $S.2, $Cu.3, object(~cont_i) ) ▶₀ #vr.17 )
                            case ChanOut_OO
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                    case case_1
                    by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                  qed
                qed
              qed
            qed
          qed
        next
          case case_2
          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.8) )
            case case_2
            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.9)  ∥
                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.9) )
              case case_2
              solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                     (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.10) )
                case case_2
                solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                       (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                  case case_1
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                    case case_2
                    solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                      case ChanOut_OO
                      solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                        case 3Output
                        solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.14 )
                          case ChanOut_OO
                          solve( Pos( $S.2, $Cu.3, object(~cont_i) ) ▶₀ #vr.17 )
                            case ChanOut_OO
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                    case case_2
                    by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case ChanOut_OO_case_2
      solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.4)  ∥
             (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.4) )
        case case_1
        solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.5)  ∥
               (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.5) )
          case case_1
          solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.6)  ∥
                 (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.6) )
            case case_1
            solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.7)  ∥
                   (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.7) )
              case case_1
              solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                     (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.8) )
                case case_1
                solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                       (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.8) )
                  case case_1
                  solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.8 )
                    case ChanOut_OO
                    solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                      case 3Output
                      solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.11 )
                        case ChanOut_OO_case_1
                        by solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.14 )
                      next
                        case ChanOut_OO_case_2
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                       (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.8) )
                  case case_1
                  by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.8 )
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma cashforcontainerCustNettoAttack:
  all-traces
  "∀ ca cu c bar #i.
    (Cash( ca, cu, c, bar ) @ #i) ⇒
    (∃ #j v.
      ((GetCont( v, cu, c ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ v1 #j2. (GetCont( v1, cu, c ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  ∀ #j v.
   (GetCont( v, cu, c ) @ #j)
  ⇒
   ((¬(#j < #i)) ∨
    ((∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ ¬(#i = #i2)) ∧
     (∀ v1 #j2. (GetCont( v1, cu, c ) @ #j2) ⇒ #j = #j2)))"
*/
simplify
solve( Info( bar, c ) ▶₁ #i )
  case 3Output
  solve( Pos( $Cu.1, $V, object(~cont_i) ) ▶₀ #vr.2 )
    case ChanOut_OO_case_1
    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.5 )
      case ChanOut_OO_case_1
      solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
        case ChanIn_O
        solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.7 )
          case ChanOut_OP_case_2
          solve( (∃ #j. (Type( $Cu, 'customer' ) @ #j) ∧ #j < #vr.9)  ∥
                 (∃ #j. (Type( $Cu, 'cashier' ) @ #j) ∧ #j < #vr.9) )
            case case_1
            solve( (∃ #j. (Type( $Cu, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                   (∃ #j. (Type( $Cu, 'cashier' ) @ #j) ∧ #j < #vr.10) )
              case case_1
              solve( (∃ #j. (Type( $Cu, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                     (∃ #j. (Type( $Cu, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                case case_1
                solve( (∃ #j. (Type( $Cu, 'customer' ) @ #j) ∧ #j < #vr.12)  ∥
                       (∃ #j. (Type( $Cu, 'cashier' ) @ #j) ∧ #j < #vr.12) )
                  case case_1
                  solve( !KU( ~barcode_i ) @ #vk )
                    case ReadA
                    solve( (∃ #j. (Type( $Att, 'customer' ) @ #j) ∧ #j < #vr.13)  ∥
                           (∃ #j. (Type( $Att, 'cashier' ) @ #j) ∧ #j < #vr.13) )
                      case case_1
                      solve( (∃ #j. (Type( $Att, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                             (∃ #j. (Type( $Att, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                        case case_1
                        solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.15)  ∥
                               (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.15) )
                          case case_1
                          solve( (∃ #j. (Type( $Att, 'customer' ) @ #j) ∧ #j < #vr.15)  ∥
                                 (∃ #j. (Type( $Att, 'cashier' ) @ #j) ∧ #j < #vr.15) )
                            case case_1
                            solve( Pos( $A.1, $A, receipt(~barcode_i) ) ▶₀ #vr.15 )
                              case ChanOut_OP_case_1
                              solve( Type( $Cu, 'customer' ) @ #j )
                                case 1Purchase
                                solve( Type( $Cu, 'customer' ) @ #j.1 )
                                  case 1Purchase
                                  solve( Type( $Cu, 'customer' ) @ #j.2 )
                                    case 1Purchase
                                    solve( Type( $Cu, 'customer' ) @ #j.3 )
                                      case 1Purchase
                                      solve( Type( $Att, 'customer' ) @ #j.4 )
                                        case 1Purchase
                                        solve( Type( $Att, 'customer' ) @ #j.5 )
                                          case 1Purchase
                                          solve( Type( $A, 'customer' ) @ #j.6 )
                                            case 1Purchase
                                            solve( Type( $Att, 'customer' ) @ #j.7 )
                                              case 1Purchase
                                              SOLVED // trace found
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

/*
WARNING: the following wellformedness checks failed!

Lemma actions:
  lemma `chatty' references action 
    (ProtoFact Linear "Chatty" 2,2,Linear)
  but no rule has such an action.
  
  lemma `sendcashNoAtt' references action 
    (ProtoFact Linear "BuildA" 1,1,Linear)
  but no rule has such an action.
  
  lemma `sendcashNoAtt' references action 
    (ProtoFact Linear "Chatty" 2,2,Linear)
  but no rule has such an action.
  
  lemma `cashforcontainerCustNetto' references action 
    (ProtoFact Linear "Chatty" 2,2,Linear)
  but no rule has such an action.
  
  lemma `cashforpurchaseNetto' references action 
    (ProtoFact Linear "BuildA" 1,1,Linear)
  but no rule has such an action.
  
  lemma `cashforpurchaseNetto' references action 
    (ProtoFact Linear "Chatty" 2,2,Linear)
  but no rule has such an action.
  
  lemma `cashforpurchaseCustNetto' references action 
    (ProtoFact Linear "BuildA" 1,1,Linear)
  but no rule has such an action.
  
  lemma `cashforpurchaseCustNetto' references action 
    (ProtoFact Linear "Chatty" 2,2,Linear)
  but no rule has such an action.
*/

end

==============================================================================
summary of summaries:

analyzed: /Users/finn/Documents/Research_Project_Tamarin/TamarinAutoRunner/exampleFiles/Netto.spthy

  WARNING: 8 wellformedness check failed!
           The analysis results might be wrong!
  
  chatty (all-traces): verified (12 steps)
  readA (all-traces): verified (33 steps)
  lookA (all-traces): verified (30 steps)
  sendcashNoAtt (exists-trace): verified (8 steps)
  cashforvoucherNetto (all-traces): verified (4 steps)
  cashforcontainerNetto (all-traces): verified (4 steps)
  cashforcontainerCustNetto (all-traces): verified (58 steps)
  cashforpurchaseNetto (all-traces): verified (166 steps)
  cashforpurchaseCustNetto (all-traces): verified (56 steps)
  cashforpurchaseCustNettoAttack (all-traces): falsified - found trace (25 steps)
  cashforpurchaseNettoAttack (all-traces): verified (143 steps)
  cashforcontainerCustNettoAttack (all-traces): falsified - found trace (25 steps)

==============================================================================
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.

theory Netto begin

// Function signature and definition of the equational theory E

functions: fst/1, get/1, look/1, object/1, pair/2, receipt/1, snd/1
equations:
    fst(<x.1, x.2>) = x.1,
    get(object(a)) = a,
    look(receipt(a)) = a,
    snd(<x.1, x.2>) = x.2



rule (modulo E) 1Purchase:
   [ Fr( ~cont_i ) ]
  --[ Type( $Cu, 'customer' ), Purchase( $S, $Cu, ~cont_i ) ]->
   [ !Container( object(~cont_i) ), Out_O( $S, $Cu, object(~cont_i) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) 3Output:
   [
   !Container( object(cont_i) ), Fr( ~barcode_i ),
   In_O( $Cu, $V, object(cont_i) )
   ]
  --[
  SendBarcode( ~barcode_i ), GetCont( $V, $Cu, cont_i ),
  Type( $Cu, 'customer' ), Type( $V, 'vending' )
  ]->
   [ Out_O( $V, $Cu, receipt(~barcode_i) ), Info( ~barcode_i, cont_i ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) 5Cash:
   [ In_O( $Cu, $Ca, receipt(barcode_i) ), Info( barcode_i, cont_i ) ]
  --[
  Cash( $Ca, $Cu, cont_i, barcode_i ), Type( $Cu, 'customer' ),
  Type( $Ca, 'cashier' )
  ]->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) 2Return:
   [ In_O( $S, $Cu, object(cont_i) ) ]
  --[ Type( $Cu, 'customer' ), Type( $V, 'vending' ) ]->
   [ Out_O( $Cu, $V, object(cont_i) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) 4Hand:
   [ In_O( $V, $Cu, receipt(barcode_i) ) ]
  --[
  Type( $Ca, 'cashier' ), Type( $Cu, 'customer' ), Type( $V, 'vending' )
  ]->
   [ Out_O( $Cu, $Ca, receipt(barcode_i) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ChanOut_I:
   [ Out_I( $A, $B, x ) ]
  --[ ChanOut_I( $A, $B, x ), Neq( $A, $B ) ]->
   [ !Sec_I( $A, $B, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ChanIn_I:
   [ !Sec_I( $A, $B, x ) ]
  --[ ChanIn_I( $A, $B, x ), Neq( $A, $B ) ]->
   [ In_I( $A, $B, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ChanIn_O:
   [ Pos( $A, $B, x ) ]
  --[ ChanIn_O( $A, $B, x ), Neq( $A, $B ) ]->
   [ In_O( $A, $B, x ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) ChanOut_OO:
   [ Out_O( $A, $B, object(y) ) ]
  --[ ChanIn_O( $A, $B, object(y) ), Neq( $A, $B ) ]->
   [ Pos( $A, $B, object(y) ), Look( $B, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ChanOut_OP:
   [ Out_O( $A, $B, receipt(y) ) ]
  --[
  ChanIn_O( $A, $B, receipt(y) ), Neq( $A, $B ), NoType( $B, 'vending' )
  ]->
   [ Pos( $A, $B, receipt(y) ), Read( $B, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Receive_HK:
   [ GotInfo( $H, x ) ] --[ Once( $H, x ) ]-> [ !HK( $H, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Look:
   [ Look( $A, x ) ] --[ Human( $A ) ]-> [ GotInfo( $A, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Read:
   [ Read( $A, x ) ] --[ Human( $A ) ]-> [ GotInfo( $A, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Cocky[color=#ff0000]:
   [ Pos( $A, $B, x ) ]
  --[
  Cocky( $B, x ), Neq( $A, $B ), Neq( $A, $C ), Neq( $B, $C ), Human( $B ),
  Human( $C ), Once( x, x )
  ]->
   [ In_OA( $B, $C, x ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) CockyGet:
   [ Out_OA( $A, $B, x ) ]
  --[ Neq( $A, $B ), Human( $A ) ]->
   [ Out_O( $A, $B, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) GiveA:
   [ PosUA( $Att, x ) ] --[ Human( $Att ) ]-> [ Out_OA( $Att, $B, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) GetA:
   [ In_OA( $A, $Att, x ) ] --[ Human( $Att ) ]-> [ PosDA( $Att, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) LookA:
   [ PosDA( $Att, object(y) ) ]
  --[ LookA( y ), Human( $Att ) ]->
   [ Out( y ), PosUA( $Att, object(y) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) ReadA:
   [ PosDA( $Att, receipt(y) ) ]
  --[ ReadA( y ), Human( $Att ) ]->
   [ Out( y ), PosUA( $Att, receipt(y) ) ]

  /* has exactly the trivial AC variant */

restriction inequality:
  "∀ x #i. (Neq( x, x ) @ #i) ⇒ (⊥)"
  // safety formula

restriction type_distinct:
  "∀ x t1 t2 #i #j.
    ((Type( x, t1 ) @ #i) ∧ (Type( x, t2 ) @ #j)) ⇒ (t1 = t2)"
  // safety formula

restriction once:
  "∀ x y #i #j. ((Once( x, y ) @ #i) ∧ (Once( x, y ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction human:
  "∀ x #i.
    (Human( x ) @ #i) ⇒
    ((∃ #j. (Type( x, 'customer' ) @ #j) ∧ (#j < #i)) ∨
     (∃ #j. (Type( x, 'cashier' ) @ #j) ∧ (#j < #i)))"

restriction notype:
  "∀ x y #i. (NoType( x, y ) @ #i) ⇒ (¬(∃ #j. Type( x, y ) @ #j))"
  // safety formula

lemma chatty [sources]:
  all-traces
  "∀ h x #i.
    (Chatty( h, x ) @ #i) ⇒
    (((∃ #j. (!KU( x ) @ #j) ∧ (#j < #i)) ∨
      (∃ s c #j. (Purchase( s, c, x ) @ #j) ∧ (#j < #i))) ∨
     (∃ #j. (SendBarcode( x ) @ #j) ∧ (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ h x #i.
  (Chatty( h, x ) @ #i)
 ∧
  (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ s c #j. (Purchase( s, c, x ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #j. (SendBarcode( x ) @ #j) ⇒ ¬(#j < #i))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∀ h x #i.
           (Chatty( h, x ) @ #i)
          ⇒
           ((last(#i)) ∨
            (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) ∨
            (∃ s c #j. (Purchase( s, c, x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) ∨
            (∃ #j. (SendBarcode( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))))  ∥
         (∃ x #i.
           (Human( x ) @ #i)
          ∧
           (¬(last(#i))) ∧
           (∀ #j.
             (Type( x, 'customer' ) @ #j) ⇒ ((last(#j)) ∨ (#j = #i) ∨ (#i < #j))) ∧
           (∀ #j.
             (Type( x, 'cashier' ) @ #j) ⇒ ((last(#j)) ∨ (#j = #i) ∨ (#i < #j)))) )
    case case_1
    solve( (last(#i))  ∥
           (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ s c #j. (Purchase( s, c, x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ #j. (SendBarcode( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) )
      case case_1
      by solve( Chatty( h, x ) @ #i )
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    next
      case case_4
      by contradiction /* from formulas */
    qed
  next
    case case_2
    solve( (∃ #j. (Type( x, 'customer' ) @ #j) ∧ #j < #i)  ∥
           (∃ #j. (Type( x, 'cashier' ) @ #j) ∧ #j < #i) )
      case case_1
      by contradiction /* from formulas */
    next
      case case_2
      by contradiction /* from formulas */
    qed
  qed
qed

lemma readA [sources]:
  all-traces
  "∀ x #i.
    (ReadA( x ) @ #i) ⇒
    ((∃ #j. (!KU( x ) @ #j) ∧ (#j < #i)) ∨
     (∃ #j. (SendBarcode( x ) @ #j) ∧ (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i.
  (ReadA( x ) @ #i)
 ∧
  (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #j. (SendBarcode( x ) @ #j) ⇒ ¬(#j < #i))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∀ x #i.
           (ReadA( x ) @ #i)
          ⇒
           ((last(#i)) ∨
            (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) ∨
            (∃ #j. (SendBarcode( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))))  ∥
         (∃ x #i.
           (Human( x ) @ #i)
          ∧
           (¬(last(#i))) ∧
           (∀ #j.
             (Type( x, 'customer' ) @ #j) ⇒ ((last(#j)) ∨ (#j = #i) ∨ (#i < #j))) ∧
           (∀ #j.
             (Type( x, 'cashier' ) @ #j) ⇒ ((last(#j)) ∨ (#j = #i) ∨ (#i < #j)))) )
    case case_1
    solve( (last(#i))  ∥
           (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ #j. (SendBarcode( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) )
      case case_1
      solve( (∃ #j. (Type( $Att, 'customer' ) @ #j) ∧ #j < #i)  ∥
             (∃ #j. (Type( $Att, 'cashier' ) @ #j) ∧ #j < #i) )
        case case_1
        solve( PosDA( $Att, receipt(x) ) ▶₀ #i )
          case GetA
          solve( Pos( $A.1, $A, receipt(x) ) ▶₀ #vr.1 )
            case ChanOut_OP_case_1
            by contradiction /* from formulas */
          next
            case ChanOut_OP_case_2
            solve( Pos( $V, $A.1, receipt(x) ) ▶₀ #vr.4 )
              case ChanOut_OP
              by contradiction /* from formulas */
            qed
          next
            case ChanOut_OP_case_3
            by contradiction /* cyclic */
          qed
        qed
      next
        case case_2
        solve( PosDA( $Att, receipt(x) ) ▶₀ #i )
          case GetA
          solve( Pos( $A.1, $A, receipt(x) ) ▶₀ #vr.1 )
            case ChanOut_OP_case_1
            by contradiction /* from formulas */
          next
            case ChanOut_OP_case_2
            solve( Pos( $V, $A.1, receipt(x) ) ▶₀ #vr.4 )
              case ChanOut_OP
              by contradiction /* from formulas */
            qed
          next
            case ChanOut_OP_case_3
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    qed
  next
    case case_2
    solve( (∃ #j. (Type( $Att, 'customer' ) @ #j) ∧ #j < #i)  ∥
           (∃ #j. (Type( $Att, 'cashier' ) @ #j) ∧ #j < #i) )
      case case_1
      solve( (∃ #j. (Type( x.1, 'customer' ) @ #j) ∧ #j < #i.1)  ∥
             (∃ #j. (Type( x.1, 'cashier' ) @ #j) ∧ #j < #i.1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      qed
    next
      case case_2
      solve( (∃ #j. (Type( x.1, 'customer' ) @ #j) ∧ #j < #i.1)  ∥
             (∃ #j. (Type( x.1, 'cashier' ) @ #j) ∧ #j < #i.1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma lookA [sources]:
  all-traces
  "∀ x #i.
    (LookA( x ) @ #i) ⇒
    (((∃ #j. (!KU( x ) @ #j) ∧ (#j < #i)) ∨
      (∃ h c #j. (Purchase( h, c, x ) @ #j) ∧ (#j < #i))) ∨
     (∃ #j. (SendBarcode( x ) @ #j) ∧ (#j < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ x #i.
  (LookA( x ) @ #i)
 ∧
  (∀ #j. (!KU( x ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ h c #j. (Purchase( h, c, x ) @ #j) ⇒ ¬(#j < #i)) ∧
  (∀ #j. (SendBarcode( x ) @ #j) ⇒ ¬(#j < #i))"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( (∀ x #i.
           (LookA( x ) @ #i)
          ⇒
           ((last(#i)) ∨
            (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) ∨
            (∃ h c #j. (Purchase( h, c, x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) ∨
            (∃ #j. (SendBarcode( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))))  ∥
         (∃ x #i.
           (Human( x ) @ #i)
          ∧
           (¬(last(#i))) ∧
           (∀ #j.
             (Type( x, 'customer' ) @ #j) ⇒ ((last(#j)) ∨ (#j = #i) ∨ (#i < #j))) ∧
           (∀ #j.
             (Type( x, 'cashier' ) @ #j) ⇒ ((last(#j)) ∨ (#j = #i) ∨ (#i < #j)))) )
    case case_1
    solve( (last(#i))  ∥
           (∃ #j. (!KU( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ h c #j. (Purchase( h, c, x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i))  ∥
           (∃ #j. (SendBarcode( x ) @ #j) ∧ (¬(last(#j))) ∧ (#j < #i)) )
      case case_1
      solve( (∃ #j. (Type( $Att, 'customer' ) @ #j) ∧ #j < #i)  ∥
             (∃ #j. (Type( $Att, 'cashier' ) @ #j) ∧ #j < #i) )
        case case_1
        solve( PosDA( $Att, object(x) ) ▶₀ #i )
          case GetA
          solve( Pos( $A.1, $A, object(x) ) ▶₀ #vr.1 )
            case ChanOut_OO_case_1
            by contradiction /* from formulas */
          next
            case ChanOut_OO_case_2
            solve( Pos( $S, $A.1, object(x) ) ▶₀ #vr.4 )
              case ChanOut_OO_case_1
              by contradiction /* from formulas */
            next
              case ChanOut_OO_case_2
              by contradiction /* cyclic */
            qed
          next
            case ChanOut_OO_case_3
            by contradiction /* cyclic */
          qed
        qed
      next
        case case_2
        solve( PosDA( $Att, object(x) ) ▶₀ #i )
          case GetA
          solve( Pos( $A.1, $A, object(x) ) ▶₀ #vr.1 )
            case ChanOut_OO_case_1
            by contradiction /* from formulas */
          next
            case ChanOut_OO_case_2
            solve( Pos( $S, $A.1, object(x) ) ▶₀ #vr.4 )
              case ChanOut_OO_case_1
              by contradiction /* from formulas */
            next
              case ChanOut_OO_case_2
              by contradiction /* cyclic */
            qed
          next
            case ChanOut_OO_case_3
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case case_2
      by contradiction /* from formulas */
    next
      case case_3
      by contradiction /* from formulas */
    next
      case case_4
      by contradiction /* from formulas */
    qed
  next
    case case_2
    solve( (∃ #j. (Type( $Att, 'customer' ) @ #j) ∧ #j < #i)  ∥
           (∃ #j. (Type( $Att, 'cashier' ) @ #j) ∧ #j < #i) )
      case case_1
      solve( (∃ #j. (Type( x.1, 'customer' ) @ #j) ∧ #j < #i.1)  ∥
             (∃ #j. (Type( x.1, 'cashier' ) @ #j) ∧ #j < #i.1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      qed
    next
      case case_2
      solve( (∃ #j. (Type( x.1, 'customer' ) @ #j) ∧ #j < #i.1)  ∥
             (∃ #j. (Type( x.1, 'cashier' ) @ #j) ∧ #j < #i.1) )
        case case_1
        by contradiction /* from formulas */
      next
        case case_2
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma sendcashNoAtt:
  exists-trace
  "∃ a b m n #i.
    ((((Cash( a, b, m, n ) @ #i) ∧ (¬(∃ x #k. PrintA( x ) @ #k))) ∧
      (¬(∃ x #k. BuildA( x ) @ #k))) ∧
     (¬(∃ h x #k. Chatty( h, x ) @ #k))) ∧
    (¬(∃ h x #k. Cocky( h, x ) @ #k))"
/*
guarded formula characterizing all satisfying traces:
"∃ a b m n #i.
  (Cash( a, b, m, n ) @ #i)
 ∧
  (∀ x #k. (PrintA( x ) @ #k) ⇒ ⊥) ∧
  (∀ x #k. (BuildA( x ) @ #k) ⇒ ⊥) ∧
  (∀ h x #k. (Chatty( h, x ) @ #k) ⇒ ⊥) ∧
  (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥)"
*/
simplify
solve( Info( n, m ) ▶₁ #i )
  case 3Output
  solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
    case ChanIn_O
    solve( Pos( $Cu.1, $V, object(~cont_i) ) ▶₀ #vr.2 )
      case ChanOut_OO_case_1
      solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.3 )
        case ChanOut_OP_case_1
        solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.6 )
          case ChanOut_OO_case_1
          solve( Pos( $V.1, $Cu, receipt(~barcode_i) ) ▶₀ #vr.9 )
            case ChanOut_OP_case_1
            SOLVED // trace found
          qed
        qed
      qed
    qed
  qed
qed

lemma cashforvoucherNetto:
  all-traces
  "∀ ca cu c bar #i.
    (Cash( ca, cu, c, bar ) @ #i) ⇒
    (∃ #j.
      ((SendBarcode( bar ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ a2 b2 #i2. (Cash( a2, b2, c, bar ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ #j2. (SendBarcode( bar ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  ∀ #j.
   (SendBarcode( bar ) @ #j)
  ⇒
   ((¬(#j < #i)) ∨
    ((∃ a2 b2 #i2. (Cash( a2, b2, c, bar ) @ #i2) ∧ ¬(#i = #i2)) ∧
     (∀ #j2. (SendBarcode( bar ) @ #j2) ⇒ #j = #j2)))"
*/
simplify
solve( Info( bar, c ) ▶₁ #i )
  case 3Output
  solve( Info( ~barcode_i, ~cont_i ) ▶₁ #i2 )
    case 3Output
    by contradiction /* from formulas */
  qed
qed

lemma cashforcontainerNetto:
  all-traces
  "∀ ca cu c bar #i.
    (Cash( ca, cu, c, bar ) @ #i) ⇒
    (∃ v cu1 #j.
      ((GetCont( v, cu1, c ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ ca1 cu2 bar2 #i2.
           (Cash( ca1, cu2, c, bar2 ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ v1 cu3 #j2. (GetCont( v1, cu3, c ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  ∀ v cu1 #j.
   (GetCont( v, cu1, c ) @ #j)
  ⇒
   ((¬(#j < #i)) ∨
    ((∃ ca1 cu2 bar2 #i2. (Cash( ca1, cu2, c, bar2 ) @ #i2) ∧ ¬(#i = #i2)) ∧
     (∀ v1 cu3 #j2. (GetCont( v1, cu3, c ) @ #j2) ⇒ #j = #j2)))"
*/
simplify
solve( Info( bar, c ) ▶₁ #i )
  case 3Output
  solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
    case 3Output
    by contradiction /* from formulas */
  qed
qed

lemma cashforcontainerCustNetto:
  all-traces
  "∀ ca cu c bar #i.
    ((Cash( ca, cu, c, bar ) @ #i) ∧
     (((¬(∃ h x #k. Chatty( h, x ) @ #k)) ∧
       (¬(∃ h x #k. Cocky( h, x ) @ #k))) ∨
      ((¬(∃ x #k. PrintA( x ) @ #k)) ∧ (¬(∃ h x #k. Cocky( h, x ) @ #k))))) ⇒
    (∃ #j v.
      ((GetCont( v, cu, c ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ v1 #j2. (GetCont( v1, cu, c ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  ((((∀ h x #k. (Chatty( h, x ) @ #k) ⇒ ⊥) ∧
     (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥)) ∨
    ((∀ x #k. (PrintA( x ) @ #k) ⇒ ⊥) ∧
     (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥)))) ∧
  (∀ #j v.
    (GetCont( v, cu, c ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     ((∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ ¬(#i = #i2)) ∧
      (∀ v1 #j2. (GetCont( v1, cu, c ) @ #j2) ⇒ #j = #j2))))"
*/
simplify
solve( ((∀ h x #k. (Chatty( h, x ) @ #k) ⇒ ⊥) ∧
        (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥))  ∥
       ((∀ x #k. (PrintA( x ) @ #k) ⇒ ⊥) ∧
        (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥)) )
  case case_1
  solve( Info( bar, c ) ▶₁ #i )
    case 3Output
    solve( Pos( $Cu.1, $V, object(~cont_i) ) ▶₀ #vr.2 )
      case ChanOut_OO_case_1
      solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.5 )
        case ChanOut_OO_case_1
        solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
          case ChanIn_O
          solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.7 )
            case ChanOut_OP_case_1
            solve( Pos( $V.1, $Cu, receipt(~barcode_i) ) ▶₀ #vr.10 )
              case ChanOut_OP_case_1
              solve( (#i < #i2)  ∥ (#i2 < #i) )
                case case_1
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO_case_1
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO_case_1
                      by contradiction /* cyclic */
                    next
                      case ChanOut_OO_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case ChanOut_OO_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case case_2
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO_case_1
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO_case_1
                      by contradiction /* cyclic */
                    next
                      case ChanOut_OO_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case ChanOut_OO_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case ChanOut_OP_case_2
              by contradiction /* from formulas */
            qed
          next
            case ChanOut_OP_case_2
            by contradiction /* from formulas */
          qed
        qed
      next
        case ChanOut_OO_case_2
        by contradiction /* from formulas */
      qed
    next
      case ChanOut_OO_case_2
      by contradiction /* from formulas */
    qed
  qed
next
  case case_2
  solve( Info( bar, c ) ▶₁ #i )
    case 3Output
    solve( Pos( $Cu.1, $V, object(~cont_i) ) ▶₀ #vr.2 )
      case ChanOut_OO_case_1
      solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.5 )
        case ChanOut_OO_case_1
        solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
          case ChanIn_O
          solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.7 )
            case ChanOut_OP_case_1
            solve( Pos( $V.1, $Cu, receipt(~barcode_i) ) ▶₀ #vr.10 )
              case ChanOut_OP_case_1
              solve( (#i < #i2)  ∥ (#i2 < #i) )
                case case_1
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO_case_1
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO_case_1
                      by contradiction /* cyclic */
                    next
                      case ChanOut_OO_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case ChanOut_OO_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case case_2
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO_case_1
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO_case_1
                      by contradiction /* cyclic */
                    next
                      case ChanOut_OO_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case ChanOut_OO_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case ChanOut_OP_case_2
              by contradiction /* from formulas */
            qed
          next
            case ChanOut_OP_case_2
            by contradiction /* from formulas */
          qed
        qed
      next
        case ChanOut_OO_case_2
        by contradiction /* from formulas */
      qed
    next
      case ChanOut_OO_case_2
      by contradiction /* from formulas */
    qed
  qed
qed

lemma cashforpurchaseNetto:
  all-traces
  "∀ ca cu c bar #i.
    ((Cash( ca, cu, c, bar ) @ #i) ∧
     ((¬(∃ x #k. BuildA( x ) @ #k)) ∨
      ((¬(∃ h x #k. Chatty( h, x ) @ #k)) ∧
       (¬(∃ h x #k. Cocky( h, x ) @ #k))))) ⇒
    (∃ cu1 s #j.
      ((Purchase( s, cu1, c ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ ca1 cu2 bar2 #i2.
           (Cash( ca1, cu2, c, bar2 ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ s1 cu3 #j2. (Purchase( s1, cu3, c ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  (((∀ x #k. (BuildA( x ) @ #k) ⇒ ⊥) ∨
    ((∀ h x #k. (Chatty( h, x ) @ #k) ⇒ ⊥) ∧
     (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥)))) ∧
  (∀ cu1 s #j.
    (Purchase( s, cu1, c ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     ((∃ ca1 cu2 bar2 #i2. (Cash( ca1, cu2, c, bar2 ) @ #i2) ∧ ¬(#i = #i2)) ∧
      (∀ s1 cu3 #j2. (Purchase( s1, cu3, c ) @ #j2) ⇒ #j = #j2))))"
*/
simplify
solve( (∀ x #k. (BuildA( x ) @ #k) ⇒ ⊥)  ∥
       ((∀ h x #k. (Chatty( h, x ) @ #k) ⇒ ⊥) ∧
        (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥)) )
  case case_1
  solve( Info( bar, c ) ▶₁ #i )
    case 3Output
    solve( (#i < #i2)  ∥ (#i2 < #i) )
      case case_1
      solve( Pos( $Cu.2, $V, object(~cont_i) ) ▶₀ #vr.2 )
        case ChanOut_OO_case_1
        solve( Pos( $S.1, $Cu.2, object(~cont_i) ) ▶₀ #vr.5 )
          case ChanOut_OO_case_1
          solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
            case 3Output
            solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.8 )
              case ChanOut_OO_case_1
              solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.11 )
                case ChanOut_OO_case_1
                by contradiction /* cyclic */
              next
                case ChanOut_OO_case_2
                solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.13)  ∥
                       (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.13) )
                  case case_1
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                    case case_1
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.15)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.15) )
                      case case_1
                      solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.16)  ∥
                             (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.16) )
                        case case_1
                        solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                               (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                          case case_1
                          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                            case case_1
                            by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                          qed
                        next
                          case case_2
                          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                            case case_1
                            by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                    case case_2
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.15)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.15) )
                      case case_2
                      solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.16)  ∥
                             (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.16) )
                        case case_2
                        solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                               (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                          case case_1
                          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                            case case_2
                            by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                          qed
                        next
                          case case_2
                          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                            case case_2
                            by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case ChanOut_OO_case_2
              solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                     (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.10) )
                case case_1
                solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                       (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                  case case_1
                  solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.12)  ∥
                         (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.12) )
                    case case_1
                    solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.13)  ∥
                           (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.13) )
                      case case_1
                      solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                             (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                        case case_1
                        solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                               (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                          case case_1
                          by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.14 )
                        qed
                      next
                        case case_2
                        solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                               (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                          case case_1
                          by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.14 )
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case ChanOut_OO_case_2
          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.7)  ∥
                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.7) )
            case case_1
            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.8) )
              case case_1
              solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.9)  ∥
                     (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.9) )
                case case_1
                solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                       (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.10) )
                  case case_1
                  solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                         (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                    case case_1
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                      case case_1
                      solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                        case ChanOut_OO
                        solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                          case 3Output
                          solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.14 )
                            case ChanOut_OO
                            solve( Pos( $S.2, $Cu.3, object(~cont_i) ) ▶₀ #vr.17 )
                              case ChanOut_OO
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                      case case_1
                      by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                    qed
                  qed
                qed
              qed
            qed
          next
            case case_2
            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.8) )
              case case_2
              solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.9)  ∥
                     (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.9) )
                case case_2
                solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                       (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.10) )
                  case case_2
                  solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                         (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                    case case_1
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                      case case_2
                      solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                        case ChanOut_OO
                        solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                          case 3Output
                          solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.14 )
                            case ChanOut_OO
                            solve( Pos( $S.2, $Cu.3, object(~cont_i) ) ▶₀ #vr.17 )
                              case ChanOut_OO
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                      case case_2
                      by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case ChanOut_OO_case_2
        solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.4)  ∥
               (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.4) )
          case case_1
          solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.5)  ∥
                 (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.5) )
            case case_1
            solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.6)  ∥
                   (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.6) )
              case case_1
              solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.7)  ∥
                     (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.7) )
                case case_1
                solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                       (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.8) )
                  case case_1
                  solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                         (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.8) )
                    case case_1
                    solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.8 )
                      case ChanOut_OO
                      solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                        case 3Output
                        solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.11 )
                          case ChanOut_OO_case_1
                          by solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.14 )
                        next
                          case ChanOut_OO_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                         (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.8) )
                    case case_1
                    by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.8 )
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case case_2
      solve( Pos( $Cu.2, $V, object(~cont_i) ) ▶₀ #vr.2 )
        case ChanOut_OO_case_1
        solve( Pos( $S.1, $Cu.2, object(~cont_i) ) ▶₀ #vr.5 )
          case ChanOut_OO_case_1
          solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
            case 3Output
            solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.8 )
              case ChanOut_OO_case_1
              solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.11 )
                case ChanOut_OO_case_1
                by contradiction /* cyclic */
              next
                case ChanOut_OO_case_2
                solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.13)  ∥
                       (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.13) )
                  case case_1
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                    case case_1
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.15)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.15) )
                      case case_1
                      solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.16)  ∥
                             (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.16) )
                        case case_1
                        solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                               (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                          case case_1
                          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                            case case_1
                            by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                          qed
                        next
                          case case_2
                          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                            case case_1
                            by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                    case case_2
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.15)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.15) )
                      case case_2
                      solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.16)  ∥
                             (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.16) )
                        case case_2
                        solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                               (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                          case case_1
                          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                            case case_2
                            by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                          qed
                        next
                          case case_2
                          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                            case case_2
                            by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            next
              case ChanOut_OO_case_2
              solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                     (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.10) )
                case case_1
                solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                       (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                  case case_1
                  solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.12)  ∥
                         (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.12) )
                    case case_1
                    solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.13)  ∥
                           (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.13) )
                      case case_1
                      solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                             (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                        case case_1
                        solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                               (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                          case case_1
                          by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.14 )
                        qed
                      next
                        case case_2
                        solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                               (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                          case case_1
                          by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.14 )
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case ChanOut_OO_case_2
          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.7)  ∥
                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.7) )
            case case_1
            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.8) )
              case case_1
              solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.9)  ∥
                     (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.9) )
                case case_1
                solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                       (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.10) )
                  case case_1
                  solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                         (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                    case case_1
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                      case case_1
                      solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                        case ChanOut_OO
                        solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                          case 3Output
                          solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.14 )
                            case ChanOut_OO
                            solve( Pos( $S.2, $Cu.3, object(~cont_i) ) ▶₀ #vr.17 )
                              case ChanOut_OO
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                      case case_1
                      by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                    qed
                  qed
                qed
              qed
            qed
          next
            case case_2
            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.8) )
              case case_2
              solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.9)  ∥
                     (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.9) )
                case case_2
                solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                       (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.10) )
                  case case_2
                  solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                         (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                    case case_1
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                      case case_2
                      solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                        case ChanOut_OO
                        solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                          case 3Output
                          solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.14 )
                            case ChanOut_OO
                            solve( Pos( $S.2, $Cu.3, object(~cont_i) ) ▶₀ #vr.17 )
                              case ChanOut_OO
                              by contradiction /* cyclic */
                            qed
                          qed
                        qed
                      qed
                    qed
                  next
                    case case_2
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                      case case_2
                      by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case ChanOut_OO_case_2
        solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.4)  ∥
               (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.4) )
          case case_1
          solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.5)  ∥
                 (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.5) )
            case case_1
            solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.6)  ∥
                   (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.6) )
              case case_1
              solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.7)  ∥
                     (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.7) )
                case case_1
                solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                       (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.8) )
                  case case_1
                  solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                         (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.8) )
                    case case_1
                    solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.8 )
                      case ChanOut_OO
                      solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                        case 3Output
                        solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.11 )
                          case ChanOut_OO_case_1
                          by solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.14 )
                        next
                          case ChanOut_OO_case_2
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                         (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.8) )
                    case case_1
                    by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.8 )
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
next
  case case_2
  solve( Info( bar, c ) ▶₁ #i )
    case 3Output
    solve( (#i < #i2)  ∥ (#i2 < #i) )
      case case_1
      solve( Pos( $Cu.2, $V, object(~cont_i) ) ▶₀ #vr.2 )
        case ChanOut_OO_case_1
        solve( Pos( $S.1, $Cu.2, object(~cont_i) ) ▶₀ #vr.5 )
          case ChanOut_OO_case_1
          solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
            case 3Output
            solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.8 )
              case ChanOut_OO_case_1
              solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.11 )
                case ChanOut_OO_case_1
                by contradiction /* cyclic */
              next
                case ChanOut_OO_case_2
                by contradiction /* from formulas */
              qed
            next
              case ChanOut_OO_case_2
              by contradiction /* from formulas */
            qed
          qed
        next
          case ChanOut_OO_case_2
          by contradiction /* from formulas */
        qed
      next
        case ChanOut_OO_case_2
        by contradiction /* from formulas */
      qed
    next
      case case_2
      solve( Pos( $Cu.2, $V, object(~cont_i) ) ▶₀ #vr.2 )
        case ChanOut_OO_case_1
        solve( Pos( $S.1, $Cu.2, object(~cont_i) ) ▶₀ #vr.5 )
          case ChanOut_OO_case_1
          solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
            case 3Output
            solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.8 )
              case ChanOut_OO_case_1
              solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.11 )
                case ChanOut_OO_case_1
                by contradiction /* cyclic */
              next
                case ChanOut_OO_case_2
                by contradiction /* from formulas */
              qed
            next
              case ChanOut_OO_case_2
              by contradiction /* from formulas */
            qed
          qed
        next
          case ChanOut_OO_case_2
          by contradiction /* from formulas */
        qed
      next
        case ChanOut_OO_case_2
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma cashforpurchaseCustNetto:
  all-traces
  "∀ ca cu c bar #i.
    ((Cash( ca, cu, c, bar ) @ #i) ∧
     (((¬(∃ h x #k. Chatty( h, x ) @ #k)) ∧
       (¬(∃ h x #k. Cocky( h, x ) @ #k))) ∨
      (((¬(∃ x #k. PrintA( x ) @ #k)) ∧ (¬(∃ h x #k. Cocky( h, x ) @ #k))) ∧
       (¬(∃ x #k. BuildA( x ) @ #k))))) ⇒
    (∃ s #j.
      ((Purchase( s, cu, c ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ s1 #j2. (Purchase( s1, cu, c ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  ((((∀ h x #k. (Chatty( h, x ) @ #k) ⇒ ⊥) ∧
     (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥)) ∨
    ((∀ x #k. (PrintA( x ) @ #k) ⇒ ⊥) ∧
     (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥) ∧
     (∀ x #k. (BuildA( x ) @ #k) ⇒ ⊥)))) ∧
  (∀ s #j.
    (Purchase( s, cu, c ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     ((∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ ¬(#i = #i2)) ∧
      (∀ s1 #j2. (Purchase( s1, cu, c ) @ #j2) ⇒ #j = #j2))))"
*/
simplify
solve( ((∀ h x #k. (Chatty( h, x ) @ #k) ⇒ ⊥) ∧
        (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥))  ∥
       ((∀ x #k. (PrintA( x ) @ #k) ⇒ ⊥) ∧
        (∀ h x #k. (Cocky( h, x ) @ #k) ⇒ ⊥) ∧
        (∀ x #k. (BuildA( x ) @ #k) ⇒ ⊥)) )
  case case_1
  solve( Info( bar, c ) ▶₁ #i )
    case 3Output
    solve( Pos( $Cu.1, $V, object(~cont_i) ) ▶₀ #vr.2 )
      case ChanOut_OO_case_1
      solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.5 )
        case ChanOut_OO_case_1
        solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
          case ChanIn_O
          solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.7 )
            case ChanOut_OP_case_1
            solve( Pos( $V.1, $Cu, receipt(~barcode_i) ) ▶₀ #vr.10 )
              case ChanOut_OP_case_1
              solve( (#i < #i2)  ∥ (#i2 < #i) )
                case case_1
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO_case_1
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO_case_1
                      by contradiction /* cyclic */
                    next
                      case ChanOut_OO_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case ChanOut_OO_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case case_2
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO_case_1
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO_case_1
                      by contradiction /* cyclic */
                    next
                      case ChanOut_OO_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case ChanOut_OO_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case ChanOut_OP_case_2
              by contradiction /* from formulas */
            qed
          next
            case ChanOut_OP_case_2
            by contradiction /* from formulas */
          qed
        qed
      next
        case ChanOut_OO_case_2
        by contradiction /* from formulas */
      qed
    next
      case ChanOut_OO_case_2
      by contradiction /* from formulas */
    qed
  qed
next
  case case_2
  solve( Info( bar, c ) ▶₁ #i )
    case 3Output
    solve( Pos( $Cu.1, $V, object(~cont_i) ) ▶₀ #vr.2 )
      case ChanOut_OO_case_1
      solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.5 )
        case ChanOut_OO_case_1
        solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
          case ChanIn_O
          solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.7 )
            case ChanOut_OP_case_1
            solve( Pos( $V.1, $Cu, receipt(~barcode_i) ) ▶₀ #vr.10 )
              case ChanOut_OP_case_1
              solve( (#i < #i2)  ∥ (#i2 < #i) )
                case case_1
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO_case_1
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO_case_1
                      by contradiction /* cyclic */
                    next
                      case ChanOut_OO_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case ChanOut_OO_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              next
                case case_2
                solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                  case 3Output
                  solve( Pos( $Cu.1, $V.1, object(~cont_i) ) ▶₀ #vr.13 )
                    case ChanOut_OO_case_1
                    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.16 )
                      case ChanOut_OO_case_1
                      by contradiction /* cyclic */
                    next
                      case ChanOut_OO_case_2
                      by contradiction /* from formulas */
                    qed
                  next
                    case ChanOut_OO_case_2
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case ChanOut_OP_case_2
              by contradiction /* from formulas */
            qed
          next
            case ChanOut_OP_case_2
            by contradiction /* from formulas */
          qed
        qed
      next
        case ChanOut_OO_case_2
        by contradiction /* from formulas */
      qed
    next
      case ChanOut_OO_case_2
      by contradiction /* from formulas */
    qed
  qed
qed

lemma cashforpurchaseCustNettoAttack:
  all-traces
  "∀ ca cu c bar #i.
    (Cash( ca, cu, c, bar ) @ #i) ⇒
    (∃ s #j.
      ((Purchase( s, cu, c ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ s1 #j2. (Purchase( s1, cu, c ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  ∀ s #j.
   (Purchase( s, cu, c ) @ #j)
  ⇒
   ((¬(#j < #i)) ∨
    ((∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ ¬(#i = #i2)) ∧
     (∀ s1 #j2. (Purchase( s1, cu, c ) @ #j2) ⇒ #j = #j2)))"
*/
simplify
solve( Info( bar, c ) ▶₁ #i )
  case 3Output
  solve( Pos( $Cu.1, $V, object(~cont_i) ) ▶₀ #vr.2 )
    case ChanOut_OO_case_1
    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.5 )
      case ChanOut_OO_case_1
      solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
        case ChanIn_O
        solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.7 )
          case ChanOut_OP_case_2
          solve( (∃ #j. (Type( $Cu, 'customer' ) @ #j) ∧ #j < #vr.9)  ∥
                 (∃ #j. (Type( $Cu, 'cashier' ) @ #j) ∧ #j < #vr.9) )
            case case_1
            solve( (∃ #j. (Type( $Cu, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                   (∃ #j. (Type( $Cu, 'cashier' ) @ #j) ∧ #j < #vr.10) )
              case case_1
              solve( (∃ #j. (Type( $Cu, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                     (∃ #j. (Type( $Cu, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                case case_1
                solve( (∃ #j. (Type( $Cu, 'customer' ) @ #j) ∧ #j < #vr.12)  ∥
                       (∃ #j. (Type( $Cu, 'cashier' ) @ #j) ∧ #j < #vr.12) )
                  case case_1
                  solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.13)  ∥
                         (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.13) )
                    case case_1
                    solve( (∃ #j. (Type( $Cu, 'customer' ) @ #j) ∧ #j < #vr.13)  ∥
                           (∃ #j. (Type( $Cu, 'cashier' ) @ #j) ∧ #j < #vr.13) )
                      case case_1
                      solve( Pos( $A.1, $A, receipt(~barcode_i) ) ▶₀ #vr.13 )
                        case ChanOut_OP
                        solve( Type( $Cu, 'customer' ) @ #j )
                          case 1Purchase
                          solve( Type( $Cu, 'customer' ) @ #j.1 )
                            case 1Purchase
                            solve( Type( $Cu, 'customer' ) @ #j.2 )
                              case 1Purchase
                              solve( Type( $Cu, 'customer' ) @ #j.3 )
                                case 1Purchase
                                solve( Type( $A, 'customer' ) @ #j.4 )
                                  case 1Purchase
                                  solve( Type( $Cu, 'customer' ) @ #j.5 )
                                    case 1Purchase
                                    SOLVED // trace found
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma cashforpurchaseNettoAttack:
  all-traces
  "∀ ca cu c bar #i.
    (Cash( ca, cu, c, bar ) @ #i) ⇒
    (∃ s cu1 #j.
      ((Purchase( s, cu1, c ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ ca1 cu2 bar2 #i2.
           (Cash( ca1, cu2, c, bar2 ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ s1 cu3 #j2. (Purchase( s1, cu3, c ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  ∀ s cu1 #j.
   (Purchase( s, cu1, c ) @ #j)
  ⇒
   ((¬(#j < #i)) ∨
    ((∃ ca1 cu2 bar2 #i2. (Cash( ca1, cu2, c, bar2 ) @ #i2) ∧ ¬(#i = #i2)) ∧
     (∀ s1 cu3 #j2. (Purchase( s1, cu3, c ) @ #j2) ⇒ #j = #j2)))"
*/
simplify
solve( Info( bar, c ) ▶₁ #i )
  case 3Output
  solve( (#i < #i2)  ∥ (#i2 < #i) )
    case case_1
    solve( Pos( $Cu.2, $V, object(~cont_i) ) ▶₀ #vr.2 )
      case ChanOut_OO_case_1
      solve( Pos( $S.1, $Cu.2, object(~cont_i) ) ▶₀ #vr.5 )
        case ChanOut_OO_case_1
        solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
          case 3Output
          solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.8 )
            case ChanOut_OO_case_1
            solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.11 )
              case ChanOut_OO_case_1
              by contradiction /* cyclic */
            next
              case ChanOut_OO_case_2
              solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.13)  ∥
                     (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.13) )
                case case_1
                solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                       (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                  case case_1
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.15)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.15) )
                    case case_1
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.16)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.16) )
                      case case_1
                      solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                             (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                        case case_1
                        solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                               (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                          case case_1
                          by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                        qed
                      next
                        case case_2
                        solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                               (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                          case case_1
                          by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                       (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                  case case_2
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.15)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.15) )
                    case case_2
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.16)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.16) )
                      case case_2
                      solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                             (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                        case case_1
                        solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                               (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                          case case_2
                          by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                        qed
                      next
                        case case_2
                        solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                               (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                          case case_2
                          by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case ChanOut_OO_case_2
            solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                   (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.10) )
              case case_1
              solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                     (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                case case_1
                solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.12)  ∥
                       (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.12) )
                  case case_1
                  solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.13)  ∥
                         (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.13) )
                    case case_1
                    solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                           (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                      case case_1
                      solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                             (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                        case case_1
                        by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.14 )
                      qed
                    next
                      case case_2
                      solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                             (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                        case case_1
                        by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.14 )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case ChanOut_OO_case_2
        solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.7)  ∥
               (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.7) )
          case case_1
          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.8) )
            case case_1
            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.9)  ∥
                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.9) )
              case case_1
              solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                     (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.10) )
                case case_1
                solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                       (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                  case case_1
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                    case case_1
                    solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                      case ChanOut_OO
                      solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                        case 3Output
                        solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.14 )
                          case ChanOut_OO
                          solve( Pos( $S.2, $Cu.3, object(~cont_i) ) ▶₀ #vr.17 )
                            case ChanOut_OO
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                    case case_1
                    by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                  qed
                qed
              qed
            qed
          qed
        next
          case case_2
          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.8) )
            case case_2
            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.9)  ∥
                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.9) )
              case case_2
              solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                     (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.10) )
                case case_2
                solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                       (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                  case case_1
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                    case case_2
                    solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                      case ChanOut_OO
                      solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                        case 3Output
                        solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.14 )
                          case ChanOut_OO
                          solve( Pos( $S.2, $Cu.3, object(~cont_i) ) ▶₀ #vr.17 )
                            case ChanOut_OO
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                    case case_2
                    by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case ChanOut_OO_case_2
      solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.4)  ∥
             (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.4) )
        case case_1
        solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.5)  ∥
               (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.5) )
          case case_1
          solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.6)  ∥
                 (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.6) )
            case case_1
            solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.7)  ∥
                   (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.7) )
              case case_1
              solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                     (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.8) )
                case case_1
                solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                       (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.8) )
                  case case_1
                  solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.8 )
                    case ChanOut_OO
                    solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                      case 3Output
                      solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.11 )
                        case ChanOut_OO_case_1
                        by solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.14 )
                      next
                        case ChanOut_OO_case_2
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                       (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.8) )
                  case case_1
                  by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.8 )
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  next
    case case_2
    solve( Pos( $Cu.2, $V, object(~cont_i) ) ▶₀ #vr.2 )
      case ChanOut_OO_case_1
      solve( Pos( $S.1, $Cu.2, object(~cont_i) ) ▶₀ #vr.5 )
        case ChanOut_OO_case_1
        solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
          case 3Output
          solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.8 )
            case ChanOut_OO_case_1
            solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.11 )
              case ChanOut_OO_case_1
              by contradiction /* cyclic */
            next
              case ChanOut_OO_case_2
              solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.13)  ∥
                     (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.13) )
                case case_1
                solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                       (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                  case case_1
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.15)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.15) )
                    case case_1
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.16)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.16) )
                      case case_1
                      solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                             (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                        case case_1
                        solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                               (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                          case case_1
                          by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                        qed
                      next
                        case case_2
                        solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                               (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                          case case_1
                          by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                        qed
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                       (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                  case case_2
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.15)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.15) )
                    case case_2
                    solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.16)  ∥
                           (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.16) )
                      case case_2
                      solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                             (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                        case case_1
                        solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                               (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                          case case_2
                          by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                        qed
                      next
                        case case_2
                        solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.17)  ∥
                               (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.17) )
                          case case_2
                          by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.17 )
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case ChanOut_OO_case_2
            solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                   (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.10) )
              case case_1
              solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                     (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                case case_1
                solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.12)  ∥
                       (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.12) )
                  case case_1
                  solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.13)  ∥
                         (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.13) )
                    case case_1
                    solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                           (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                      case case_1
                      solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                             (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                        case case_1
                        by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.14 )
                      qed
                    next
                      case case_2
                      solve( (∃ #j. (Type( $Cu.3, 'customer' ) @ #j) ∧ #j < #vr.14)  ∥
                             (∃ #j. (Type( $Cu.3, 'cashier' ) @ #j) ∧ #j < #vr.14) )
                        case case_1
                        by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.14 )
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case ChanOut_OO_case_2
        solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.7)  ∥
               (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.7) )
          case case_1
          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.8) )
            case case_1
            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.9)  ∥
                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.9) )
              case case_1
              solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                     (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.10) )
                case case_1
                solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                       (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                  case case_1
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                    case case_1
                    solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                      case ChanOut_OO
                      solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                        case 3Output
                        solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.14 )
                          case ChanOut_OO
                          solve( Pos( $S.2, $Cu.3, object(~cont_i) ) ▶₀ #vr.17 )
                            case ChanOut_OO
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                    case case_1
                    by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                  qed
                qed
              qed
            qed
          qed
        next
          case case_2
          solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                 (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.8) )
            case case_2
            solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.9)  ∥
                   (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.9) )
              case case_2
              solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                     (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.10) )
                case case_2
                solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                       (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                  case case_1
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                    case case_2
                    solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                      case ChanOut_OO
                      solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                        case 3Output
                        solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.14 )
                          case ChanOut_OO
                          solve( Pos( $S.2, $Cu.3, object(~cont_i) ) ▶₀ #vr.17 )
                            case ChanOut_OO
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case case_2
                  solve( (∃ #j. (Type( $S.1, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                         (∃ #j. (Type( $S.1, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                    case case_2
                    by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.11 )
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case ChanOut_OO_case_2
      solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.4)  ∥
             (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.4) )
        case case_1
        solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.5)  ∥
               (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.5) )
          case case_1
          solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.6)  ∥
                 (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.6) )
            case case_1
            solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.7)  ∥
                   (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.7) )
              case case_1
              solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                     (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.8) )
                case case_1
                solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                       (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.8) )
                  case case_1
                  solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.8 )
                    case ChanOut_OO
                    solve( Info( bar2, ~cont_i ) ▶₁ #i2 )
                      case 3Output
                      solve( Pos( $Cu.3, $V.1, object(~cont_i) ) ▶₀ #vr.11 )
                        case ChanOut_OO_case_1
                        by solve( Pos( $S.1, $Cu.3, object(~cont_i) ) ▶₀ #vr.14 )
                      next
                        case ChanOut_OO_case_2
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                qed
              next
                case case_2
                solve( (∃ #j. (Type( $Cu.2, 'customer' ) @ #j) ∧ #j < #vr.8)  ∥
                       (∃ #j. (Type( $Cu.2, 'cashier' ) @ #j) ∧ #j < #vr.8) )
                  case case_1
                  by solve( Pos( $A.1, $A, object(~cont_i) ) ▶₀ #vr.8 )
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma cashforcontainerCustNettoAttack:
  all-traces
  "∀ ca cu c bar #i.
    (Cash( ca, cu, c, bar ) @ #i) ⇒
    (∃ #j v.
      ((GetCont( v, cu, c ) @ #j) ∧ (#j < #i)) ∧
      ((¬(∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ (¬(#i = #i2)))) ∨
       (∃ v1 #j2. (GetCont( v1, cu, c ) @ #j2) ∧ (¬(#j = #j2)))))"
/*
guarded formula characterizing all counter-examples:
"∃ ca cu c bar #i.
  (Cash( ca, cu, c, bar ) @ #i)
 ∧
  ∀ #j v.
   (GetCont( v, cu, c ) @ #j)
  ⇒
   ((¬(#j < #i)) ∨
    ((∃ ca1 bar2 #i2. (Cash( ca1, cu, c, bar2 ) @ #i2) ∧ ¬(#i = #i2)) ∧
     (∀ v1 #j2. (GetCont( v1, cu, c ) @ #j2) ⇒ #j = #j2)))"
*/
simplify
solve( Info( bar, c ) ▶₁ #i )
  case 3Output
  solve( Pos( $Cu.1, $V, object(~cont_i) ) ▶₀ #vr.2 )
    case ChanOut_OO_case_1
    solve( Pos( $S.1, $Cu.1, object(~cont_i) ) ▶₀ #vr.5 )
      case ChanOut_OO_case_1
      solve( In_O( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #i )
        case ChanIn_O
        solve( Pos( $Cu, $Ca, receipt(~barcode_i) ) ▶₀ #vr.7 )
          case ChanOut_OP_case_2
          solve( (∃ #j. (Type( $Cu, 'customer' ) @ #j) ∧ #j < #vr.9)  ∥
                 (∃ #j. (Type( $Cu, 'cashier' ) @ #j) ∧ #j < #vr.9) )
            case case_1
            solve( (∃ #j. (Type( $Cu, 'customer' ) @ #j) ∧ #j < #vr.10)  ∥
                   (∃ #j. (Type( $Cu, 'cashier' ) @ #j) ∧ #j < #vr.10) )
              case case_1
              solve( (∃ #j. (Type( $Cu, 'customer' ) @ #j) ∧ #j < #vr.11)  ∥
                     (∃ #j. (Type( $Cu, 'cashier' ) @ #j) ∧ #j < #vr.11) )
                case case_1
                solve( (∃ #j. (Type( $Cu, 'customer' ) @ #j) ∧ #j < #vr.12)  ∥
                       (∃ #j. (Type( $Cu, 'cashier' ) @ #j) ∧ #j < #vr.12) )
                  case case_1
                  solve( (∃ #j. (Type( $A, 'customer' ) @ #j) ∧ #j < #vr.13)  ∥
                         (∃ #j. (Type( $A, 'cashier' ) @ #j) ∧ #j < #vr.13) )
                    case case_1
                    solve( (∃ #j. (Type( $Cu, 'customer' ) @ #j) ∧ #j < #vr.13)  ∥
                           (∃ #j. (Type( $Cu, 'cashier' ) @ #j) ∧ #j < #vr.13) )
                      case case_1
                      solve( Pos( $A.1, $A, receipt(~barcode_i) ) ▶₀ #vr.13 )
                        case ChanOut_OP
                        solve( Type( $Cu, 'customer' ) @ #j )
                          case 1Purchase
                          solve( Type( $Cu, 'customer' ) @ #j.1 )
                            case 1Purchase
                            solve( Type( $Cu, 'customer' ) @ #j.2 )
                              case 1Purchase
                              solve( Type( $Cu, 'customer' ) @ #j.3 )
                                case 1Purchase
                                solve( Type( $A, 'customer' ) @ #j.4 )
                                  case 1Purchase
                                  solve( Type( $Cu, 'customer' ) @ #j.5 )
                                    case 1Purchase
                                    SOLVED // trace found
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

/*
WARNING: the following wellformedness checks failed!

Lemma actions:
  lemma `chatty' references action 
    (ProtoFact Linear "Chatty" 2,2,Linear)
  but no rule has such an action.
  
  lemma `sendcashNoAtt' references action 
    (ProtoFact Linear "BuildA" 1,1,Linear)
  but no rule has such an action.
  
  lemma `sendcashNoAtt' references action 
    (ProtoFact Linear "Chatty" 2,2,Linear)
  but no rule has such an action.
  
  lemma `sendcashNoAtt' references action 
    (ProtoFact Linear "PrintA" 1,1,Linear)
  but no rule has such an action.
  
  lemma `cashforcontainerCustNetto' references action 
    (ProtoFact Linear "Chatty" 2,2,Linear)
  but no rule has such an action.
  
  lemma `cashforcontainerCustNetto' references action 
    (ProtoFact Linear "PrintA" 1,1,Linear)
  but no rule has such an action.
  
  lemma `cashforpurchaseNetto' references action 
    (ProtoFact Linear "BuildA" 1,1,Linear)
  but no rule has such an action.
  
  lemma `cashforpurchaseNetto' references action 
    (ProtoFact Linear "Chatty" 2,2,Linear)
  but no rule has such an action.
  
  lemma `cashforpurchaseCustNetto' references action 
    (ProtoFact Linear "BuildA" 1,1,Linear)
  but no rule has such an action.
  
  lemma `cashforpurchaseCustNetto' references action 
    (ProtoFact Linear "Chatty" 2,2,Linear)
  but no rule has such an action.
  
  lemma `cashforpurchaseCustNetto' references action 
    (ProtoFact Linear "PrintA" 1,1,Linear)
  but no rule has such an action.
*/

end

==============================================================================
summary of summaries:

analyzed: /Users/finn/Documents/Research_Project_Tamarin/TamarinAutoRunner/exampleFiles/Netto.spthy

  WARNING: 11 wellformedness check failed!
           The analysis results might be wrong!
  
  chatty (all-traces): verified (12 steps)
  readA (all-traces): verified (27 steps)
  lookA (all-traces): verified (30 steps)
  sendcashNoAtt (exists-trace): verified (8 steps)
  cashforvoucherNetto (all-traces): verified (4 steps)
  cashforcontainerNetto (all-traces): verified (4 steps)
  cashforcontainerCustNetto (all-traces): verified (48 steps)
  cashforpurchaseNetto (all-traces): verified (166 steps)
  cashforpurchaseCustNetto (all-traces): verified (48 steps)
  cashforpurchaseCustNettoAttack (all-traces): falsified - found trace (20 steps)
  cashforpurchaseNettoAttack (all-traces): verified (143 steps)
  cashforcontainerCustNettoAttack (all-traces): falsified - found trace (20 steps)

==============================================================================
